{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/core/common/timer/TimerManager.ts"],"names":["TimerManager","Component","StringUtil","Timer","times","initTime","Date","getTime","serverTime","update","dt","key","data","timer","object","field","onTimerComplete","onSecond","call","onComplete","event","node","dispatchEvent","id","register","step","guid","unRegister","setServerTime","val","getServerTime","format","date","o","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","test","replace","RegExp","$1","getFullYear","substr","length","k","getLocalTime","now","save","startTime","load","interval"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2023-01-19 10:33:49\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2023-01-19 14:37:19\r\n */\r\nimport { Component } from \"cc\";\r\nimport { StringUtil } from \"../../utils/StringUtil\";\r\nimport { Timer } from \"./Timer\";\r\n\r\n/** 时间管理 */\r\nexport class TimerManager extends Component {\r\n    /** 倒计时数据 */\r\n    private times: any = {};\r\n    /** 当前游戏进入的时间毫秒值 */\r\n    private initTime: number = (new Date()).getTime();\r\n    /** 服务器时间与本地时间同步 */\r\n    private serverTime: number = 0;\r\n\r\n    update(dt: number) {\r\n        // 后台管理倒计时完成事件\r\n        for (let key in this.times) {\r\n            let data = this.times[key];\r\n            var timer = data.timer as Timer;\r\n            if (timer.update(dt)) {\r\n                if (data.object[data.field] > 0) {\r\n                    data.object[data.field]--;\r\n\r\n                    // 倒计时结束触发\r\n                    if (data.object[data.field] == 0) {\r\n                        this.onTimerComplete(data);\r\n                    }\r\n                    // 触发每秒回调事件  \r\n                    else if (data.onSecond) {\r\n                        data.onSecond.call(data.object);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 触发倒计时完成事件 */\r\n    private onTimerComplete(data: any) {\r\n        if (data.onComplete) data.onComplete.call(data.object);\r\n        if (data.event) this.node.dispatchEvent(data.event);\r\n\r\n        delete this.times[data.id];\r\n    }\r\n\r\n    /**\r\n     * 在指定对象上注册一个倒计时的回调管理器\r\n     * @param object        注册定时器的对象\r\n     * @param field         时间字段\r\n     * @param onSecond      每秒事件\r\n     * @param onComplete    倒计时完成事件\r\n     * @returns \r\n     * @example\r\n    export class Test extends Component {\r\n        private timeId!: string;\r\n        \r\n        start() {\r\n            // 在指定对象上注册一个倒计时的回调管理器\r\n            this.timeId = oops.timer.register(this, \"countDown\", this.onSecond, this.onComplete);\r\n        }\r\n        \r\n        private onSecond() {\r\n            console.log(\"每秒触发一次\");\r\n        }\r\n\r\n        private onComplete() {\r\n            console.log(\"倒计时完成触发\");\r\n        }\r\n    }\r\n     */\r\n    register(object: any, field: string, onSecond: Function, onComplete: Function): any {\r\n        var timer = new Timer();\r\n        timer.step = 1;\r\n\r\n        let data: any = {};\r\n        data.id = StringUtil.guid();\r\n        data.timer = timer;\r\n        data.object = object;                                   // 管理对象\r\n        data.field = field;                                     // 时间字段\r\n        data.onSecond = onSecond;                               // 每秒事件\r\n        data.onComplete = onComplete;                           // 倒计时完成事件\r\n        this.times[data.id] = data;\r\n        return data.id;\r\n    }\r\n\r\n    /** \r\n     * 在指定对象上注销一个倒计时的回调管理器 \r\n     * @param id         时间对象唯一表示\r\n     * @example\r\n    export class Test extends Component {\r\n        private timeId!: string;\r\n\r\n        start() {\r\n            this.timeId = oops.timer.register(this, \"countDown\", this.onSecond, this.onComplete);\r\n        }\r\n\r\n        onDestroy() {\r\n            // 在指定对象上注销一个倒计时的回调管理器\r\n            oops.timer.unRegister(this.timeId);\r\n        }\r\n    }\r\n     */\r\n    unRegister(id: string) {\r\n        if (this.times[id])\r\n            delete this.times[id];\r\n    }\r\n\r\n    /**\r\n     * 服务器时间与本地时间同步\r\n     * @param val   服务器时间刻度\r\n     * \r\n     */\r\n    setServerTime(val?: number): number {\r\n        if (val) {\r\n            this.serverTime = val;\r\n        }\r\n        return this.serverTime;\r\n    }\r\n    getServerTime(): number {\r\n        return this.serverTime + this.getTime();\r\n    }\r\n\r\n    /**\r\n     * 格式化日期显示\r\n     * @param format 格式化字符串（例：yyyy-MM-dd hh:mm:ss）\r\n     * @param date   时间对象\r\n     */\r\n    format(format: string, date: Date): string {\r\n        let o: any = {\r\n            \"M+\": date.getMonth() + 1,                      // month \r\n            \"d+\": date.getDate(),                           // day \r\n            \"h+\": date.getHours(),                          // hour \r\n            \"m+\": date.getMinutes(),                        // minute \r\n            \"s+\": date.getSeconds(),                        // second \r\n            \"q+\": Math.floor((date.getMonth() + 3) / 3),    // quarter \r\n            \"S\": date.getMilliseconds()                     // millisecond \r\n        }\r\n        if (/(y+)/.test(format)) {\r\n            format = format.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\r\n        }\r\n\r\n        for (let k in o) {\r\n            if (new RegExp(\"(\" + k + \")\").test(format)) {\r\n                format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\r\n            }\r\n        }\r\n        return format;\r\n    }\r\n\r\n    /** 获取游戏开始到现在逝去的时间 */\r\n    getTime(): number {\r\n        return this.getLocalTime() - this.initTime;\r\n    }\r\n\r\n    /** 获取本地时间刻度 */\r\n    getLocalTime(): number {\r\n        return Date.now();\r\n    }\r\n\r\n    /** 游戏最小化时记录时间数据 */\r\n    save() {\r\n        for (let key in this.times) {\r\n            this.times[key].startTime = this.getTime();\r\n        }\r\n    }\r\n\r\n    /** 游戏最大化时回复时间数据 */\r\n    load() {\r\n        for (let key in this.times) {\r\n            let interval = Math.floor((this.getTime() - (this.times[key].startTime || this.getTime())) / 1000);\r\n            let data = this.times[key];\r\n            data.object[data.field] = data.object[data.field] - interval;\r\n            if (data.object[data.field] < 0) {\r\n                data.object[data.field] = 0;\r\n                this.onTimerComplete(data);\r\n            }\r\n            this.times[key].startTime = null;\r\n        }\r\n    }\r\n}"]}