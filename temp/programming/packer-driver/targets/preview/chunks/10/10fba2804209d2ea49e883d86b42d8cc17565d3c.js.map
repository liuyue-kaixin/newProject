{"version":3,"sources":["file:///Volumes/SSD%201/ccProject/extensions/oops-plugin-framework/assets/libs/model-view/VMParent.ts"],"names":["_decorator","GameComponent","VM","ccclass","help","executionOrder","VMParent","tag","data","onLoad","node","uuid","replace","add","comps","getVMComponents","i","length","comp","replaceVMPath","onBind","onUnBind","path","pathArr","split","getComponentsInChildren","parents","filter","v","filters","forEach","concat","indexOf","onDestroy","remove"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAoBA,MAAAA,U,OAAAA,U;;AACXC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,E,iBAAAA,E;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,IAAX;AAAiBC,QAAAA;AAAjB,O,GAAoCL,U;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;yBAIqBM,Q,WAFpBD,cAAc,CAAC,CAAC,CAAF,C,UACdD,IAAI,CAAC,2EAAD,C,EAFJD,O,uCAAD,MAGqBG,QAHrB;AAAA;AAAA,0CAGoD;AAAA;AAAA;;AAChD;AADgD,eAEtCC,GAFsC,GAExB,OAFwB;;AAIhD;AAJgD,eAKtCC,IALsC,GAK1B,EAL0B;;AAOhD;AAPgD,eAQzCN,EARyC;AAAA;AAAA;AAAA;;AAUhD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIO,QAAAA,MAAM,GAAG;AACL,cAAI,KAAKD,IAAL,IAAa,IAAjB,EAAuB;AACvB,eAAKD,GAAL,GAAW,UAAU,GAAV,GAAgB,KAAKG,IAAL,CAAUC,IAAV,CAAeC,OAAf,CAAuB,GAAvB,EAA4B,EAA5B,CAAhB,GAAkD,GAA7D;AACA;AAAA;AAAA,wBAAGC,GAAH,CAAO,KAAKL,IAAZ,EAAkB,KAAKD,GAAvB,EAHK,CAIL;AACA;;AACA,cAAIO,KAAK,GAAG,KAAKC,eAAL,EAAZ,CANK,CAOL;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,gBAAME,IAAI,GAAGJ,KAAK,CAACE,CAAD,CAAlB;AACA,iBAAKG,aAAL,CAAmBD,IAAnB,EAAyB,KAAKX,GAA9B;AACH,WAXI,CAYL;;;AAEA,eAAKa,MAAL;AACH;AAED;;;AACUA,QAAAA,MAAM,GAAG,CAElB;AAED;;;AACUC,QAAAA,QAAQ,GAAG,CAEpB;;AAEOF,QAAAA,aAAa,CAACD,IAAD,EAAkBX,GAAlB,EAA+B;AAChD;AACA,cAAIe,IAAY,GAAGJ,IAAI,CAAC,WAAD,CAAvB,CAFgD,CAGhD;;AACA,cAAIA,IAAI,CAAC,cAAD,CAAJ,IAAwB,IAA5B,EAAkC;AAC9B;AACA,gBAAIK,OAAiB,GAAGL,IAAI,CAAC,cAAD,CAA5B;;AACA,gBAAIK,OAAJ,EAAa;AACT,mBAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,OAAO,CAACN,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,oBAAMM,KAAI,GAAGC,OAAO,CAACP,CAAD,CAApB;AACAO,gBAAAA,OAAO,CAACP,CAAD,CAAP,GAAaM,KAAI,CAACV,OAAL,CAAa,GAAb,EAAkBL,GAAlB,CAAb;AACH;AACJ;AAEJ,WAVD,MAWK;AACD;AACA;AACA,gBAAIe,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,MAAuB,GAA3B,EAAgC;AAC5B;AACAN,cAAAA,IAAI,CAAC,WAAD,CAAJ,GAAoBI,IAAI,CAACV,OAAL,CAAa,GAAb,EAAkBL,GAAlB,CAApB;AACH;AACJ;AACJ;AAED;;;AACQQ,QAAAA,eAAe,GAAG;AACtB,cAAID,KAAK,GAAG,KAAKJ,IAAL,CAAUe,uBAAV,CAAkC,QAAlC,CAAZ;AACA,cAAIC,OAAO,GAAG,KAAKhB,IAAL,CAAUe,uBAAV,CAAkC,UAAlC,EAA8CE,MAA9C,CAAqDC,CAAC,IAAIA,CAAC,CAACjB,IAAF,KAAW,KAAKA,IAA1E,CAAd,CAFsB,CAE0E;AAEhG;;AACA,cAAIkB,OAAc,GAAG,EAArB;AACAH,UAAAA,OAAO,CAACI,OAAR,CAAiBpB,IAAD,IAAqB;AACjCmB,YAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAerB,IAAI,CAACe,uBAAL,CAA6B,QAA7B,CAAf,CAAV;AACH,WAFD;AAIAX,UAAAA,KAAK,GAAGA,KAAK,CAACa,MAAN,CAAcC,CAAD,IAAOC,OAAO,CAACG,OAAR,CAAgBJ,CAAhB,IAAqB,CAAzC,CAAR;AACA,iBAAOd,KAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACcmB,QAAAA,SAAS,GAAG;AAClB,eAAKZ,QAAL,GADkB,CAGlB;;AACA;AAAA;AAAA,wBAAGa,MAAH,CAAU,KAAK3B,GAAf;AACA,eAAKC,IAAL,GAAY,IAAZ;AAEA,gBAAMyB,SAAN;AACH;;AAxG+C,O","sourcesContent":["import { Component, _decorator } from 'cc';\r\nimport { GameComponent } from '../../module/common/GameComponent';\r\nimport { VM } from './ViewModel';\r\n\r\nconst { ccclass, help, executionOrder } = _decorator;\r\n\r\n/**\r\n * 提供VM环境，控制旗下所有VM节点\r\n * 一般用于 非全局的 VM绑定,VM 环境与 组件紧密相连\r\n * （Prefab 模式绑定）\r\n * VMParent 必须必其他组件优先执行\r\n * v0.1 修复bug ，现在可以支持 Parent 嵌套 （但是注意性能问题，不要频繁嵌套）\r\n */\r\n@ccclass\r\n@executionOrder(-1)\r\n@help('https://gitee.com/dgflash/oops-framework/blob/master/doc/mvvm/VMParent.md')\r\nexport default class VMParent extends GameComponent {\r\n    /** 绑定的标签，可以通过这个tag 获取 当前的 vm 实例 */\r\n    protected tag: string = '_temp';\r\n\r\n    /** 需要绑定的私有数据 */\r\n    protected data: any = {};\r\n\r\n    /**VM 管理 */\r\n    public VM = VM;\r\n\r\n    /**\r\n     * [注意]不能直接覆盖此方法，如果需要覆盖。\r\n     * 只能在该方法内部调用父类的实现 \r\n     *   ```ts\r\n     *       onLoad(){\r\n     *           super.onLoad();\r\n     *       }\r\n     *   ``` \r\n     * \r\n     */\r\n    onLoad() {\r\n        if (this.data == null) return;\r\n        this.tag = '_temp' + '<' + this.node.uuid.replace('.', '') + '>';\r\n        VM.add(this.data, this.tag);\r\n        // log(VM['_mvs'],this.tag)\r\n        //搜寻所有节点：找到 watch path\r\n        let comps = this.getVMComponents();\r\n        // console.group();\r\n        for (let i = 0; i < comps.length; i++) {\r\n            const comp = comps[i];\r\n            this.replaceVMPath(comp, this.tag)\r\n        }\r\n        // console.groupEnd()\r\n\r\n        this.onBind();\r\n    }\r\n\r\n    /**在 onLoad 完成 和 start() 之前调用，你可以在这里进行初始化数据等操作 */\r\n    protected onBind() {\r\n\r\n    }\r\n\r\n    /**在 onDestroy() 后调用,此时仍然可以获取绑定的 data 数据*/\r\n    protected onUnBind() {\r\n\r\n    }\r\n\r\n    private replaceVMPath(comp: Component, tag: string) {\r\n        // @ts-ignore\r\n        let path: string = comp['watchPath'];\r\n        // @ts-ignore\r\n        if (comp['templateMode'] == true) {\r\n            // @ts-ignore\r\n            let pathArr: string[] = comp['watchPathArr'];\r\n            if (pathArr) {\r\n                for (let i = 0; i < pathArr.length; i++) {\r\n                    const path = pathArr[i];\r\n                    pathArr[i] = path.replace('*', tag);\r\n                }\r\n            }\r\n\r\n        }\r\n        else {\r\n            // VMLabel\r\n            // 遇到特殊 path 就优先替换路径\r\n            if (path.split('.')[0] === '*') {\r\n                // @ts-ignore\r\n                comp['watchPath'] = path.replace('*', tag);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 未优化的遍历节点，获取VM 组件 */\r\n    private getVMComponents() {\r\n        let comps = this.node.getComponentsInChildren('VMBase');\r\n        let parents = this.node.getComponentsInChildren('VMParent').filter(v => v.uuid !== this.uuid);  // 过滤掉自己\r\n\r\n        //过滤掉不能赋值的parent\r\n        let filters: any[] = [];\r\n        parents.forEach((node: Component) => {\r\n            filters = filters.concat(node.getComponentsInChildren('VMBase'));\r\n        })\r\n\r\n        comps = comps.filter((v) => filters.indexOf(v) < 0);\r\n        return comps;\r\n    }\r\n\r\n    /**\r\n     * [注意]不能覆盖此方法，如果需要覆盖。\r\n     * 需要在该方法内部调用父类的实现，再定义自己的方法\r\n     * ```ts\r\n     *   onDestroy(){\r\n     *       super.onDestroy();\r\n     *   }\r\n     * ```\r\n     */\r\n    protected onDestroy() {\r\n        this.onUnBind();\r\n\r\n        // 解除全部引用\r\n        VM.remove(this.tag);\r\n        this.data = null;\r\n\r\n        super.onDestroy();\r\n    }\r\n}\r\n"]}