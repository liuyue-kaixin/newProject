{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/ecs/ECSEntity.ts"],"names":["ECSEntity","broadcastCompAddOrRemove","entity","componentTypeId","events","compAddOrRemove","get","i","length","tid2comp","has","delete","createComp","ctor","cct","compCtors","tid","Error","compName","comps","compPools","component","pop","destroyEntity","eid2Entity","eid","entitys","entityPool","name","set","push","console","warn","ECSMask","ECSModel","mask","compTid2Ctor","Map","compTid2Obj","_parent","_children","parent","children","addChild","removeChild","size","add","isReAdd","compTid","remove","log","comp","ent","tmpCtor","constructor","canRecycle","addComponents","ctors","isRecycle","hasComp","reset","_remove","destroy","forEach","e","clear"],"mappings":"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","sourcesContent":["import { ecs } from \"./ECS\";\r\nimport { ECSMask } from \"./ECSMask\";\r\nimport { CompCtor, CompType, ECSModel } from \"./ECSModel\";\r\n\r\n//#region 辅助方法\r\n\r\n/**\r\n * 实体身上组件有增删操作，广播通知对应的观察者\r\n * @param entity 实体对象\r\n * @param componentTypeId 组件类型id\r\n */\r\nfunction broadcastCompAddOrRemove(entity: ECSEntity, componentTypeId: number) {\r\n    let events = ECSModel.compAddOrRemove.get(componentTypeId);\r\n    for (let i = events!.length - 1; i >= 0; i--) {\r\n        events![i](entity);\r\n    }\r\n    // 判断是不是删了单例组件\r\n    if (ECSModel.tid2comp.has(componentTypeId)) {\r\n        ECSModel.tid2comp.delete(componentTypeId);\r\n    }\r\n}\r\n\r\n/**\r\n * 创建组件对象\r\n * @param ctor\r\n */\r\nfunction createComp<T extends ecs.IComp>(ctor: CompCtor<T>): T {\r\n    var cct = ECSModel.compCtors[ctor.tid];\r\n    if (!cct) {\r\n        throw Error(`没有找到该组件的构造函数，检查${ctor.compName}是否为不可构造的组件`);\r\n    }\r\n    let comps = ECSModel.compPools.get(ctor.tid)!;\r\n    let component = comps.pop() || new (cct as CompCtor<T>);\r\n    return component as T;\r\n}\r\n\r\n/**\r\n * 销毁实体\r\n * \r\n * 缓存销毁的实体，下次新建实体时会优先从缓存中拿。\r\n * @param entity \r\n */\r\nfunction destroyEntity(entity: ECSEntity) {\r\n    if (ECSModel.eid2Entity.has(entity.eid)) {\r\n        var entitys = ECSModel.entityPool.get(entity.name);\r\n        if (entitys == null) {\r\n            entitys = [];\r\n            ECSModel.entityPool.set(entity.name, entitys);\r\n        }\r\n        entitys.push(entity);\r\n        ECSModel.eid2Entity.delete(entity.eid);\r\n    }\r\n    else {\r\n        console.warn('试图销毁不存在的实体');\r\n    }\r\n}\r\n\r\n//#endregion\r\n\r\n/** ECS实体对象 */\r\nexport class ECSEntity {\r\n    /** 实体唯一标识，不要手动修改 */\r\n    eid: number = -1;\r\n    /** 实体对象名 */\r\n    name: string = \"\";\r\n    /** 组件过滤数据 */\r\n    private mask = new ECSMask();\r\n    /** 当前实体身上附加的组件构造函数 */\r\n    private compTid2Ctor: Map<number, CompType<ecs.IComp>> = new Map();\r\n    /** 配合 entity.remove(Comp, false)， 记录组件实例上的缓存数据，在添加时恢复原数据 */\r\n    private compTid2Obj: Map<number, ecs.IComp> = new Map();\r\n\r\n    private _parent: ECSEntity | null = null;\r\n    /** 父实体 */\r\n    get parent(): ECSEntity | null {\r\n        return this._parent;\r\n    }\r\n\r\n    private _children: Map<number, ECSEntity> | null = null;\r\n    /** 子实体集合 */\r\n    get children(): Map<number, ECSEntity> {\r\n        if (this._children == null) {\r\n            this._children = new Map<number, ECSEntity>();\r\n        }\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * 添加子实体\r\n     * @param entity 被添加的实体对象\r\n     */\r\n    addChild(entity: ECSEntity) {\r\n        entity._parent = this;\r\n        this.children.set(entity.eid, entity);\r\n    }\r\n\r\n    /**\r\n     * 移除子实体\r\n     * @param entity 被移除的实体对象\r\n     * @returns \r\n     */\r\n    removeChild(entity: ECSEntity) {\r\n        if (this.children == null) return;\r\n\r\n        this.children.delete(entity.eid);\r\n\r\n        if (this.children.size == 0) {\r\n            this._children = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据组件类动态创建组件，并通知关心的系统。如果实体存在了这个组件，那么会先删除之前的组件然后添加新的\r\n     * \r\n     * 注意：不要直接new Component，new来的Component不会从Component的缓存池拿缓存的数据\r\n     * @param componentTypeId   组件类\r\n     * @param isReAdd           true-表示用户指定这个实体可能已经存在了该组件，那么再次add组件的时候会先移除该组件然后再添加一遍。false-表示不重复添加组件\r\n     */\r\n    add<T extends ecs.IComp>(obj: T): ECSEntity;\r\n    add(ctor: number, isReAdd?: boolean): ECSEntity;\r\n    add<T extends ecs.IComp>(ctor: CompCtor<T>, isReAdd?: boolean): T;\r\n    add<T extends ecs.IComp>(ctor: CompType<T>, isReAdd?: boolean): T;\r\n    add<T extends ecs.IComp>(ctor: CompType<T> | T, isReAdd: boolean = false): T | ECSEntity {\r\n        if (typeof ctor === 'function') {\r\n            let compTid = ctor.tid;\r\n            if (ctor.tid === -1) {\r\n                throw Error('组件未注册！');\r\n            }\r\n            if (this.compTid2Ctor.has(compTid)) {                               // 判断是否有该组件，如果有则先移除\r\n                if (isReAdd) {\r\n                    this.remove(ctor);\r\n                }\r\n                else {\r\n                    console.log(`已经存在组件：${ctor.compName}`);\r\n                    // @ts-ignore\r\n                    return this[ctor.compName] as T;\r\n                }\r\n            }\r\n            this.mask.set(compTid);\r\n\r\n            let comp: T;\r\n            if (this.compTid2Obj.has(compTid)) {\r\n                comp = this.compTid2Obj.get(compTid) as T;\r\n                this.compTid2Obj.delete(compTid);\r\n            }\r\n            else {\r\n                // 创建组件对象\r\n                comp = createComp(ctor) as T;\r\n            }\r\n\r\n            // 将组件对象直接附加到实体对象身上，方便直接获取\r\n            // @ts-ignore\r\n            this[ctor.compName] = comp;\r\n            this.compTid2Ctor.set(compTid, ctor);\r\n            comp.ent = this;\r\n            // 广播实体添加组件的消息\r\n            broadcastCompAddOrRemove(this, compTid);\r\n\r\n            return comp;\r\n        }\r\n        else {\r\n            let tmpCtor = (ctor.constructor as CompCtor<T>);\r\n            let compTid = tmpCtor.tid;\r\n            // console.assert(compTid !== -1 || !compTid, '组件未注册！');\r\n            // console.assert(this.compTid2Ctor.has(compTid), '已存在该组件！');\r\n            if (compTid === -1 || compTid == null) {\r\n                throw Error('组件未注册');\r\n            }\r\n            if (this.compTid2Ctor.has(compTid)) {\r\n                throw Error('已经存在该组件');\r\n            }\r\n\r\n            this.mask.set(compTid);\r\n            //@ts-ignore\r\n            this[tmpCtor.compName] = ctor;\r\n            this.compTid2Ctor.set(compTid, tmpCtor);\r\n            //@ts-ignore\r\n            ctor.ent = this;\r\n            //@ts-ignore\r\n            ctor.canRecycle = false;\r\n            broadcastCompAddOrRemove(this, compTid);\r\n\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 批量添加组件\r\n     * @param ctors 组件类\r\n     * @returns \r\n     */\r\n    addComponents<T extends ecs.IComp>(...ctors: CompType<T>[]) {\r\n        for (let ctor of ctors) {\r\n            this.add(ctor);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取一个组件实例\r\n     * @param ctor 组件类\r\n     */\r\n    get(ctor: number): number;\r\n    get<T extends ecs.IComp>(ctor: CompCtor<T>): T;\r\n    get<T extends ecs.IComp>(ctor: CompCtor<T> | number): T {\r\n        // @ts-ignore\r\n        return this[ctor.compName];\r\n    }\r\n\r\n    /**\r\n     * 组件是否在实体存在内\r\n     * @param ctor 组件类\r\n     */\r\n    has(ctor: CompType<ecs.IComp>): boolean {\r\n        if (typeof ctor == \"number\") {\r\n            return this.mask.has(ctor);\r\n        }\r\n        else {\r\n            return this.compTid2Ctor.has(ctor.tid);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从实体上删除指定组件\r\n     * @param ctor      组件构造函数或者组件Tag\r\n     * @param isRecycle 是否回收该组件对象。对于有些组件上有大量数据，当要描述移除组件但是不想清除组件上的数据是可以\r\n     * 设置该参数为false，这样该组件对象会缓存在实体身上，下次重新添加组件时会将该组件对象添加回来，不会重新从组件缓存\r\n     * 池中拿一个组件来用。\r\n     */\r\n    remove(ctor: CompType<ecs.IComp>, isRecycle: boolean = true) {\r\n        let hasComp = false;\r\n        //@ts-ignore\r\n        let componentTypeId = ctor.tid;\r\n        //@ts-ignore\r\n        let compName = ctor.compName;\r\n        if (this.mask.has(componentTypeId)) {\r\n            hasComp = true;\r\n            //@ts-ignore\r\n            let comp = this[ctor.compName];\r\n            //@ts-ignore\r\n            comp.ent = null;\r\n            if (isRecycle) {\r\n                comp.reset();\r\n                if (comp.canRecycle) {\r\n                    ECSModel.compPools.get(componentTypeId)!.push(comp);\r\n                }\r\n            }\r\n            else {\r\n                this.compTid2Obj.set(componentTypeId, comp);\r\n            }\r\n        }\r\n\r\n        if (hasComp) {\r\n            //@ts-ignore\r\n            this[compName] = null;\r\n            this.mask.delete(componentTypeId);\r\n            this.compTid2Ctor.delete(componentTypeId);\r\n            broadcastCompAddOrRemove(this, componentTypeId);\r\n        }\r\n    }\r\n\r\n    private _remove(comp: CompType<ecs.IComp>) {\r\n        this.remove(comp, false);\r\n    }\r\n\r\n    /** 销毁实体，实体会被回收到实体缓存池中 */\r\n    destroy() {\r\n        if (this._children) {\r\n            this._children.forEach(e => {\r\n                this.removeChild(e);\r\n                e.destroy();\r\n            });\r\n        }\r\n\r\n        this.compTid2Ctor.forEach(this._remove, this);\r\n        destroyEntity(this);\r\n        this.compTid2Obj.clear();\r\n    }\r\n}"]}