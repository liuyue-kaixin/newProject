{"version":3,"sources":["file:///Volumes/SSD%201/ccProject/extensions/oops-plugin-framework/assets/libs/ecs/ECS.ts"],"names":["ECSComp","ECSEntity","ECSMatcher","ECSModel","ECSComblockSystem","ECSRootSystem","ECSSystem","Entity","Comp","System","RootSystem","ComblockSystem","register","name","canNew","ctor","s","system","systems","get","ecs","set","add","tid","undefined","entityCtors","compTid","compName","compCtors","push","compPools","compAddOrRemove","Error","getEntity","entityName","console","error","entitys","entityPool","entity","pop","eid","init","eid2Entity","query","matcher","group","groups","mid","createGroup","forEach","onComponentAddOrRemove","matchEntities","clear","destroy","callbackLst","length","getEntityByEid","activeEntityCount","size","createEntity","createEntityWithComp","allOf","anyOf","onlyOf","excludeOf","getSingleton","tid2comp","has","comp","addSingleton","obj","constructor"],"mappings":"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","sourcesContent":["import { ECSComp } from \"./ECSComp\";\r\nimport { ECSEntity } from \"./ECSEntity\";\r\nimport { ECSMatcher } from \"./ECSMatcher\";\r\nimport { CompCtor, CompType, ECSModel, EntityCtor } from \"./ECSModel\";\r\nimport { ECSComblockSystem, ECSRootSystem, ECSSystem } from \"./ECSSystem\";\r\n\r\n/** Entity-Component-System（实体-组件-系统）框架 */\r\nexport module ecs {\r\n    /** 实体 - 一个概念上的定义，指的是游戏世界中的一个独特物体，是一系列组件的集合 */\r\n    export type Entity = ECSEntity;\r\n    /** 组件 - 一堆数据的集合，即不存在任何的行为，只用来存储状态 */\r\n    export type Comp = ECSComp;\r\n    /** 系统 - 关注实体上组件数据变化，处理游戏逻辑 */\r\n    export type System = ECSSystem;\r\n    /** 根系统 - 驱动游戏中所有系统工作 */\r\n    export type RootSystem = ECSRootSystem;\r\n    /** 处理游戏逻辑系统对象 - 继承此对象实现自定义业务逻辑 */\r\n    export type ComblockSystem = ECSComblockSystem;\r\n\r\n    /** 实体 - 一个概念上的定义，指的是游戏世界中的一个独特物体，是一系列组件的集合 */\r\n    export const Entity = ECSEntity;\r\n    /** 组件 - 一堆数据的集合，即不存在任何的行为，只用来存储状态 */\r\n    export const Comp = ECSComp;\r\n    /** 系统 - 关注实体上组件数据变化，处理游戏逻辑 */\r\n    export const System = ECSSystem;\r\n    /** 根系统 - 驱动游戏中所有系统工作 */\r\n    export const RootSystem = ECSRootSystem;\r\n    /** 处理游戏逻辑系统对象 - 继承此对象实现自定义业务逻辑 */\r\n    export const ComblockSystem = ECSComblockSystem;\r\n\r\n    //#region 接口\r\n\r\n    /** 组件接口 */\r\n    export interface IComp {\r\n        canRecycle: boolean;\r\n        ent: Entity;\r\n\r\n        reset(): void;\r\n    }\r\n\r\n    /** 实体匹配器接口 */\r\n    export interface IMatcher {\r\n        mid: number;\r\n        indices: number[];\r\n        key: string;\r\n        isMatch(entity: Entity): boolean;\r\n    }\r\n\r\n    /**\r\n     * 监听组件首次添加到实体上时，在ComblockSystem上实现这个接口\r\n     * 1. entityEnter会在update方法之前执行，实体进入后，不会再次进入entityEnter方法中\r\n     * 2. 当实体从当前System移除，下次再次符合条件进入System也会执行上述流程\r\n     * @example\r\n    export class RoleUpgradeSystem extends ecs.ComblockSystem implements ecs.IEntityEnterSystem {\r\n        filter(): ecs.IMatcher {\r\n            return ecs.allOf(RoleUpgradeComp, RoleModelLevelComp);\r\n        }\r\n\r\n        entityEnter(e: Role): void {\r\n            e.remove(RoleUpgradeComp);\r\n        }\r\n    }\r\n     */\r\n    export interface IEntityEnterSystem<E extends Entity = Entity> {\r\n        entityEnter(entity: E): void;\r\n    }\r\n\r\n    /** 监听组件从实体上移除时，在ComblockSystem上实现这个接口 */\r\n    export interface IEntityRemoveSystem<E extends Entity = Entity> {\r\n        entityRemove(entity: E): void;\r\n    }\r\n\r\n    /** 监听系统第一次执行update处理实体时，在ComblockSystem上实现这个接口 */\r\n    export interface ISystemFirstUpdate<E extends Entity = Entity> {\r\n        firstUpdate(entity: E): void;\r\n    }\r\n\r\n    /** 监听系统执行update处理实体时，在ComblockSystem上实现这个接口 */\r\n    export interface ISystemUpdate<E extends Entity = Entity> {\r\n        update(entity: E): void;\r\n    }\r\n    //#endregion\r\n\r\n    /**\r\n     * 注册组件到ecs系统中\r\n     * @param name   由于js打包会改变类名，所以这里必须手动传入组件的名称\r\n     * @param canNew 标识是否可以new对象。想继承自Cocos Creator的组件就不能去new，需要写成@ecs.register('name', false)\r\n     * @example\r\n    // 注册实体\r\n    @ecs.register('Role')\r\n    export class Role extends ecs.Entity {\r\n\r\n    }\r\n\r\n    // 注册数据组件\r\n    @ecs.register('RoleModel')\r\n    export class RoleModelComp extends ecs.Comp {\r\n        id: number = -1;\r\n\r\n        reset() {\r\n            this.id =  -1;\r\n        }\r\n    }\r\n\r\n    // 注册系统组件\r\n    @ecs.register('Initialize')\r\n    export class InitResSystem extends ecs.ComblockSystem implements ecs.IEntityEnterSystem {\r\n\r\n    }\r\n\r\n    // 注册显示对象组件\r\n    @ccclass('RoleViewComp')\r\n    @ecs.register('RoleView', false)\r\n    export class RoleViewComp extends CCComp {\r\n        onLoad(){\r\n            \r\n        }\r\n    }\r\n    */\r\n    export function register<T>(name: string, canNew: boolean = true) {\r\n        return function (ctor: any) {\r\n            // 注册系统\r\n            if (ctor.s) {\r\n                var system = ECSModel.systems.get(name);\r\n                if (system == null) {\r\n                    system = new ecs.System();\r\n                    ECSModel.systems.set(name, system);\r\n                }\r\n                system.add(new ctor);\r\n            }\r\n            // 注册实体\r\n            else if (ctor.tid == undefined) {\r\n                ECSModel.entityCtors.set(ctor as EntityCtor<T>, name);\r\n            }\r\n            // 注册组件\r\n            else {\r\n                if (ctor.tid === -1) {\r\n                    ctor.tid = ECSModel.compTid++;\r\n                    ctor.compName = name;\r\n                    if (canNew) {\r\n                        ECSModel.compCtors.push(ctor);\r\n                        ECSModel.compPools.set(ctor.tid, []);\r\n                    }\r\n                    else {\r\n                        ECSModel.compCtors.push(null!);\r\n                    }\r\n                    ECSModel.compAddOrRemove.set(ctor.tid, []);\r\n                }\r\n                else {\r\n                    throw new Error(`重复注册组件： ${name}.`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建一个新的实体对象或从缓存中获取一个实体对象\r\n     * @param ctor 实体类\r\n     */\r\n    export function getEntity<T extends Entity>(ctor: EntityCtor<T>): T {\r\n        // 获取实体对象名\r\n        var entityName = ECSModel.entityCtors.get(ctor);\r\n        if (entityName == undefined)\r\n            console.error(`${ctor.name} 实体没有注册`);\r\n\r\n        // 获取实体对象池\r\n        var entitys = ECSModel.entityPool.get(entityName!) || [];\r\n        var entity: any = entitys.pop();\r\n\r\n        // 缓存中没有同类实体，则创建一个新的\r\n        if (!entity) {\r\n            entity = new ctor();\r\n            entity.eid = ECSModel.eid++;        // 实体唯一编号\r\n            entity.name = entityName;\r\n        }\r\n\r\n        // 触发实体初始化逻辑\r\n        if (entity.init)\r\n            entity.init();\r\n        else\r\n            console.error(`${ctor.name} 实体缺少 init 方法初始化默认组件`);\r\n\r\n        ECSModel.eid2Entity.set(entity.eid, entity);\r\n        return entity as T;\r\n    }\r\n\r\n    /**\r\n     * 动态查询实体\r\n     * @param matcher 匹配器\r\n     * @example\r\n     * ecs.query(ecs.allOf(Comp1, Comp2));\r\n     */\r\n    export function query<E extends Entity = Entity>(matcher: IMatcher): E[] {\r\n        let group = ECSModel.groups.get(matcher.mid);\r\n        if (!group) {\r\n            group = ECSModel.createGroup(matcher);\r\n            ECSModel.eid2Entity.forEach(group.onComponentAddOrRemove, group);\r\n        }\r\n        return group.matchEntities as E[];\r\n    }\r\n\r\n    /** 清理所有的实体 */\r\n    export function clear() {\r\n        ECSModel.eid2Entity.forEach((entity) => {\r\n            entity.destroy();\r\n        });\r\n        ECSModel.groups.forEach((group) => {\r\n            group.clear();\r\n        });\r\n        ECSModel.compAddOrRemove.forEach(callbackLst => {\r\n            callbackLst.length = 0;\r\n        });\r\n        ECSModel.eid2Entity.clear();\r\n        ECSModel.groups.clear();\r\n    }\r\n\r\n    /**\r\n     * 通过实体唯一编号获得实体对象\r\n     * @param eid 实体唯一编号\r\n     */\r\n    export function getEntityByEid<E extends Entity = Entity>(eid: number): E {\r\n        return ECSModel.eid2Entity.get(eid) as E;\r\n    }\r\n\r\n    /** 当前活动中的实体数量 */\r\n    export function activeEntityCount() {\r\n        return ECSModel.eid2Entity.size;\r\n    }\r\n\r\n    /** 创建实体 */\r\n    function createEntity<E extends Entity = Entity>(): E {\r\n        let entity = new Entity();\r\n        entity.eid = ECSModel.eid++;                     // 实体id也是有限的资源\r\n        ECSModel.eid2Entity.set(entity.eid, entity);\r\n        return entity as E;\r\n    }\r\n\r\n    /**\r\n     * 指定一个组件创建实体，返回组件对象。\r\n     * @param ctor \r\n     */\r\n    function createEntityWithComp<T extends IComp>(ctor: CompCtor<T>): T {\r\n        let entity = createEntity();\r\n        return entity.add(ctor);\r\n    }\r\n\r\n    //#region 过滤器\r\n    /**\r\n     * 表示只关心这些组件的添加和删除动作。虽然实体可能有这些组件之外的组件，但是它们的添加和删除没有被关注，所以不会存在对关注之外的组件\r\n     * 进行添加操作引发Group重复添加实体。\r\n     * @param args \r\n     * @example\r\n     * ecs.allOf(AComponent, BComponent, CComponent);\r\n     */\r\n    export function allOf(...args: CompType<IComp>[]) {\r\n        return new ECSMatcher().allOf(...args);\r\n    }\r\n\r\n    /**\r\n     * 组件间是或的关系，表示关注拥有任意一个这些组件的实体\r\n     * @param args  组件类\r\n     * @example\r\n     * ecs.anyOf(AComponent, BComponent);\r\n     */\r\n    export function anyOf(...args: CompType<IComp>[]) {\r\n        return new ECSMatcher().anyOf(...args);\r\n    }\r\n\r\n    /**\r\n     * 表示关注只拥有这些组件的实体\r\n     * 注：不是特殊情况不建议使用onlyOf。因为onlyOf会监听所有组件的添加和删除事件\r\n     * @param args  组件类\r\n     * @example\r\n     // 不包含CComponent或者DComponent\r\n     ecs.allOf(AComponent, BComponent).excludeOf(CComponent, DComponent);\r\n\r\n     // 不同时包含CComponent和DComponent\r\n     ecs.allOf(AComponent, BComponent).excludeOf(CComponent).excludeOf(DComponent);\r\n     */\r\n    export function onlyOf(...args: CompType<IComp>[]) {\r\n        return new ECSMatcher().onlyOf(...args);\r\n    }\r\n\r\n    /**\r\n     * 不包含指定的任意一个组件\r\n     * @param args  组件类\r\n     * @example\r\n     // 表示不包含组件A或者组件B\r\n     ecs.excludeOf(A, B); \r\n     */\r\n    export function excludeOf(...args: CompType<IComp>[]) {\r\n        return new ECSMatcher().excludeOf(...args);\r\n    }\r\n    //#endregion\r\n\r\n    //#region 单例组件\r\n    /**\r\n     * 获取单例组件\r\n     * @param ctor 组件类\r\n     */\r\n    export function getSingleton<T extends IComp>(ctor: CompCtor<T>) {\r\n        if (!ECSModel.tid2comp.has(ctor.tid)) {\r\n            let comp = createEntityWithComp(ctor) as T;\r\n            ECSModel.tid2comp.set(ctor.tid, comp);\r\n        }\r\n        return ECSModel.tid2comp.get(ctor.tid) as T;\r\n    }\r\n\r\n    /**\r\n     * 注册单例组件 - 主要用于那些不能手动创建对象的组件\r\n     * @param obj \r\n     */\r\n    export function addSingleton(obj: IComp) {\r\n        let tid = (obj.constructor as CompCtor<IComp>).tid;\r\n        if (!ECSModel.tid2comp.has(tid)) {\r\n            ECSModel.tid2comp.set(tid, obj);\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n}"]}