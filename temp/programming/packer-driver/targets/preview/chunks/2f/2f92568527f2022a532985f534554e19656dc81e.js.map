{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/model-view/ui/BhvRollNumber.ts"],"names":["parseTimer","timer","isFullTimer","t","Math","floor","hours","mins","secs","m","s","Component","Enum","Label","lerp","_decorator","ccclass","property","menu","VALUE_TYPE","BhvRollNumber","type","tooltip","step","max","min","_custom_callback","isScrolling","targetValue","_targetValue","v","scroll","onLoad","label","undefined","node","getComponent","playAtStart","updateLabel","runWaitTimer","scheduleOnce","stop","value","init","target","scrollTo","string","valueType","INTEGER","round","FIXED_2","toFixed","TIMER","PERCENTAGE","KMBT_FIXED2","Number","MAX_VALUE","toString","CUSTOMER","showPlusSymbol","update","dt","abs"],"mappings":"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","sourcesContent":["import { Component, Enum, Label, lerp, _decorator } from \"cc\";\r\n\r\nconst { ccclass, property, menu } = _decorator;\r\n\r\nenum VALUE_TYPE {\r\n    /** 整数模式,只会以整数处理 */\r\n    INTEGER,\r\n    /** 两位小数模式,最终结果保留两位小数 0.00 */\r\n    FIXED_2,\r\n    /** 计时器模式,以计时器格式变动 00:00 */\r\n    TIMER,\r\n    /** 百分比模式 (百分比结果 基于小数,因此初始值必须为小数)*/\r\n    PERCENTAGE,\r\n    /** 缩写单位模式KMBT */\r\n    KMBT_FIXED2,\r\n    /** 自定义模式 (通过传入的函数,进行自定义) */\r\n    CUSTOMER\r\n}\r\n\r\ntype CustomCallback = (curValue: number, targetValue: number) => string;\r\n\r\n/**\r\n * [滚动数字] ver 0.5.0\r\n * 将会使用 lerp 自动滚动数字到目标数值\r\n */\r\n@ccclass\r\n@menu(\"添加特殊行为/UI/Roll Number (滚动数字)\")\r\nexport class BhvRollNumber extends Component {\r\n    @property({\r\n        type: Label,\r\n        tooltip: '需要滚动的 Label 组件,如果不进行设置，就会从自己的节点自动查找'\r\n    })\r\n    label: Label | null = null;\r\n\r\n    @property({\r\n        tooltip: '当前的滚动值(开始的滚动值)'\r\n    })\r\n    value: number = 0;\r\n\r\n    @property({\r\n        tooltip: '是否显示正负符号'\r\n    })\r\n    showPlusSymbol: boolean = false;\r\n\r\n    @property({\r\n        tooltip: '滚动的目标值'\r\n    })\r\n    public get targetValue(): number {\r\n        return this._targetValue;\r\n    }\r\n    public set targetValue(v: number) {\r\n        this._targetValue = v;\r\n        this.scroll();//数据变动了就开始滚动\r\n    }\r\n    @property\r\n    private _targetValue: number = 100;\r\n\r\n    /** 滚动的线性差值 0 ~ 1 */\r\n    @property({\r\n        tooltip: '滚动的线性差值',\r\n        step: 0.01,\r\n        max: 1,\r\n        min: 0\r\n    })\r\n    lerp = 0.1;\r\n\r\n    @property({\r\n        tooltip: '是否在开始时就播放'\r\n    })\r\n    private playAtStart: boolean = true;\r\n\r\n    @property({\r\n        tooltip: '在滚动之前会等待几秒',\r\n        step: 0.1,\r\n        max: 1,\r\n        min: 0\r\n    })\r\n    private runWaitTimer: number = 0;\r\n\r\n    @property({\r\n        type: Enum(VALUE_TYPE),\r\n        tooltip: '是否在开始时就播放'\r\n    })\r\n    private valueType: VALUE_TYPE = VALUE_TYPE.INTEGER;\r\n\r\n    /** 自定义string 处理函数 */\r\n    private _custom_callback: CustomCallback | null = null;\r\n\r\n    private isScrolling: boolean = false;\r\n\r\n    onLoad() {\r\n        if (this.label == undefined) {\r\n            this.label = this.node.getComponent(Label);\r\n        }\r\n\r\n        if (this.playAtStart) {\r\n            this.updateLabel();\r\n            this.scroll();\r\n        }\r\n    }\r\n\r\n    /** 开始滚动数字 */\r\n    scroll() {\r\n        if (this.isScrolling) return;       //  已经在滚动了就返回\r\n        if (this.runWaitTimer > 0) {\r\n            this.scheduleOnce(() => {\r\n                this.isScrolling = true;\r\n            }, this.runWaitTimer);\r\n        }\r\n        else {\r\n            this.isScrolling = true;\r\n        }\r\n    }\r\n\r\n    /** 停止滚动数字 */\r\n    stop() {\r\n        this.value = this.targetValue;\r\n        this.isScrolling = false;\r\n        this.updateLabel();\r\n    }\r\n\r\n    /** 初始化数值,不填写则全部按默认值处理 */\r\n    init(value?: number, target?: number, lerp?: number) {\r\n        this.targetValue = target || 0;\r\n        this.value = value || 0;\r\n        this.lerp = lerp || 0.1;\r\n    }\r\n\r\n    /** 滚动到指定数字 */\r\n    scrollTo(target?: number) {\r\n        if (target === null || target === undefined) return;\r\n        this.targetValue = target;\r\n    }\r\n\r\n    /** 更新文本 */\r\n    updateLabel() {\r\n        let value = this.value;\r\n        let string = '';\r\n\r\n        switch (this.valueType) {\r\n            case VALUE_TYPE.INTEGER:                        // 最终显示整数类型\r\n                string = Math.round(value) + '';\r\n                break;\r\n            case VALUE_TYPE.FIXED_2:                        // 最终显示两位小数类型\r\n                string = value.toFixed(2);\r\n                break;\r\n            case VALUE_TYPE.TIMER:                          // 最终显示 计时器类型\r\n                string = parseTimer(value);\r\n                break;\r\n            case VALUE_TYPE.PERCENTAGE:                     // 最终显示 百分比\r\n                string = Math.round(value * 100) + '%';\r\n                break;\r\n            case VALUE_TYPE.KMBT_FIXED2:                    // 长单位缩放,只计算到 KMBT\r\n                if (value >= Number.MAX_VALUE) {\r\n                    string = 'MAX';\r\n                }\r\n                else if (value > 1000000000000) {\r\n                    string = (value / 1000000000000).toFixed(2) + 'T';\r\n                }\r\n                else if (value > 1000000000) {\r\n                    string = (value / 1000000000).toFixed(2) + 'B';\r\n                }\r\n                else if (value > 1000000) {\r\n                    string = (value / 1000000).toFixed(2) + 'M';\r\n                }\r\n                else if (value > 1000) {\r\n                    string = (value / 1000).toFixed(2) + \"K\";\r\n                }\r\n                else {\r\n                    string = Math.round(value).toString();\r\n                }\r\n                break;\r\n            case VALUE_TYPE.CUSTOMER: // 自定义设置模式 (通过给定的自定义函数..处理)\r\n                if (this._custom_callback) {\r\n                    string = this._custom_callback(this.value, this.targetValue);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // 显示正负符号\r\n\r\n        if (this.showPlusSymbol) {\r\n            if (value > 0) {\r\n                string = '+' + string;\r\n            }\r\n            else if (value < 0) {\r\n                string = '-' + string;\r\n            }\r\n        }\r\n\r\n        if (this.label) {\r\n            if (string === this.label.string) return;   // 保证效率,如果上次赋值过,就不重复赋值\r\n            this.label.string = string;\r\n        }\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (this.isScrolling == false) return;\r\n        this.value = lerp(this.value, this.targetValue, this.lerp);\r\n        this.updateLabel();\r\n        if (Math.abs(this.value - this.targetValue) <= 0.0001) {\r\n            this.value = this.targetValue;\r\n            this.isScrolling = false;\r\n            //this.node.emit('roll-hit-target');        // 滚动数字击中了目标\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n/** 时间格式转换 */\r\nfunction parseTimer(timer: number = 0, isFullTimer: boolean = true) {\r\n    let t: number = Math.floor(timer);\r\n    let hours: number = Math.floor(t / 3600);\r\n    let mins: number = Math.floor((t % 3600) / 60);\r\n    let secs: number = t % 60;\r\n    let m = '' + mins;\r\n    let s = '' + secs;\r\n    if (secs < 10) s = '0' + secs;\r\n\r\n    // full timer 按小时算,无论有没有小时\r\n    if (isFullTimer) {\r\n        if (mins < 10) m = '0' + mins;\r\n        return hours + ':' + m + ':' + s;\r\n    }\r\n    else {\r\n        m = '' + (mins + hours * 60);\r\n        if (mins < 10) m = '0' + mins;\r\n        return m + ':' + s;\r\n    }\r\n}"]}