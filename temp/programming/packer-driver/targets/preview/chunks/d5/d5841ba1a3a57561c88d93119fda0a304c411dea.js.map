{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/ccProject/assets/script/battle/demos/collisions/demo3d.ts"],"names":["_decorator","CCInteger","clamp","Component","instantiate","MeshRenderer","Prefab","primitives","Quat","utils","Vec3","cCollider","cObject","ShapeType","Config","ccclass","property","tempPos","tempRot","boxMesh","createMesh","box","sphereMesh","sphere","segments","demo3d","objects","boxNum","sphereNum","resetRotation","length","i","obj","setRotation","IDENTITY","randomRotation","fromEuler","Math","random","onDestroy","inst","reset","addObjects","num","prefab","mesh","node","addChild","render","getComponent","x","world","y","z","position","object","speed","normalize","multiplyScalar","velocity","set","isRotate","push","worldManager","dt","maxSpeed","round","maxNum","max","abs","setPosition","type","Box","remove","destroy","splice","Sphere","update"],"mappings":"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","sourcesContent":["import { _decorator, CCInteger, clamp, Component, instantiate, Mesh, MeshRenderer, Prefab, primitives, Quat, utils, Vec3 } from 'cc';\nimport { cCollider } from '../../collision/Collider';\nimport { cObject } from '../../collision/Object';\nimport { ShapeType } from '../../collision/Shape';\nimport { Config } from './Config';\nconst { ccclass, property } = _decorator;\n\n\nconst tempPos = new Vec3();\nconst tempRot = new Quat();\n\nconst boxMesh =  utils.createMesh(primitives.box());\nconst sphereMesh =  utils.createMesh(primitives.sphere(0.5, { segments: 12 }));\n@ccclass('demo3d')\nexport class demo3d extends Component {\n\n    @property(Prefab)\n    box:Prefab = null;\n\n    @property(Prefab)\n    sphere:Prefab = null;\n\n    @property(CCInteger)\n    capacity:number = 1024;\n\n    @property(CCInteger)\n    speed:number = 20;\n\n    @property(Vec3)\n    world:Vec3 = new Vec3(10,10,10)\n\n\n    objects:Array<cObject> =  [];\n\n    boxNum: number = 0;\n    sphereNum: number = 0;\n\n\n    resetRotation(): void {\n        let objects = this.objects;\n        let length = objects.length;\n        for (let i = 0; i < length; i++) {\n\n            let obj = objects[i];\n            obj.setRotation(Quat.IDENTITY);\n        }\n    }\n\n    randomRotation(): void {\n        let objects = this.objects;\n        let length = objects.length;\n        for (let i = 0; i < length; i++) {\n            let obj = objects[i];\n            Quat.fromEuler(tempRot,Math.random()*360,Math.random()*360,Math.random()*360);\n            obj.setRotation(tempRot);//更新节点旋转\n        }\n    }\n\n    onDestroy(){\n        \n        this.boxNum = 0;\n        this.sphereNum = 0;\n        this.objects.length = 0;\n\n        cCollider.inst.reset(); //重置复用\n    }\n\n\n    addObjects(num: number, prefab: Prefab,mesh:Mesh = null) {\n\n        for (let i = 0; i < num; i++) {\n\n            let node = instantiate(prefab);\n            this.node.addChild(node);\n            if( mesh != null){\n               let render =  node.getComponent(MeshRenderer);\n               render.mesh = mesh;\n            }\n            \n            tempPos.x = (Math.random()-0.5)*this.world.x;\n            tempPos.y = (Math.random()-0.5)*this.world.y;\n            tempPos.z = (Math.random()-0.5)*this.world.z;\n            node.position = tempPos; //更新位置\n     \n\n            let object = node.getComponent(cObject);\n            let speed = this.speed*(Math.random()*0.9+0.1);\n            tempPos.normalize().multiplyScalar(speed);\n            object.velocity.set(tempPos);\n\n            if(Config.isRotate){\n                //开启旋转检测\n                Quat.fromEuler(tempRot,Math.random()*360,Math.random()*360,Math.random()*360);\n                object.setRotation(tempRot);\n            }\n\n            this.objects.push(object);\n        }\n    }\n    \n\n    worldManager(dt:number){\n        //控制全局速度      \n        dt *= Config.maxSpeed;\n\n        //动态增加 box \n        let boxNum = Math.round(Config.box * Config.maxNum);\n        if (boxNum > this.boxNum) {\n            let max =  clamp(boxNum - this.boxNum,0,20); //分帧\n            this.addObjects(max, this.box,boxMesh);\n            this.boxNum+=max;\n        }\n        \n        //动态增加 sphere\n        let sphereNum = Math.round(Config.sphere * Config.maxNum);\n        if (sphereNum > this.sphereNum) {\n            let max =  clamp(sphereNum - this.sphereNum,0,20);//分帧\n            this.addObjects(max, this.sphere,sphereMesh);\n            this.sphereNum+=max;\n        }\n\n        \n\n        let objects = this.objects;\n        for (let i = 0; i < objects.length; i++) {\n\n            let obj = objects[i];\n            let velocity = obj.velocity;\n            tempPos.set(obj.node.position); \n            \n            if (Math.abs(tempPos.x + velocity.x * dt) > this.world.x / 2) {\n                velocity.x = -velocity.x;\n            }\n\n            if (Math.abs(tempPos.y + velocity.y * dt) > this.world.y / 2) {\n                velocity.y = -velocity.y;\n            }\n\n            if (Math.abs(tempPos.z + velocity.z * dt) > this.world.z / 2) {\n                velocity.z = -velocity.z;\n            }\n\n            tempPos.x += velocity.x * dt;\n            tempPos.y += velocity.y * dt;\n            tempPos.z += velocity.z * dt;\n\n            //更新节点位置\n            obj.setPosition(tempPos);\n\n\n\n            //动态删除box\n            if (boxNum < this.boxNum) {\n                if(obj.type == ShapeType.Box){\n                \n                    //回收body删除node\n                obj.remove().destroy(); \n                objects.splice(i--,1);\n                this.boxNum--;\n                } \n            }\n\n                //动态删除Sphere\n            if (sphereNum < this.sphereNum) {\n                if(obj.type == ShapeType.Sphere){\n\n                    //回收body删除node\n                    obj.remove().destroy(); \n                    objects.splice(i--,1);\n                    this.sphereNum--;\n                } \n            }\n        }\n    }\n\n    update(dt: number) {\n        this.worldManager(dt);\n        cCollider.inst.update(dt);\n    }\n}\n\n"]}