{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/node_modules/crypto-es/lib/core.js"],"names":["Base","WordArray","BufferedBlockAlgorithm","Hasher","HMAC","create","args","mixIn","properties","Object","assign","clone","constructor","words","sigBytes","length","typedArray","ArrayBuffer","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","typedArrayByteLength","_words","i","random","nBytes","r","m_w","_m_w","_m_z","mask","result","Math","rcache","_r","push","toString","encoder","Hex","stringify","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","ceil","call","slice","hexChars","bite","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","e","Error","utf8Str","unescape","encodeURIComponent","_minBufferSize","reset","_data","_nDataBytes","_append","data","m_data","_process","doFlush","processedWords","blockSize","dataWords","dataSigBytes","blockSizeBytes","nBlocksReady","max","nWordsReady","nBytesReady","min","offset","_doProcessBlock","splice","cfg","_createHelper","SubHasher","message","finalize","_createHmacHelper","key","_doReset","update","messageUpdate","hash","_doFinalize","hasher","_hasher","_key","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac"],"mappings":";;;MAKaA,I,EAsDAC,S,EAqWAC,sB,EA4HAC,M,EAqHAC,I;;;;;;;;;;;;;AAjpBb;;AAEA;AACA;AACA;sBACaJ,I,GAAN,MAAMA,IAAN,CAAW;AAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,eAANK,MAAM,GAAU;AAAA,4CAANC,IAAM;AAANA,YAAAA,IAAM;AAAA;;AACrB,iBAAO,IAAI,IAAJ,CAAS,GAAGA,IAAZ,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,QAAAA,KAAK,CAACC,UAAD,EAAa;AAChB,iBAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,UAApB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEG,QAAAA,KAAK,GAAG;AACN,cAAMA,KAAK,GAAG,IAAI,KAAKC,WAAT,EAAd;AACAH,UAAAA,MAAM,CAACC,MAAP,CAAcC,KAAd,EAAqB,IAArB;AACA,iBAAOA,KAAP;AACD;;AA7Ce,O;AAgDlB;AACA;AACA;AACA;AACA;AACA;;;2BACaV,S,GAAN,MAAMA,SAAN,SAAwBD,IAAxB,CAA6B;AAClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEY,QAAAA,WAAW,CAACC,KAAD,EAAaC,QAAb,EAA0C;AAAA,cAAzCD,KAAyC;AAAzCA,YAAAA,KAAyC,GAAjC,EAAiC;AAAA;;AAAA,cAA7BC,QAA6B;AAA7BA,YAAAA,QAA6B,GAAlBD,KAAK,CAACE,MAAN,GAAe,CAAG;AAAA;;AACnD;AAEA,cAAIC,UAAU,GAAGH,KAAjB,CAHmD,CAInD;;AACA,cAAIG,UAAU,YAAYC,WAA1B,EAAuC;AACrCD,YAAAA,UAAU,GAAG,IAAIE,UAAJ,CAAeF,UAAf,CAAb;AACD,WAPkD,CASnD;;;AACA,cACEA,UAAU,YAAYG,SAAtB,IACGH,UAAU,YAAYI,iBADzB,IAEGJ,UAAU,YAAYK,UAFzB,IAGGL,UAAU,YAAYM,WAHzB,IAIGN,UAAU,YAAYO,UAJzB,IAKGP,UAAU,YAAYQ,WALzB,IAMGR,UAAU,YAAYS,YANzB,IAOGT,UAAU,YAAYU,YAR3B,EASE;AACAV,YAAAA,UAAU,GAAG,IAAIE,UAAJ,CAAeF,UAAU,CAACW,MAA1B,EAAkCX,UAAU,CAACY,UAA7C,EAAyDZ,UAAU,CAACa,UAApE,CAAb;AACD,WArBkD,CAuBnD;;;AACA,cAAIb,UAAU,YAAYE,UAA1B,EAAsC;AACpC;AACA,gBAAMY,oBAAoB,GAAGd,UAAU,CAACa,UAAxC,CAFoC,CAIpC;;AACA,gBAAME,MAAM,GAAG,EAAf;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,oBAApB,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;AAChDD,cAAAA,MAAM,CAACC,CAAC,KAAK,CAAP,CAAN,IAAmBhB,UAAU,CAACgB,CAAD,CAAV,IAAkB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAApD;AACD,aARmC,CAUpC;;;AACA,iBAAKnB,KAAL,GAAakB,MAAb;AACA,iBAAKjB,QAAL,GAAgBgB,oBAAhB;AACD,WAbD,MAaO;AACL;AACA,iBAAKjB,KAAL,GAAaA,KAAb;AACA,iBAAKC,QAAL,GAAgBA,QAAhB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,eAANmB,MAAM,CAACC,MAAD,EAAS;AACpB,cAAMrB,KAAK,GAAG,EAAd;;AAEA,cAAMsB,CAAC,GAAIC,GAAD,IAAS;AACjB,gBAAIC,IAAI,GAAGD,GAAX;AACA,gBAAIE,IAAI,GAAG,UAAX;AACA,gBAAMC,IAAI,GAAG,UAAb;AAEA,mBAAO,MAAM;AACXD,cAAAA,IAAI,GAAI,UAAUA,IAAI,GAAG,MAAjB,KAA4BA,IAAI,IAAI,IAApC,CAAD,GAA8CC,IAArD;AACAF,cAAAA,IAAI,GAAI,UAAUA,IAAI,GAAG,MAAjB,KAA4BA,IAAI,IAAI,IAApC,CAAD,GAA8CE,IAArD;AACA,kBAAIC,MAAM,GAAI,CAACF,IAAI,IAAI,IAAT,IAAiBD,IAAlB,GAA0BE,IAAvC;AACAC,cAAAA,MAAM,IAAI,WAAV;AACAA,cAAAA,MAAM,IAAI,GAAV;AACA,qBAAOA,MAAM,IAAIC,IAAI,CAACR,MAAL,KAAgB,GAAhB,GAAsB,CAAtB,GAA0B,CAAC,CAA/B,CAAb;AACD,aAPD;AAQD,WAbD;;AAeA,eAAK,IAAID,CAAC,GAAG,CAAR,EAAWU,MAAhB,EAAwBV,CAAC,GAAGE,MAA5B,EAAoCF,CAAC,IAAI,CAAzC,EAA4C;AAC1C,gBAAMW,EAAE,GAAGR,CAAC,CAAC,CAACO,MAAM,IAAID,IAAI,CAACR,MAAL,EAAX,IAA4B,WAA7B,CAAZ;;AAEAS,YAAAA,MAAM,GAAGC,EAAE,KAAK,UAAhB;AACA9B,YAAAA,KAAK,CAAC+B,IAAN,CAAYD,EAAE,KAAK,WAAR,GAAuB,CAAlC;AACD;;AAED,iBAAO,IAAI1C,SAAJ,CAAcY,KAAd,EAAqBqB,MAArB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEW,QAAAA,QAAQ,CAACC,OAAD,EAAgB;AAAA,cAAfA,OAAe;AAAfA,YAAAA,OAAe,GAALC,GAAK;AAAA;;AACtB,iBAAOD,OAAO,CAACE,SAAR,CAAkB,IAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,QAAAA,MAAM,CAACC,SAAD,EAAY;AAChB;AACA,cAAMC,SAAS,GAAG,KAAKtC,KAAvB;AACA,cAAMuC,SAAS,GAAGF,SAAS,CAACrC,KAA5B;AACA,cAAMwC,YAAY,GAAG,KAAKvC,QAA1B;AACA,cAAMwC,YAAY,GAAGJ,SAAS,CAACpC,QAA/B,CALgB,CAOhB;;AACA,eAAKyC,KAAL,GARgB,CAUhB;;AACA,cAAIF,YAAY,GAAG,CAAnB,EAAsB;AACpB;AACA,iBAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,YAApB,EAAkCtB,CAAC,IAAI,CAAvC,EAA0C;AACxC,kBAAMwB,QAAQ,GAAIJ,SAAS,CAACpB,CAAC,KAAK,CAAP,CAAT,KAAwB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAAxC,GAA8C,IAA/D;AACAmB,cAAAA,SAAS,CAAEE,YAAY,GAAGrB,CAAhB,KAAuB,CAAxB,CAAT,IAAuCwB,QAAQ,IAAK,KAAM,CAACH,YAAY,GAAGrB,CAAhB,IAAqB,CAAtB,GAA2B,CAApF;AACD;AACF,WAND,MAMO;AACL;AACA,iBAAK,IAAIA,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGsB,YAApB,EAAkCtB,EAAC,IAAI,CAAvC,EAA0C;AACxCmB,cAAAA,SAAS,CAAEE,YAAY,GAAGrB,EAAhB,KAAuB,CAAxB,CAAT,GAAsCoB,SAAS,CAACpB,EAAC,KAAK,CAAP,CAA/C;AACD;AACF;;AACD,eAAKlB,QAAL,IAAiBwC,YAAjB,CAvBgB,CAyBhB;;AACA,iBAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,QAAAA,KAAK,GAAG;AACN;AACA,cAAM;AAAE1C,YAAAA,KAAF;AAASC,YAAAA;AAAT,cAAsB,IAA5B,CAFM,CAIN;;AACAD,UAAAA,KAAK,CAACC,QAAQ,KAAK,CAAd,CAAL,IAAyB,cAAe,KAAMA,QAAQ,GAAG,CAAZ,GAAiB,CAA9D;AACAD,UAAAA,KAAK,CAACE,MAAN,GAAe0B,IAAI,CAACgB,IAAL,CAAU3C,QAAQ,GAAG,CAArB,CAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEH,QAAAA,KAAK,GAAG;AACN,cAAMA,KAAK,GAAG,MAAMA,KAAN,CAAY+C,IAAZ,CAAiB,IAAjB,CAAd;AACA/C,UAAAA,KAAK,CAACE,KAAN,GAAc,KAAKA,KAAL,CAAW8C,KAAX,CAAiB,CAAjB,CAAd;AAEA,iBAAOhD,KAAP;AACD;;AAzLiC,O;AA4LpC;AACA;AACA;;;qBACaoC,G,GAAM;AACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,QAAAA,SAAS,CAACE,SAAD,EAAY;AACnB;AACA,cAAM;AAAErC,YAAAA,KAAF;AAASC,YAAAA;AAAT,cAAsBoC,SAA5B,CAFmB,CAInB;;AACA,cAAMU,QAAQ,GAAG,EAAjB;;AACA,eAAK,IAAI5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,QAApB,EAA8BkB,CAAC,IAAI,CAAnC,EAAsC;AACpC,gBAAM6B,IAAI,GAAIhD,KAAK,CAACmB,CAAC,KAAK,CAAP,CAAL,KAAoB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAApC,GAA0C,IAAvD;AACA4B,YAAAA,QAAQ,CAAChB,IAAT,CAAc,CAACiB,IAAI,KAAK,CAAV,EAAahB,QAAb,CAAsB,EAAtB,CAAd;AACAe,YAAAA,QAAQ,CAAChB,IAAT,CAAc,CAACiB,IAAI,GAAG,IAAR,EAAchB,QAAd,CAAuB,EAAvB,CAAd;AACD;;AAED,iBAAOe,QAAQ,CAACE,IAAT,CAAc,EAAd,CAAP;AACD,SA3BgB;;AA6BjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,QAAAA,KAAK,CAACC,MAAD,EAAS;AACZ;AACA,cAAMC,YAAY,GAAGD,MAAM,CAACjD,MAA5B,CAFY,CAIZ;;AACA,cAAMF,KAAK,GAAG,EAAd;;AACA,eAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiC,YAApB,EAAkCjC,CAAC,IAAI,CAAvC,EAA0C;AACxCnB,YAAAA,KAAK,CAACmB,CAAC,KAAK,CAAP,CAAL,IAAkBkC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAcnC,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,IAAsC,KAAMA,CAAC,GAAG,CAAL,GAAU,CAAvE;AACD;;AAED,iBAAO,IAAI/B,SAAJ,CAAcY,KAAd,EAAqBoD,YAAY,GAAG,CAApC,CAAP;AACD;;AArDgB,O;AAwDnB;AACA;AACA;;;wBACaG,M,GAAS;AACpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEpB,QAAAA,SAAS,CAACE,SAAD,EAAY;AACnB;AACA,cAAM;AAAErC,YAAAA,KAAF;AAASC,YAAAA;AAAT,cAAsBoC,SAA5B,CAFmB,CAInB;;AACA,cAAMmB,WAAW,GAAG,EAApB;;AACA,eAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,QAApB,EAA8BkB,CAAC,IAAI,CAAnC,EAAsC;AACpC,gBAAM6B,IAAI,GAAIhD,KAAK,CAACmB,CAAC,KAAK,CAAP,CAAL,KAAoB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAApC,GAA0C,IAAvD;AACAqC,YAAAA,WAAW,CAACzB,IAAZ,CAAiB0B,MAAM,CAACC,YAAP,CAAoBV,IAApB,CAAjB;AACD;;AAED,iBAAOQ,WAAW,CAACP,IAAZ,CAAiB,EAAjB,CAAP;AACD,SA1BmB;;AA4BpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,QAAAA,KAAK,CAACS,SAAD,EAAY;AACf;AACA,cAAMC,eAAe,GAAGD,SAAS,CAACzD,MAAlC,CAFe,CAIf;;AACA,cAAMF,KAAK,GAAG,EAAd;;AACA,eAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyC,eAApB,EAAqCzC,CAAC,IAAI,CAA1C,EAA6C;AAC3CnB,YAAAA,KAAK,CAACmB,CAAC,KAAK,CAAP,CAAL,IAAkB,CAACwC,SAAS,CAACE,UAAV,CAAqB1C,CAArB,IAA0B,IAA3B,KAAqC,KAAMA,CAAC,GAAG,CAAL,GAAU,CAAtE;AACD;;AAED,iBAAO,IAAI/B,SAAJ,CAAcY,KAAd,EAAqB4D,eAArB,CAAP;AACD;;AApDmB,O;AAuDtB;AACA;AACA;;;sBACaE,I,GAAO;AAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE3B,QAAAA,SAAS,CAACE,SAAD,EAAY;AACnB,cAAI;AACF,mBAAO0B,kBAAkB,CAACC,MAAM,CAACT,MAAM,CAACpB,SAAP,CAAiBE,SAAjB,CAAD,CAAP,CAAzB;AACD,WAFD,CAEE,OAAO4B,CAAP,EAAU;AACV,kBAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;AACF,SApBiB;;AAsBlB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEhB,QAAAA,KAAK,CAACiB,OAAD,EAAU;AACb,iBAAOZ,MAAM,CAACL,KAAP,CAAakB,QAAQ,CAACC,kBAAkB,CAACF,OAAD,CAAnB,CAArB,CAAP;AACD;;AArCiB,O;AAwCpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;wCACa9E,sB,GAAN,MAAMA,sBAAN,SAAqCF,IAArC,CAA0C;AAC/CY,QAAAA,WAAW,GAAG;AACZ;AACA,eAAKuE,cAAL,GAAsB,CAAtB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,QAAAA,KAAK,GAAG;AACN;AACA,eAAKC,KAAL,GAAa,IAAIpF,SAAJ,EAAb;AACA,eAAKqF,WAAL,GAAmB,CAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,QAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,cAAIC,MAAM,GAAGD,IAAb,CADY,CAGZ;;AACA,cAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,YAAAA,MAAM,GAAGd,IAAI,CAACZ,KAAL,CAAW0B,MAAX,CAAT;AACD,WANW,CAQZ;;;AACA,eAAKJ,KAAL,CAAWpC,MAAX,CAAkBwC,MAAlB;;AACA,eAAKH,WAAL,IAAoBG,MAAM,CAAC3E,QAA3B;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE4E,QAAAA,QAAQ,CAACC,OAAD,EAAU;AAChB,cAAIC,cAAJ,CADgB,CAGhB;;AACA,cAAM;AAAEP,YAAAA,KAAK,EAAEG,IAAT;AAAeK,YAAAA;AAAf,cAA6B,IAAnC;AACA,cAAMC,SAAS,GAAGN,IAAI,CAAC3E,KAAvB;AACA,cAAMkF,YAAY,GAAGP,IAAI,CAAC1E,QAA1B;AACA,cAAMkF,cAAc,GAAGH,SAAS,GAAG,CAAnC,CAPgB,CAShB;;AACA,cAAII,YAAY,GAAGF,YAAY,GAAGC,cAAlC;;AACA,cAAIL,OAAJ,EAAa;AACX;AACAM,YAAAA,YAAY,GAAGxD,IAAI,CAACgB,IAAL,CAAUwC,YAAV,CAAf;AACD,WAHD,MAGO;AACL;AACA;AACAA,YAAAA,YAAY,GAAGxD,IAAI,CAACyD,GAAL,CAAS,CAACD,YAAY,GAAG,CAAhB,IAAqB,KAAKd,cAAnC,EAAmD,CAAnD,CAAf;AACD,WAlBe,CAoBhB;;;AACA,cAAMgB,WAAW,GAAGF,YAAY,GAAGJ,SAAnC,CArBgB,CAuBhB;;AACA,cAAMO,WAAW,GAAG3D,IAAI,CAAC4D,GAAL,CAASF,WAAW,GAAG,CAAvB,EAA0BJ,YAA1B,CAApB,CAxBgB,CA0BhB;;AACA,cAAII,WAAJ,EAAiB;AACf,iBAAK,IAAIG,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGH,WAA9B,EAA2CG,MAAM,IAAIT,SAArD,EAAgE;AAC9D;AACA,mBAAKU,eAAL,CAAqBT,SAArB,EAAgCQ,MAAhC;AACD,aAJc,CAMf;;;AACAV,YAAAA,cAAc,GAAGE,SAAS,CAACU,MAAV,CAAiB,CAAjB,EAAoBL,WAApB,CAAjB;AACAX,YAAAA,IAAI,CAAC1E,QAAL,IAAiBsF,WAAjB;AACD,WApCe,CAsChB;;;AACA,iBAAO,IAAInG,SAAJ,CAAc2F,cAAd,EAA8BQ,WAA9B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEzF,QAAAA,KAAK,GAAG;AACN,cAAMA,KAAK,GAAG,MAAMA,KAAN,CAAY+C,IAAZ,CAAiB,IAAjB,CAAd;AACA/C,UAAAA,KAAK,CAAC0E,KAAN,GAAc,KAAKA,KAAL,CAAW1E,KAAX,EAAd;AAEA,iBAAOA,KAAP;AACD;;AAlH8C,O;AAqHjD;AACA;AACA;AACA;AACA;AACA;AACA;;;wBACaR,M,GAAN,MAAMA,MAAN,SAAqBD,sBAArB,CAA4C;AACjDU,QAAAA,WAAW,CAAC6F,GAAD,EAAM;AACf;AAEA,eAAKZ,SAAL,GAAiB,MAAM,EAAvB;AAEA;AACJ;AACA;;AACI,eAAKY,GAAL,GAAWhG,MAAM,CAACC,MAAP,CAAc,IAAIV,IAAJ,EAAd,EAA0ByG,GAA1B,CAAX,CARe,CAUf;;AACA,eAAKrB,KAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsB,eAAbsB,aAAa,CAACC,SAAD,EAAY;AAC9B,iBAAO,CAACC,OAAD,EAAUH,GAAV,KAAkB,IAAIE,SAAJ,CAAcF,GAAd,EAAmBI,QAAnB,CAA4BD,OAA5B,CAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC0B,eAAjBE,iBAAiB,CAACH,SAAD,EAAY;AAClC,iBAAO,CAACC,OAAD,EAAUG,GAAV,KAAkB,IAAI3G,IAAJ,CAASuG,SAAT,EAAoBI,GAApB,EAAyBF,QAAzB,CAAkCD,OAAlC,CAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACExB,QAAAA,KAAK,GAAG;AACN;AACA,gBAAMA,KAAN,CAAY1B,IAAZ,CAAiB,IAAjB,EAFM,CAIN;;AACA,eAAKsD,QAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,QAAAA,MAAM,CAACC,aAAD,EAAgB;AACpB;AACA,eAAK3B,OAAL,CAAa2B,aAAb,EAFoB,CAIpB;;;AACA,eAAKxB,QAAL,GALoB,CAOpB;;;AACA,iBAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEmB,QAAAA,QAAQ,CAACK,aAAD,EAAgB;AACtB;AACA,cAAIA,aAAJ,EAAmB;AACjB,iBAAK3B,OAAL,CAAa2B,aAAb;AACD,WAJqB,CAMtB;;;AACA,cAAMC,IAAI,GAAG,KAAKC,WAAL,EAAb;;AAEA,iBAAOD,IAAP;AACD;;AA/GgD,O;AAkHnD;AACA;AACA;;;sBACa/G,I,GAAN,MAAMA,IAAN,SAAmBJ,IAAnB,CAAwB;AAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEY,QAAAA,WAAW,CAAC+F,SAAD,EAAYI,GAAZ,EAAiB;AAC1B;AAEA,cAAMM,MAAM,GAAG,IAAIV,SAAJ,EAAf;AACA,eAAKW,OAAL,GAAeD,MAAf,CAJ0B,CAM1B;;AACA,cAAIE,IAAI,GAAGR,GAAX;;AACA,cAAI,OAAOQ,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,YAAAA,IAAI,GAAG5C,IAAI,CAACZ,KAAL,CAAWwD,IAAX,CAAP;AACD,WAVyB,CAY1B;;;AACA,cAAMC,eAAe,GAAGH,MAAM,CAACxB,SAA/B;AACA,cAAM4B,oBAAoB,GAAGD,eAAe,GAAG,CAA/C,CAd0B,CAgB1B;;AACA,cAAID,IAAI,CAACzG,QAAL,GAAgB2G,oBAApB,EAA0C;AACxCF,YAAAA,IAAI,GAAGF,MAAM,CAACR,QAAP,CAAgBE,GAAhB,CAAP;AACD,WAnByB,CAqB1B;;;AACAQ,UAAAA,IAAI,CAAChE,KAAL,GAtB0B,CAwB1B;;;AACA,cAAMmE,IAAI,GAAGH,IAAI,CAAC5G,KAAL,EAAb;;AACA,eAAKgH,KAAL,GAAaD,IAAb;;AACA,cAAME,IAAI,GAAGL,IAAI,CAAC5G,KAAL,EAAb;;AACA,eAAKkH,KAAL,GAAaD,IAAb,CA5B0B,CA8B1B;;AACA,cAAME,SAAS,GAAGJ,IAAI,CAAC7G,KAAvB;AACA,cAAMkH,SAAS,GAAGH,IAAI,CAAC/G,KAAvB,CAhC0B,CAkC1B;;AACA,eAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwF,eAApB,EAAqCxF,CAAC,IAAI,CAA1C,EAA6C;AAC3C8F,YAAAA,SAAS,CAAC9F,CAAD,CAAT,IAAgB,UAAhB;AACA+F,YAAAA,SAAS,CAAC/F,CAAD,CAAT,IAAgB,UAAhB;AACD;;AACD0F,UAAAA,IAAI,CAAC5G,QAAL,GAAgB2G,oBAAhB;AACAG,UAAAA,IAAI,CAAC9G,QAAL,GAAgB2G,oBAAhB,CAxC0B,CA0C1B;;AACA,eAAKrC,KAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEA,QAAAA,KAAK,GAAG;AACN;AACA,cAAMiC,MAAM,GAAG,KAAKC,OAApB,CAFM,CAIN;;AACAD,UAAAA,MAAM,CAACjC,KAAP;AACAiC,UAAAA,MAAM,CAACJ,MAAP,CAAc,KAAKY,KAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEZ,QAAAA,MAAM,CAACC,aAAD,EAAgB;AACpB,eAAKI,OAAL,CAAaL,MAAb,CAAoBC,aAApB,EADoB,CAGpB;;;AACA,iBAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEL,QAAAA,QAAQ,CAACK,aAAD,EAAgB;AACtB;AACA,cAAMG,MAAM,GAAG,KAAKC,OAApB,CAFsB,CAItB;;AACA,cAAMU,SAAS,GAAGX,MAAM,CAACR,QAAP,CAAgBK,aAAhB,CAAlB;AACAG,UAAAA,MAAM,CAACjC,KAAP;AACA,cAAM6C,IAAI,GAAGZ,MAAM,CAACR,QAAP,CAAgB,KAAKc,KAAL,CAAWhH,KAAX,GAAmBsC,MAAnB,CAA0B+E,SAA1B,CAAhB,CAAb;AAEA,iBAAOC,IAAP;AACD;;AApH4B,O","sourcesContent":["/* eslint-disable no-use-before-define */\r\n\r\n/**\r\n * Base class for inheritance.\r\n */\r\nexport class Base {\r\n  /**\r\n   * Extends this object and runs the init method.\r\n   * Arguments to create() will be passed to init().\r\n   *\r\n   * @return {Object} The new object.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var instance = MyType.create();\r\n   */\r\n  static create(...args) {\r\n    return new this(...args);\r\n  }\r\n\r\n  /**\r\n   * Copies properties into this object.\r\n   *\r\n   * @param {Object} properties The properties to mix in.\r\n   *\r\n   * @example\r\n   *\r\n   *     MyType.mixIn({\r\n   *         field: 'value'\r\n   *     });\r\n   */\r\n  mixIn(properties) {\r\n    return Object.assign(this, properties);\r\n  }\r\n\r\n  /**\r\n   * Creates a copy of this object.\r\n   *\r\n   * @return {Object} The clone.\r\n   *\r\n   * @example\r\n   *\r\n   *     var clone = instance.clone();\r\n   */\r\n  clone() {\r\n    const clone = new this.constructor();\r\n    Object.assign(clone, this);\r\n    return clone;\r\n  }\r\n}\r\n\r\n/**\r\n * An array of 32-bit words.\r\n *\r\n * @property {Array} words The array of 32-bit words.\r\n * @property {number} sigBytes The number of significant bytes in this word array.\r\n */\r\nexport class WordArray extends Base {\r\n  /**\r\n   * Initializes a newly created word array.\r\n   *\r\n   * @param {Array} words (Optional) An array of 32-bit words.\r\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n   *\r\n   * @example\r\n   *\r\n   *     var wordArray = CryptoJS.lib.WordArray.create();\r\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\r\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\r\n   */\r\n  constructor(words = [], sigBytes = words.length * 4) {\r\n    super();\r\n\r\n    let typedArray = words;\r\n    // Convert buffers to uint8\r\n    if (typedArray instanceof ArrayBuffer) {\r\n      typedArray = new Uint8Array(typedArray);\r\n    }\r\n\r\n    // Convert other array views to uint8\r\n    if (\r\n      typedArray instanceof Int8Array\r\n      || typedArray instanceof Uint8ClampedArray\r\n      || typedArray instanceof Int16Array\r\n      || typedArray instanceof Uint16Array\r\n      || typedArray instanceof Int32Array\r\n      || typedArray instanceof Uint32Array\r\n      || typedArray instanceof Float32Array\r\n      || typedArray instanceof Float64Array\r\n    ) {\r\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\r\n    }\r\n\r\n    // Handle Uint8Array\r\n    if (typedArray instanceof Uint8Array) {\r\n      // Shortcut\r\n      const typedArrayByteLength = typedArray.byteLength;\r\n\r\n      // Extract bytes\r\n      const _words = [];\r\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\r\n        _words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n      }\r\n\r\n      // Initialize this word array\r\n      this.words = _words;\r\n      this.sigBytes = typedArrayByteLength;\r\n    } else {\r\n      // Else call normal init\r\n      this.words = words;\r\n      this.sigBytes = sigBytes;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a word array filled with random bytes.\r\n   *\r\n   * @param {number} nBytes The number of random bytes to generate.\r\n   *\r\n   * @return {WordArray} The random word array.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var wordArray = CryptoJS.lib.WordArray.random(16);\r\n   */\r\n  static random(nBytes) {\r\n    const words = [];\r\n\r\n    const r = (m_w) => {\r\n      let _m_w = m_w;\r\n      let _m_z = 0x3ade68b1;\r\n      const mask = 0xffffffff;\r\n\r\n      return () => {\r\n        _m_z = (0x9069 * (_m_z & 0xFFFF) + (_m_z >> 0x10)) & mask;\r\n        _m_w = (0x4650 * (_m_w & 0xFFFF) + (_m_w >> 0x10)) & mask;\r\n        let result = ((_m_z << 0x10) + _m_w) & mask;\r\n        result /= 0x100000000;\r\n        result += 0.5;\r\n        return result * (Math.random() > 0.5 ? 1 : -1);\r\n      };\r\n    };\r\n\r\n    for (let i = 0, rcache; i < nBytes; i += 4) {\r\n      const _r = r((rcache || Math.random()) * 0x100000000);\r\n\r\n      rcache = _r() * 0x3ade67b7;\r\n      words.push((_r() * 0x100000000) | 0);\r\n    }\r\n\r\n    return new WordArray(words, nBytes);\r\n  }\r\n\r\n  /**\r\n   * Converts this word array to a string.\r\n   *\r\n   * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n   *\r\n   * @return {string} The stringified word array.\r\n   *\r\n   * @example\r\n   *\r\n   *     var string = wordArray + '';\r\n   *     var string = wordArray.toString();\r\n   *     var string = wordArray.toString(CryptoJS.enc.Utf8);\r\n   */\r\n  toString(encoder = Hex) {\r\n    return encoder.stringify(this);\r\n  }\r\n\r\n  /**\r\n   * Concatenates a word array to this word array.\r\n   *\r\n   * @param {WordArray} wordArray The word array to append.\r\n   *\r\n   * @return {WordArray} This word array.\r\n   *\r\n   * @example\r\n   *\r\n   *     wordArray1.concat(wordArray2);\r\n   */\r\n  concat(wordArray) {\r\n    // Shortcuts\r\n    const thisWords = this.words;\r\n    const thatWords = wordArray.words;\r\n    const thisSigBytes = this.sigBytes;\r\n    const thatSigBytes = wordArray.sigBytes;\r\n\r\n    // Clamp excess bits\r\n    this.clamp();\r\n\r\n    // Concat\r\n    if (thisSigBytes % 4) {\r\n      // Copy one byte at a time\r\n      for (let i = 0; i < thatSigBytes; i += 1) {\r\n        const thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n        thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\r\n      }\r\n    } else {\r\n      // Copy one word at a time\r\n      for (let i = 0; i < thatSigBytes; i += 4) {\r\n        thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\r\n      }\r\n    }\r\n    this.sigBytes += thatSigBytes;\r\n\r\n    // Chainable\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes insignificant bits.\r\n   *\r\n   * @example\r\n   *\r\n   *     wordArray.clamp();\r\n   */\r\n  clamp() {\r\n    // Shortcuts\r\n    const { words, sigBytes } = this;\r\n\r\n    // Clamp\r\n    words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\r\n    words.length = Math.ceil(sigBytes / 4);\r\n  }\r\n\r\n  /**\r\n   * Creates a copy of this word array.\r\n   *\r\n   * @return {WordArray} The clone.\r\n   *\r\n   * @example\r\n   *\r\n   *     var clone = wordArray.clone();\r\n   */\r\n  clone() {\r\n    const clone = super.clone.call(this);\r\n    clone.words = this.words.slice(0);\r\n\r\n    return clone;\r\n  }\r\n}\r\n\r\n/**\r\n * Hex encoding strategy.\r\n */\r\nexport const Hex = {\r\n  /**\r\n   * Converts a word array to a hex string.\r\n   *\r\n   * @param {WordArray} wordArray The word array.\r\n   *\r\n   * @return {string} The hex string.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\r\n   */\r\n  stringify(wordArray) {\r\n    // Shortcuts\r\n    const { words, sigBytes } = wordArray;\r\n\r\n    // Convert\r\n    const hexChars = [];\r\n    for (let i = 0; i < sigBytes; i += 1) {\r\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n      hexChars.push((bite >>> 4).toString(16));\r\n      hexChars.push((bite & 0x0f).toString(16));\r\n    }\r\n\r\n    return hexChars.join('');\r\n  },\r\n\r\n  /**\r\n   * Converts a hex string to a word array.\r\n   *\r\n   * @param {string} hexStr The hex string.\r\n   *\r\n   * @return {WordArray} The word array.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\r\n   */\r\n  parse(hexStr) {\r\n    // Shortcut\r\n    const hexStrLength = hexStr.length;\r\n\r\n    // Convert\r\n    const words = [];\r\n    for (let i = 0; i < hexStrLength; i += 2) {\r\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\r\n    }\r\n\r\n    return new WordArray(words, hexStrLength / 2);\r\n  },\r\n};\r\n\r\n/**\r\n * Latin1 encoding strategy.\r\n */\r\nexport const Latin1 = {\r\n  /**\r\n   * Converts a word array to a Latin1 string.\r\n   *\r\n   * @param {WordArray} wordArray The word array.\r\n   *\r\n   * @return {string} The Latin1 string.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\r\n   */\r\n  stringify(wordArray) {\r\n    // Shortcuts\r\n    const { words, sigBytes } = wordArray;\r\n\r\n    // Convert\r\n    const latin1Chars = [];\r\n    for (let i = 0; i < sigBytes; i += 1) {\r\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n      latin1Chars.push(String.fromCharCode(bite));\r\n    }\r\n\r\n    return latin1Chars.join('');\r\n  },\r\n\r\n  /**\r\n   * Converts a Latin1 string to a word array.\r\n   *\r\n   * @param {string} latin1Str The Latin1 string.\r\n   *\r\n   * @return {WordArray} The word array.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\r\n   */\r\n  parse(latin1Str) {\r\n    // Shortcut\r\n    const latin1StrLength = latin1Str.length;\r\n\r\n    // Convert\r\n    const words = [];\r\n    for (let i = 0; i < latin1StrLength; i += 1) {\r\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\r\n    }\r\n\r\n    return new WordArray(words, latin1StrLength);\r\n  },\r\n};\r\n\r\n/**\r\n * UTF-8 encoding strategy.\r\n */\r\nexport const Utf8 = {\r\n  /**\r\n   * Converts a word array to a UTF-8 string.\r\n   *\r\n   * @param {WordArray} wordArray The word array.\r\n   *\r\n   * @return {string} The UTF-8 string.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\r\n   */\r\n  stringify(wordArray) {\r\n    try {\r\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\r\n    } catch (e) {\r\n      throw new Error('Malformed UTF-8 data');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Converts a UTF-8 string to a word array.\r\n   *\r\n   * @param {string} utf8Str The UTF-8 string.\r\n   *\r\n   * @return {WordArray} The word array.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\r\n   */\r\n  parse(utf8Str) {\r\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\r\n  },\r\n};\r\n\r\n/**\r\n * Abstract buffered block algorithm template.\r\n *\r\n * The property blockSize must be implemented in a concrete subtype.\r\n *\r\n * @property {number} _minBufferSize\r\n *\r\n *     The number of blocks that should be kept unprocessed in the buffer. Default: 0\r\n */\r\nexport class BufferedBlockAlgorithm extends Base {\r\n  constructor() {\r\n    super();\r\n    this._minBufferSize = 0;\r\n  }\r\n\r\n  /**\r\n   * Resets this block algorithm's data buffer to its initial state.\r\n   *\r\n   * @example\r\n   *\r\n   *     bufferedBlockAlgorithm.reset();\r\n   */\r\n  reset() {\r\n    // Initial values\r\n    this._data = new WordArray();\r\n    this._nDataBytes = 0;\r\n  }\r\n\r\n  /**\r\n   * Adds new data to this block algorithm's buffer.\r\n   *\r\n   * @param {WordArray|string} data\r\n   *\r\n   *     The data to append. Strings are converted to a WordArray using UTF-8.\r\n   *\r\n   * @example\r\n   *\r\n   *     bufferedBlockAlgorithm._append('data');\r\n   *     bufferedBlockAlgorithm._append(wordArray);\r\n   */\r\n  _append(data) {\r\n    let m_data = data;\r\n\r\n    // Convert string to WordArray, else assume WordArray already\r\n    if (typeof m_data === 'string') {\r\n      m_data = Utf8.parse(m_data);\r\n    }\r\n\r\n    // Append\r\n    this._data.concat(m_data);\r\n    this._nDataBytes += m_data.sigBytes;\r\n  }\r\n\r\n  /**\r\n   * Processes available data blocks.\r\n   *\r\n   * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\r\n   *\r\n   * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\r\n   *\r\n   * @return {WordArray} The processed data.\r\n   *\r\n   * @example\r\n   *\r\n   *     var processedData = bufferedBlockAlgorithm._process();\r\n   *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\r\n   */\r\n  _process(doFlush) {\r\n    let processedWords;\r\n\r\n    // Shortcuts\r\n    const { _data: data, blockSize } = this;\r\n    const dataWords = data.words;\r\n    const dataSigBytes = data.sigBytes;\r\n    const blockSizeBytes = blockSize * 4;\r\n\r\n    // Count blocks ready\r\n    let nBlocksReady = dataSigBytes / blockSizeBytes;\r\n    if (doFlush) {\r\n      // Round up to include partial blocks\r\n      nBlocksReady = Math.ceil(nBlocksReady);\r\n    } else {\r\n      // Round down to include only full blocks,\r\n      // less the number of blocks that must remain in the buffer\r\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\r\n    }\r\n\r\n    // Count words ready\r\n    const nWordsReady = nBlocksReady * blockSize;\r\n\r\n    // Count bytes ready\r\n    const nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\r\n\r\n    // Process blocks\r\n    if (nWordsReady) {\r\n      for (let offset = 0; offset < nWordsReady; offset += blockSize) {\r\n        // Perform concrete-algorithm logic\r\n        this._doProcessBlock(dataWords, offset);\r\n      }\r\n\r\n      // Remove processed words\r\n      processedWords = dataWords.splice(0, nWordsReady);\r\n      data.sigBytes -= nBytesReady;\r\n    }\r\n\r\n    // Return processed words\r\n    return new WordArray(processedWords, nBytesReady);\r\n  }\r\n\r\n  /**\r\n   * Creates a copy of this object.\r\n   *\r\n   * @return {Object} The clone.\r\n   *\r\n   * @example\r\n   *\r\n   *     var clone = bufferedBlockAlgorithm.clone();\r\n   */\r\n  clone() {\r\n    const clone = super.clone.call(this);\r\n    clone._data = this._data.clone();\r\n\r\n    return clone;\r\n  }\r\n}\r\n\r\n/**\r\n * Abstract hasher template.\r\n *\r\n * @property {number} blockSize\r\n *\r\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\r\n */\r\nexport class Hasher extends BufferedBlockAlgorithm {\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.blockSize = 512 / 32;\r\n\r\n    /**\r\n     * Configuration options.\r\n     */\r\n    this.cfg = Object.assign(new Base(), cfg);\r\n\r\n    // Set initial values\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Creates a shortcut function to a hasher's object interface.\r\n   *\r\n   * @param {Hasher} SubHasher The hasher to create a helper for.\r\n   *\r\n   * @return {Function} The shortcut function.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\r\n   */\r\n  static _createHelper(SubHasher) {\r\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\r\n  }\r\n\r\n  /**\r\n   * Creates a shortcut function to the HMAC's object interface.\r\n   *\r\n   * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\r\n   *\r\n   * @return {Function} The shortcut function.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\r\n   */\r\n  static _createHmacHelper(SubHasher) {\r\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\r\n  }\r\n\r\n  /**\r\n   * Resets this hasher to its initial state.\r\n   *\r\n   * @example\r\n   *\r\n   *     hasher.reset();\r\n   */\r\n  reset() {\r\n    // Reset data buffer\r\n    super.reset.call(this);\r\n\r\n    // Perform concrete-hasher logic\r\n    this._doReset();\r\n  }\r\n\r\n  /**\r\n   * Updates this hasher with a message.\r\n   *\r\n   * @param {WordArray|string} messageUpdate The message to append.\r\n   *\r\n   * @return {Hasher} This hasher.\r\n   *\r\n   * @example\r\n   *\r\n   *     hasher.update('message');\r\n   *     hasher.update(wordArray);\r\n   */\r\n  update(messageUpdate) {\r\n    // Append\r\n    this._append(messageUpdate);\r\n\r\n    // Update the hash\r\n    this._process();\r\n\r\n    // Chainable\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Finalizes the hash computation.\r\n   * Note that the finalize operation is effectively a destructive, read-once operation.\r\n   *\r\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n   *\r\n   * @return {WordArray} The hash.\r\n   *\r\n   * @example\r\n   *\r\n   *     var hash = hasher.finalize();\r\n   *     var hash = hasher.finalize('message');\r\n   *     var hash = hasher.finalize(wordArray);\r\n   */\r\n  finalize(messageUpdate) {\r\n    // Final message update\r\n    if (messageUpdate) {\r\n      this._append(messageUpdate);\r\n    }\r\n\r\n    // Perform concrete-hasher logic\r\n    const hash = this._doFinalize();\r\n\r\n    return hash;\r\n  }\r\n}\r\n\r\n/**\r\n * HMAC algorithm.\r\n */\r\nexport class HMAC extends Base {\r\n  /**\r\n   * Initializes a newly created HMAC.\r\n   *\r\n   * @param {Hasher} SubHasher The hash algorithm to use.\r\n   * @param {WordArray|string} key The secret key.\r\n   *\r\n   * @example\r\n   *\r\n   *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n   */\r\n  constructor(SubHasher, key) {\r\n    super();\r\n\r\n    const hasher = new SubHasher();\r\n    this._hasher = hasher;\r\n\r\n    // Convert string to WordArray, else assume WordArray already\r\n    let _key = key;\r\n    if (typeof _key === 'string') {\r\n      _key = Utf8.parse(_key);\r\n    }\r\n\r\n    // Shortcuts\r\n    const hasherBlockSize = hasher.blockSize;\r\n    const hasherBlockSizeBytes = hasherBlockSize * 4;\r\n\r\n    // Allow arbitrary length keys\r\n    if (_key.sigBytes > hasherBlockSizeBytes) {\r\n      _key = hasher.finalize(key);\r\n    }\r\n\r\n    // Clamp excess bits\r\n    _key.clamp();\r\n\r\n    // Clone key for inner and outer pads\r\n    const oKey = _key.clone();\r\n    this._oKey = oKey;\r\n    const iKey = _key.clone();\r\n    this._iKey = iKey;\r\n\r\n    // Shortcuts\r\n    const oKeyWords = oKey.words;\r\n    const iKeyWords = iKey.words;\r\n\r\n    // XOR keys with pad constants\r\n    for (let i = 0; i < hasherBlockSize; i += 1) {\r\n      oKeyWords[i] ^= 0x5c5c5c5c;\r\n      iKeyWords[i] ^= 0x36363636;\r\n    }\r\n    oKey.sigBytes = hasherBlockSizeBytes;\r\n    iKey.sigBytes = hasherBlockSizeBytes;\r\n\r\n    // Set initial values\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Resets this HMAC to its initial state.\r\n   *\r\n   * @example\r\n   *\r\n   *     hmacHasher.reset();\r\n   */\r\n  reset() {\r\n    // Shortcut\r\n    const hasher = this._hasher;\r\n\r\n    // Reset\r\n    hasher.reset();\r\n    hasher.update(this._iKey);\r\n  }\r\n\r\n  /**\r\n   * Updates this HMAC with a message.\r\n   *\r\n   * @param {WordArray|string} messageUpdate The message to append.\r\n   *\r\n   * @return {HMAC} This HMAC instance.\r\n   *\r\n   * @example\r\n   *\r\n   *     hmacHasher.update('message');\r\n   *     hmacHasher.update(wordArray);\r\n   */\r\n  update(messageUpdate) {\r\n    this._hasher.update(messageUpdate);\r\n\r\n    // Chainable\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Finalizes the HMAC computation.\r\n   * Note that the finalize operation is effectively a destructive, read-once operation.\r\n   *\r\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n   *\r\n   * @return {WordArray} The HMAC.\r\n   *\r\n   * @example\r\n   *\r\n   *     var hmac = hmacHasher.finalize();\r\n   *     var hmac = hmacHasher.finalize('message');\r\n   *     var hmac = hmacHasher.finalize(wordArray);\r\n   */\r\n  finalize(messageUpdate) {\r\n    // Shortcut\r\n    const hasher = this._hasher;\r\n\r\n    // Compute HMAC\r\n    const innerHash = hasher.finalize(messageUpdate);\r\n    hasher.reset();\r\n    const hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\r\n\r\n    return hmac;\r\n  }\r\n}\r\n"]}