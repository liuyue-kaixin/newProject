{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/ccProject/node_modules/crypto-es/lib/pbkdf2.js"],"names":["PBKDF2Algo","Base","WordArray","SHA1Algo","HMAC","constructor","cfg","Object","assign","keySize","hasher","iterations","compute","password","salt","hmac","create","derivedKey","blockIndex","derivedKeyWords","words","blockIndexWords","length","block","update","finalize","reset","blockWords","blockWordsLength","intermediate","i","intermediateWords","j","concat","sigBytes","PBKDF2"],"mappings":";;;uCAUaA,U;;;;;;AATXC,MAAAA,I,gBAAAA,I;AACAC,MAAAA,S,gBAAAA,S;;AAEOC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,I,iBAAAA,I;;;AAET;AACA;AACA;4BACaJ,U,GAAN,MAAMA,UAAN,SAAyBC,IAAzB,CAA8B;AACnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,QAAAA,WAAW,CAACC,GAAD,EAAM;AACf;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,eAAKA,GAAL,GAAWC,MAAM,CAACC,MAAP,CACT,IAAIP,IAAJ,EADS,EAET;AACEQ,YAAAA,OAAO,EAAE,MAAM,EADjB;AAEEC,YAAAA,MAAM,EAAEP,QAFV;AAGEQ,YAAAA,UAAU,EAAE;AAHd,WAFS,EAOTL,GAPS,CAAX;AASD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEM,QAAAA,OAAO,CAACC,QAAD,EAAWC,IAAX,EAAiB;AACtB;AACA,cAAM;AAAER,YAAAA;AAAF,cAAU,IAAhB,CAFsB,CAItB;;AACA,cAAMS,IAAI,GAAGX,IAAI,CAACY,MAAL,CAAYV,GAAG,CAACI,MAAhB,EAAwBG,QAAxB,CAAb,CALsB,CAOtB;;AACA,cAAMI,UAAU,GAAGf,SAAS,CAACc,MAAV,EAAnB;AACA,cAAME,UAAU,GAAGhB,SAAS,CAACc,MAAV,CAAiB,CAAC,UAAD,CAAjB,CAAnB,CATsB,CAWtB;;AACA,cAAMG,eAAe,GAAGF,UAAU,CAACG,KAAnC;AACA,cAAMC,eAAe,GAAGH,UAAU,CAACE,KAAnC;AACA,cAAM;AAAEX,YAAAA,OAAF;AAAWE,YAAAA;AAAX,cAA0BL,GAAhC,CAdsB,CAgBtB;;AACA,iBAAOa,eAAe,CAACG,MAAhB,GAAyBb,OAAhC,EAAyC;AACvC,gBAAMc,KAAK,GAAGR,IAAI,CAACS,MAAL,CAAYV,IAAZ,EAAkBW,QAAlB,CAA2BP,UAA3B,CAAd;AACAH,YAAAA,IAAI,CAACW,KAAL,GAFuC,CAIvC;;AACA,gBAAMC,UAAU,GAAGJ,KAAK,CAACH,KAAzB;AACA,gBAAMQ,gBAAgB,GAAGD,UAAU,CAACL,MAApC,CANuC,CAQvC;;AACA,gBAAIO,YAAY,GAAGN,KAAnB;;AACA,iBAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,UAApB,EAAgCmB,CAAC,IAAI,CAArC,EAAwC;AACtCD,cAAAA,YAAY,GAAGd,IAAI,CAACU,QAAL,CAAcI,YAAd,CAAf;AACAd,cAAAA,IAAI,CAACW,KAAL,GAFsC,CAItC;;AACA,kBAAMK,iBAAiB,GAAGF,YAAY,CAACT,KAAvC,CALsC,CAOtC;;AACA,mBAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,gBAApB,EAAsCI,CAAC,IAAI,CAA3C,EAA8C;AAC5CL,gBAAAA,UAAU,CAACK,CAAD,CAAV,IAAiBD,iBAAiB,CAACC,CAAD,CAAlC;AACD;AACF;;AAEDf,YAAAA,UAAU,CAACgB,MAAX,CAAkBV,KAAlB;AACAF,YAAAA,eAAe,CAAC,CAAD,CAAf,IAAsB,CAAtB;AACD;;AACDJ,UAAAA,UAAU,CAACiB,QAAX,GAAsBzB,OAAO,GAAG,CAAhC;AAEA,iBAAOQ,UAAP;AACD;;AA3FkC,O;AA8FrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;wBACakB,M,GAAS,CAACtB,QAAD,EAAWC,IAAX,EAAiBR,GAAjB,KAAyBN,UAAU,CAACgB,MAAX,CAAkBV,GAAlB,EAAuBM,OAAvB,CAA+BC,QAA/B,EAAyCC,IAAzC,C","sourcesContent":["import {\r\n  Base,\r\n  WordArray,\r\n} from './core.js';\r\nimport { SHA1Algo } from './sha1.js';\r\nimport { HMAC } from './hmac.js';\r\n\r\n/**\r\n * Password-Based Key Derivation Function 2 algorithm.\r\n */\r\nexport class PBKDF2Algo extends Base {\r\n  /**\r\n   * Initializes a newly created key derivation function.\r\n   *\r\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\r\n   *\r\n   * @example\r\n   *\r\n   *     const kdf = CryptoJS.algo.PBKDF2.create();\r\n   *     const kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\r\n   *     const kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\r\n   */\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    /**\r\n     * Configuration options.\r\n     *\r\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\r\n     * @property {Hasher} hasher The hasher to use. Default: SHA1\r\n     * @property {number} iterations The number of iterations to perform. Default: 1\r\n     */\r\n    this.cfg = Object.assign(\r\n      new Base(),\r\n      {\r\n        keySize: 128 / 32,\r\n        hasher: SHA1Algo,\r\n        iterations: 1,\r\n      },\r\n      cfg,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Computes the Password-Based Key Derivation Function 2.\r\n   *\r\n   * @param {WordArray|string} password The password.\r\n   * @param {WordArray|string} salt A salt.\r\n   *\r\n   * @return {WordArray} The derived key.\r\n   *\r\n   * @example\r\n   *\r\n   *     const key = kdf.compute(password, salt);\r\n   */\r\n  compute(password, salt) {\r\n    // Shortcut\r\n    const { cfg } = this;\r\n\r\n    // Init HMAC\r\n    const hmac = HMAC.create(cfg.hasher, password);\r\n\r\n    // Initial values\r\n    const derivedKey = WordArray.create();\r\n    const blockIndex = WordArray.create([0x00000001]);\r\n\r\n    // Shortcuts\r\n    const derivedKeyWords = derivedKey.words;\r\n    const blockIndexWords = blockIndex.words;\r\n    const { keySize, iterations } = cfg;\r\n\r\n    // Generate key\r\n    while (derivedKeyWords.length < keySize) {\r\n      const block = hmac.update(salt).finalize(blockIndex);\r\n      hmac.reset();\r\n\r\n      // Shortcuts\r\n      const blockWords = block.words;\r\n      const blockWordsLength = blockWords.length;\r\n\r\n      // Iterations\r\n      let intermediate = block;\r\n      for (let i = 1; i < iterations; i += 1) {\r\n        intermediate = hmac.finalize(intermediate);\r\n        hmac.reset();\r\n\r\n        // Shortcut\r\n        const intermediateWords = intermediate.words;\r\n\r\n        // XOR intermediate with block\r\n        for (let j = 0; j < blockWordsLength; j += 1) {\r\n          blockWords[j] ^= intermediateWords[j];\r\n        }\r\n      }\r\n\r\n      derivedKey.concat(block);\r\n      blockIndexWords[0] += 1;\r\n    }\r\n    derivedKey.sigBytes = keySize * 4;\r\n\r\n    return derivedKey;\r\n  }\r\n}\r\n\r\n/**\r\n * Computes the Password-Based Key Derivation Function 2.\r\n *\r\n * @param {WordArray|string} password The password.\r\n * @param {WordArray|string} salt A salt.\r\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\r\n *\r\n * @return {WordArray} The derived key.\r\n *\r\n * @static\r\n *\r\n * @example\r\n *\r\n *     var key = CryptoJS.PBKDF2(password, salt);\r\n *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\r\n *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\r\n */\r\nexport const PBKDF2 = (password, salt, cfg) => PBKDF2Algo.create(cfg).compute(password, salt);\r\n"]}