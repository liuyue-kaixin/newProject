{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/model-view/VMLabel.ts"],"names":["CCString","error","_decorator","StringFormatFunction","VMBase","VMEnv","ccclass","property","menu","executeInEditMode","help","LABEL_TYPE","CC_LABEL","CC_RICH_TEXT","CC_EDIT_BOX","VMLabel","tooltip","visible","templateMode","readonly","type","templateValueArr","templateFormatArr","originText","onRestore","checkLabel","onLoad","editor","getLabelValue","parseTemplate","start","onValueInit","regexAll","regex","res","match","i","length","e","arr","matchName","matchInfo","split","getReplaceText","str","getValue","indexNum","parseInt","format","replace","getValueFromFormat","value","deal","setLabelValue","VM","watchPath","max","watchPathArr","onValueChanged","n","o","pathArr","path","join","index","findIndex","v","component","getComponent","labelType","string","checkArray","comp","node"],"mappings":"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","sourcesContent":["import { CCString, error, _decorator } from 'cc';\r\nimport { StringFormatFunction } from './StringFormat';\r\nimport { VMBase } from './VMBase';\r\nimport { VMEnv } from './VMEnv';\r\n\r\nconst { ccclass, property, menu, executeInEditMode, help } = _decorator;\r\n\r\nconst LABEL_TYPE = {\r\n    CC_LABEL: 'cc.Label',\r\n    CC_RICH_TEXT: 'cc.RichText',\r\n    CC_EDIT_BOX: 'cc.EditBox'\r\n}\r\n\r\n/**\r\n *  [VM-Label]\r\n *  专门处理 Label 相关 的组件，如 ccLabel,ccRichText,ccEditBox\r\n *  可以使用模板化的方式将数据写入,可以处理字符串格式等\r\n *  todo 加入stringFormat 可以解析转换常见的字符串格式\r\n */\r\n@ccclass\r\n@executeInEditMode\r\n@menu('ModelViewer/VM-Label(文本VM)')\r\n@help('https://gitee.com/dgflash/oops-framework/blob/master/doc/mvvm/VMLabel.md')\r\nexport default class VMLabel extends VMBase {\r\n    @property({\r\n        tooltip: '是否启用模板代码,只能在运行时之前设置,\\n将会动态解析模板语法 {{0}},并且自动设置监听的路径'\r\n    })\r\n    templateMode: boolean = false;\r\n\r\n    @property({\r\n        visible() {\r\n            // @ts-ignore\r\n            return this.templateMode === false;\r\n        }\r\n    })\r\n    watchPath: string = '';\r\n\r\n    @property({\r\n        readonly: true\r\n    })\r\n    private labelType: string = LABEL_TYPE.CC_LABEL;\r\n\r\n    @property({\r\n        type: [CCString],\r\n        visible() {\r\n            // @ts-ignore\r\n            return this.templateMode === true;\r\n        }\r\n    })\r\n    /** 按照匹配参数顺序保存的 path 数组 （固定） */\r\n    protected watchPathArr: string[] = [];\r\n\r\n    /** 按照路径参数顺序保存的 值的数组（固定）*/\r\n    protected templateValueArr: any[] = [];\r\n\r\n    /** 保存着字符模板格式的数组 (只会影响显示参数) */\r\n    private templateFormatArr: string[] = [];\r\n\r\n    /** 源字符串 */\r\n    private originText: string | null = null;\r\n\r\n    onRestore() {\r\n        this.checkLabel();\r\n    }\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n        this.checkLabel();\r\n\r\n        if (VMEnv.editor) return;\r\n\r\n        if (this.templateMode) {\r\n            this.originText = this.getLabelValue();\r\n            this.parseTemplate();\r\n        }\r\n    }\r\n\r\n    start() {\r\n        if (VMEnv.editor) return;\r\n\r\n        this.onValueInit();\r\n    }\r\n\r\n    // 解析模板 获取初始格式化字符串格式 的信息\r\n    parseTemplate() {\r\n        let regexAll = /\\{\\{(.+?)\\}\\}/g;                // 匹配： 所有的{{value}}\r\n        let regex = /\\{\\{(.+?)\\}\\}/;                    // 匹配： {{value}} 中的 value\r\n        let res = this.originText!.match(regexAll);     // 匹配结果数组\r\n        if (res == null) return;\r\n        for (let i = 0; i < res.length; i++) {\r\n            const e = res[i];\r\n            let arr = e.match(regex);\r\n            let matchName = arr![1];\r\n            // let paramIndex = parseInt(matchName) || 0;\r\n            let matchInfo = matchName.split(':')[1] || '';\r\n            this.templateFormatArr[i] = matchInfo;\r\n        }\r\n    }\r\n\r\n    /**获取解析字符串模板后得到的值 */\r\n    getReplaceText() {\r\n        if (!this.originText) return \"\";\r\n        let regexAll = /\\{\\{(.+?)\\}\\}/g;                    // 匹配： 所有的{{value}}\r\n        let regex = /\\{\\{(.+?)\\}\\}/;                        // 匹配： {{value}} 中的 value\r\n        let res = this.originText.match(regexAll);          // 匹配结果数组 [{{value}}，{{value}}，{{value}}]\r\n        if (res == null) return '';                         // 未匹配到文本\r\n        let str = this.originText;                          // 原始字符串模板 \"name:{{0}} 或 name:{{0:fix2}}\"\r\n\r\n        for (let i = 0; i < res.length; i++) {\r\n            const e = res[i];\r\n            let getValue;\r\n            let arr = e.match(regex);                       // 匹配到的数组 [{{value}}, value]\r\n            let indexNum = parseInt(arr![1] || '0') || 0;   // 取出数组的 value 元素 转换成整数\r\n            let format = this.templateFormatArr[i];         // 格式化字符 的 配置参数\r\n            getValue = this.templateValueArr[indexNum];\r\n            str = str.replace(e, this.getValueFromFormat(getValue, format));//从路径缓存值获取数据\r\n        }\r\n        return str;\r\n    }\r\n\r\n    /** 格式化字符串 */\r\n    getValueFromFormat(value: number | string, format: string): string {\r\n        return StringFormatFunction.deal(value, format);\r\n    }\r\n\r\n    /** 初始化获取数据 */\r\n    onValueInit() {\r\n        //更新信息\r\n        if (this.templateMode === false) {\r\n            this.setLabelValue(this.VM.getValue(this.watchPath)); //\r\n        }\r\n        else {\r\n            let max = this.watchPathArr.length;\r\n            for (let i = 0; i < max; i++) {\r\n                this.templateValueArr[i] = this.VM.getValue(this.watchPathArr[i], '?');\r\n            }\r\n            this.setLabelValue(this.getReplaceText()); // 重新解析\r\n        }\r\n    }\r\n\r\n    /** 监听数据发生了变动的情况 */\r\n    onValueChanged(n: any, o: any, pathArr: string[]) {\r\n        if (this.templateMode === false) {\r\n            this.setLabelValue(n);\r\n        }\r\n        else {\r\n            let path = pathArr.join('.');\r\n            // 寻找缓存位置\r\n            let index = this.watchPathArr.findIndex(v => v === path);\r\n\r\n            if (index >= 0) {\r\n                //如果是所属的路径，就可以替换文本了\r\n                this.templateValueArr[index] = n;          // 缓存值\r\n                this.setLabelValue(this.getReplaceText()); // 重新解析文本\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    setLabelValue(value: string) {\r\n        var component: any = this.getComponent(this.labelType);\r\n        component.string = value + '';\r\n    }\r\n\r\n    getLabelValue(): string {\r\n        var component: any = this.getComponent(this.labelType);\r\n        return component.string;\r\n    }\r\n\r\n    private checkLabel() {\r\n        let checkArray = [\r\n            'cc.Label',\r\n            'cc.RichText',\r\n            'cc.EditBox',\r\n        ];\r\n\r\n        for (let i = 0; i < checkArray.length; i++) {\r\n            const e = checkArray[i];\r\n            let comp = this.node.getComponent(e);\r\n            if (comp) {\r\n                this.labelType = e;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        error('没有挂载任何label组件');\r\n\r\n        return false;\r\n    }\r\n}\r\n"]}