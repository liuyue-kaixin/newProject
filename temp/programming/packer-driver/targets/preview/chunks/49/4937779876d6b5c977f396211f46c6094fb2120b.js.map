{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/ccProject/assets/script/battle/demos/collisions/demo2d.ts"],"names":["CCInteger","Component","Prefab","Quat","Vec2","Vec3","_decorator","clamp","instantiate","Config","cCollider","cObject","ccclass","property","tempPos","tempRot","demo2d","objects","boxNum","sphereNum","resetRotation","length","i","obj","setRotation","IDENTITY","randomRotation","fromEuler","Math","random","onDestroy","inst","reset","addObjects","num","prefab","type","node","addChild","x","world","y","z","position","object","getComponent","angle","PI","speed","velocity","cos","sin","name","isRotate","push","worldManager","dt","maxSpeed","round","box","maxNum","max","sphere","set","getPosition","abs","setPosition","remove","destroy","splice","update"],"mappings":"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","sourcesContent":["import { CCInteger, Component, Prefab, Quat, Vec2, Vec3, _decorator, clamp, instantiate } from 'cc';\nimport { Config } from './Config';\nimport { cCollider } from '../../collision/Collider';\nimport { cObject } from '../../collision/Object';\nimport { ShapeType } from '../../collision/Shape';\nconst { ccclass, property } = _decorator;\n\n\nconst tempPos = new Vec3();\nconst tempRot = new Quat();\n\n\n@ccclass('demo2d')\nexport class demo2d extends Component {\n\n    @property(Prefab)\n    box: Prefab = null;\n\n    @property(Prefab)\n    sphere: Prefab = null;\n\n    @property(CCInteger)\n    capacity: number = 1024;\n\n    @property(CCInteger)\n    speed: number = 100;\n\n    @property(Vec2)\n    world: Vec2 = new Vec2(960, 640)\n\n    objects: Array<cObject> = [];\n\n    boxNum: number = 0;\n    sphereNum: number = 0;\n\n\n    resetRotation(): void {\n      \n        let objects = this.objects;\n        let length = objects.length;\n        for (let i = 0; i < length; i++) {\n\n            let obj = objects[i];\n            obj.setRotation(Quat.IDENTITY);\n        }\n\n    }\n\n    randomRotation(): void {\n        let objects = this.objects;\n        let length = objects.length;\n        for (let i = 0; i < length; i++) {\n            let obj = objects[i];\n            Quat.fromEuler(tempRot,0,0,Math.random()*360);\n            obj.setRotation(tempRot);//更新节点旋转\n        }\n    }\n\n    onDestroy(){\n        \n        this.boxNum = 0;\n        this.sphereNum = 0;\n        this.objects.length = 0;\n       \n        cCollider.inst.reset(); //重置复用\n    \n    }\n\n\n    addObjects(num: number, prefab: Prefab,type:string) {\n\n        for (let i = 0; i < num; i++) {\n\n            let node = instantiate(prefab);\n            this.node.addChild(node);\n\n            tempPos.x = (Math.random() - 0.5) * this.world.x;\n            tempPos.y = (Math.random() - 0.5) * this.world.y;\n            tempPos.z = 0;\n            node.position = tempPos; //更新位置\n\n\n            let object = node.getComponent(cObject);\n            let angle = (Math.random() * Math.PI * 2);\n            let speed = this.speed * (Math.random() * 0.9 + 0.1);\n            object.velocity.x = Math.cos(angle) * speed;\n            object.velocity.y = Math.sin(angle) * speed;\n            object.velocity.z = 0;\n            object.name = type;\n\n            if(Config.isRotate){\n                //开启旋转检测\n                Quat.fromEuler(tempRot,0,0,Math.random()*360);\n                object.setRotation(tempRot);//更新节点旋转\n            }\n\n            this.objects.push(object);\n        }\n    }\n\n\n    worldManager(dt:number){\n            //控制全局速度      \n            dt *= Config.maxSpeed;\n        \n            //动态增加 box \n            let boxNum = Math.round(Config.box * Config.maxNum);\n            if (boxNum > this.boxNum) {\n                let max =  clamp(boxNum - this.boxNum,0,20); //分帧\n                this.addObjects(max, this.box,'1');\n                this.boxNum+= max;\n            }\n            \n            //动态增加 sphere\n            let sphereNum = Math.round(Config.sphere * Config.maxNum);\n            if (sphereNum > this.sphereNum) {\n                let max =  clamp(sphereNum - this.sphereNum,0,20);//分帧\n                this.addObjects(max, this.sphere,'2');\n                this.sphereNum+=max;\n            }\n    \n    \n            let objects = this.objects;\n            for (let i = 0; i < objects.length; i++) {\n    \n                let obj = objects[i];\n                let velocity = obj.velocity;\n                tempPos.set(obj.getPosition());\n    \n    \n                if (Math.abs(tempPos.x + velocity.x * dt) > this.world.x / 2) {\n                    velocity.x = -velocity.x;\n                }\n    \n                if (Math.abs(tempPos.y + velocity.y * dt) > this.world.y / 2) {\n                    velocity.y = -velocity.y;\n                }\n    \n                // if (Math.abs(tempPos.z + velocity.z * dt) > HEIGHT / 2) {\n                //     velocity.z = -velocity.z;\n                // }    \n    \n                tempPos.x += velocity.x * dt;\n                tempPos.y += velocity.y * dt;\n                tempPos.z += velocity.z * dt;\n    \n                //更新节点位置\n                obj.setPosition(tempPos);\n                \n                \n    \n                //动态删除box\n                if (boxNum < this.boxNum) {\n                    if(obj.name == '1'){\n                        \n                        //回收body删除node\n                        obj.remove(true).destroy(); \n                        objects.splice(i--,1);\n                        this.boxNum--;\n                    } \n                }\n    \n                 //动态删除Sphere\n                if (sphereNum < this.sphereNum) {\n                    if(obj.name == '2'){\n                        \n                        //回收body删除node\n                        obj.remove(true).destroy(); \n                        objects.splice(i--,1);\n                        this.sphereNum--;\n                    } \n                }\n    \n            }\n    }\n\n    update(dt: number) {\n        this.worldManager(dt);\n        cCollider.inst.update(dt);\n    }\n}\n\n"]}