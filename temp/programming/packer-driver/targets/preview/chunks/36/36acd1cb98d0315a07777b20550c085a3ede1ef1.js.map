{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/model-view/ui/BhvButtonGroup.ts"],"names":["Button","color","Component","Enum","EventHandler","SpriteFrame","_decorator","ccclass","property","menu","PARAM_TYPE","BhvButtonGroup","type","Transition","visible","transition","COLOR","SPRITE","SCALE","tooltip","readonly","onLoad","node","children","forEach","nodeIndex","comp","getComponent","addComponent","touchEvents","event","hd","component","EventHandler_component","handler","target","paramType","CHILDREN_INDEX","customEventData","toString","name","clickEvents","push","NONE"],"mappings":"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","sourcesContent":["import { Button, color, Color, Component, Enum, EventHandler, SpriteFrame, _decorator } from \"cc\";\r\n\r\nconst { ccclass, property, menu } = _decorator;\r\n\r\nenum PARAM_TYPE {\r\n    CHILDREN_INDEX,\r\n    CHILDREN_NAME\r\n}\r\n\r\n/**\r\n * 群体事件，适合绑定节点组的回调信息\r\n * 将该组件的所处节点的所有子节点，绑定相同的回调对象，并将组件名设置到customEventData属性中\r\n */\r\n@ccclass\r\n@menu(\"添加特殊行为/UI/Button Group(一组按钮控制)\")\r\nexport class BhvButtonGroup extends Component {\r\n    @property({\r\n        type: Enum(Button.Transition)\r\n    })\r\n    transition: number = Button.Transition.NONE;\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.transition === Button.Transition.COLOR\r\n        }\r\n    })\r\n    hoverColor: Color = color(255, 255, 255);\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.transition === Button.Transition.COLOR\r\n        }\r\n    })\r\n    normalColor: Color = color(214, 214, 214);\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.transition === Button.Transition.COLOR;\r\n        }\r\n    })\r\n    pressedColor: Color = color(211, 211, 211);\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.transition === Button.Transition.COLOR;\r\n        }\r\n    })\r\n    disabledColor: Color = color(124, 124, 124);\r\n\r\n    @property({\r\n        type: SpriteFrame,\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.transition === Button.Transition.SPRITE;\r\n        }\r\n    })\r\n    normalSprite: SpriteFrame | null = null;\r\n\r\n    @property({\r\n        type: SpriteFrame,\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.transition === Button.Transition.SPRITE;\r\n        }\r\n    })\r\n    pressedSprite: SpriteFrame | null = null;\r\n\r\n    @property({\r\n        type: SpriteFrame,\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.transition === Button.Transition.SPRITE;\r\n        }\r\n    })\r\n    hoverSprite: SpriteFrame | null = null;\r\n\r\n    @property({\r\n        type: SpriteFrame,\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.transition === Button.Transition.SPRITE;\r\n        }\r\n    })\r\n    disabledSprite: SpriteFrame | null = null;\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.transition === Button.Transition.SCALE || this.transition === Button.Transition.COLOR;\r\n        }\r\n    })\r\n    duration: number = 1.0;\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.transition === Button.Transition.SCALE;\r\n        }\r\n    })\r\n    zoomScale: number = 1.1;\r\n\r\n    @property({\r\n        type: Enum(PARAM_TYPE)\r\n    })\r\n    paramType: PARAM_TYPE = PARAM_TYPE.CHILDREN_INDEX;\r\n\r\n    @property({\r\n        type: [EventHandler]\r\n    })\r\n    touchEvents: EventHandler[] = [];\r\n\r\n    @property({\r\n        tooltip: '规避3.x引擎BUG，EventHandler.component位为空导致找不到触发事件的脚本名的问题',\r\n        readonly: true\r\n    })\r\n    EventHandler_component: string = \"VMModify\";\r\n\r\n    onLoad() {\r\n        this.node.children.forEach((node, nodeIndex) => {\r\n            let comp: Button = node.getComponent(Button)!;\r\n            if (comp == null) comp = node.addComponent(Button);\r\n\r\n            // 同步属性\r\n\r\n            // comp.target = node;\r\n            // comp.transition = this.transition;\r\n            // comp.zoomScale = this.zoomScale;\r\n\r\n            // comp.disabledSprite = this.disabledSprite;\r\n            // comp.hoverSprite = this.hoverSprite;\r\n            // comp.normalSprite = this.normalSprite;\r\n            // comp.pressedSprite = this.pressedSprite;\r\n\r\n            // comp.hoverColor = this.hoverColor;\r\n            // comp.normalColor = this.normalColor;\r\n            // comp.pressedColor = this.pressedColor;\r\n            // comp.disabledColor = this.disabledColor;\r\n\r\n            // 绑定回调事件\r\n            this.touchEvents.forEach((event) => {\r\n                // 克隆数据，每个节点获取的都是不同的回调\r\n                let hd = new EventHandler();//copy对象\r\n                hd.component = event.component == \"\" ? this.EventHandler_component : event.component;\r\n                hd.handler = event.handler;\r\n                hd.target = event.target;\r\n                if (this.paramType === PARAM_TYPE.CHILDREN_INDEX) {\r\n                    hd.customEventData = nodeIndex.toString();\r\n                }\r\n                else {\r\n                    hd.customEventData = node.name;\r\n                }\r\n                comp.clickEvents.push(hd);\r\n            })\r\n        });\r\n    }\r\n}\r\n"]}