{"version":3,"sources":["file:///Volumes/SSD%201/ccProject/extensions/oops-plugin-framework/assets/libs/animator-effect/2d/Ambilight.ts"],"names":["CCInteger","Component","Sprite","_decorator","ccclass","property","Ambilight","_start","_material","max","_max","value","update","dt","node","getComponent","getSharedMaterial","active","_setShaderTime","start","setProperty"],"mappings":";;;;;;;;;;;;;;;;AACSA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,S,OAAAA,S;AAAqBC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,U,OAAAA,U;;;;;;;;;OAC3C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBF,U;;2BAIjBG,S,WAFZF,OAAO,CAAC,WAAD,C,UAKHC,QAAQ,CAACL,SAAD,C,2BALb,MAEaM,SAFb,SAE+BL,SAF/B,CAEyC;AAAA;AAAA;;AAAA;;AAAA,eAW7BM,MAX6B,GAWpB,CAXoB;AAAA,eAYrCC,SAZqC;AAAA;;AAI9B,YAAHC,GAAG,GAAW;AACd,iBAAO,KAAKC,IAAZ;AACH;;AACM,YAAHD,GAAG,CAACE,KAAD,EAAgB;AACnB,eAAKD,IAAL,GAAYC,KAAZ;AACH;;AAKDC,QAAAA,MAAM,CAACC,EAAD,EAAa;AACf,eAAKL,SAAL,GAAiB,KAAKM,IAAL,CAAUC,YAAV,CAAuBb,MAAvB,EAAgCc,iBAAhC,CAAkD,CAAlD,CAAjB;;AAEA,cAAI,KAAKF,IAAL,CAAUG,MAAV,IAAoB,KAAKT,SAA7B,EAAwC;AACpC,iBAAKU,cAAL,CAAoBL,EAApB;AACH;AACJ;;AAEOK,QAAAA,cAAc,CAACL,EAAD,EAAa;AAC/B,cAAIM,KAAK,GAAG,KAAKZ,MAAjB;AACA,cAAIY,KAAK,GAAG,KAAKV,GAAjB,EAAsBU,KAAK,GAAG,CAAR;AACtBA,UAAAA,KAAK,IAAI,KAAT;;AACA,eAAKX,SAAL,CAAeY,WAAf,CAA2B,OAA3B,EAAoCD,KAApC;;AAEA,eAAKZ,MAAL,GAAcY,KAAd;AACH;;AA7BoC,O,uEACpCd,Q;;;;;iBACc,C","sourcesContent":["\r\nimport { CCInteger, Component, Material, Sprite, _decorator } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Ambilight')\r\n/** 流光效果 */\r\nexport class Ambilight extends Component {\r\n    @property\r\n    _max: number = 1;\r\n    @property(CCInteger)\r\n    get max(): number {\r\n        return this._max;\r\n    }\r\n    set max(value: number) {\r\n        this._max = value;\r\n    }\r\n\r\n    private _start = 0;\r\n    _material !: Material;\r\n\r\n    update(dt: number) {\r\n        this._material = this.node.getComponent(Sprite)!.getSharedMaterial(0)!;\r\n\r\n        if (this.node.active && this._material) {\r\n            this._setShaderTime(dt);\r\n        }\r\n    }\r\n\r\n    private _setShaderTime(dt: number) {\r\n        let start = this._start;\r\n        if (start > this.max) start = 0;\r\n        start += 0.015;\r\n        this._material.setProperty('speed', start);\r\n\r\n        this._start = start;\r\n    }\r\n}\r\n\r\n"]}