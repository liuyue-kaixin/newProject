{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/core/common/timer/Timer.ts"],"names":["Timer","elapsedTime","_elapsedTime","step","_step","progress","constructor","callback","update","dt","call","reset","stop"],"mappings":";;;iBAqBaA,K;;;;;;;;;;;;;AArBb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;uBACaA,K,GAAN,MAAMA,KAAN,CAAY;AAKA,YAAXC,WAAW,GAAW;AACtB,iBAAO,KAAKC,YAAZ;AACH;;AAGD;AACQ,YAAJC,IAAI,GAAW;AACf,iBAAO,KAAKC,KAAZ;AACH;;AACO,YAAJD,IAAI,CAACA,IAAD,EAAe;AACnB,eAAKC,KAAL,GAAaD,IAAb,CADmB,CACoB;;AACvC,eAAKD,YAAL,GAAoB,CAApB,CAFmB,CAEoB;AAC1C;;AAEW,YAARG,QAAQ,GAAW;AACnB,iBAAO,KAAKH,YAAL,GAAoB,KAAKE,KAAhC;AACH;;AAEDE,QAAAA,WAAW,CAACH,IAAD,EAAmB;AAAA,cAAlBA,IAAkB;AAAlBA,YAAAA,IAAkB,GAAH,CAAG;AAAA;;AAAA,eAtB9BI,QAsB8B,GAtBF,IAsBE;AAAA,eApBtBL,YAoBsB,GApBC,CAoBD;AAAA,eAdtBE,KAcsB,GAdN,CAAC,CAcK;AAC1B,eAAKD,IAAL,GAAYA,IAAZ;AACH;;AAEDK,QAAAA,MAAM,CAACC,EAAD,EAAa;AACf,cAAI,KAAKN,IAAL,IAAa,CAAjB,EAAoB,OAAO,KAAP;AAEpB,eAAKD,YAAL,IAAqBO,EAArB;;AAEA,cAAI,KAAKP,YAAL,IAAqB,KAAKE,KAA9B,EAAqC;AAAA;;AACjC,iBAAKF,YAAL,IAAqB,KAAKE,KAA1B;AACA,mCAAKG,QAAL,4BAAeG,IAAf,CAAoB,IAApB;AACA,mBAAO,IAAP;AACH;;AACD,iBAAO,KAAP;AACH;;AAEDC,QAAAA,KAAK,GAAG;AACJ,eAAKT,YAAL,GAAoB,CAApB;AACH;;AAEDU,QAAAA,IAAI,GAAG;AACH,eAAKV,YAAL,GAAoB,CAApB;AACA,eAAKC,IAAL,GAAY,CAAC,CAAb;AACH;;AA/Cc,O","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2023-01-19 11:09:38\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2023-01-19 14:28:05\r\n */\r\n\r\n/** \r\n * 定时跳动组件 \r\n * @example\r\n    export class Test extends Component {\r\n        // 创建一个定时跳动组件\r\n        private timer: Timer = new Timer(1);\r\n\r\n        update(dt: number) {\r\n            if (this.timer.update(this.dt)) {\r\n                console.log(每一秒触发一次);\r\n            }\r\n        }\r\n    }\r\n */\r\nexport class Timer {\r\n    callback: Function | null = null;\r\n\r\n    private _elapsedTime: number = 0;\r\n\r\n    get elapsedTime(): number {\r\n        return this._elapsedTime;\r\n    }\r\n\r\n    private _step: number = -1;\r\n    /** 触发间隔时间（秒） */\r\n    get step(): number {\r\n        return this._step;\r\n    }\r\n    set step(step: number) {\r\n        this._step = step;                     // 每次修改时间\r\n        this._elapsedTime = 0;                 // 逝去时间\r\n    }\r\n\r\n    get progress(): number {\r\n        return this._elapsedTime / this._step;\r\n    }\r\n\r\n    constructor(step: number = 0) {\r\n        this.step = step;\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (this.step <= 0) return false;\r\n\r\n        this._elapsedTime += dt;\r\n\r\n        if (this._elapsedTime >= this._step) {\r\n            this._elapsedTime -= this._step;\r\n            this.callback?.call(this);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    reset() {\r\n        this._elapsedTime = 0;\r\n    }\r\n\r\n    stop() {\r\n        this._elapsedTime = 0;\r\n        this.step = -1;\r\n    }\r\n}"]}