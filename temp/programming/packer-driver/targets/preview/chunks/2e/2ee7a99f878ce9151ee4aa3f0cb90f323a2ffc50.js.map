{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/libs/network/NetInterface.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;;AAcA;;AAYA;;AAMA;;AAOA;;AAqBA;;AAYA","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2022-09-01 18:00:28\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2022-09-09 18:31:18\r\n */\r\n\r\n/*\r\n * 网络相关接口定义\r\n */\r\nexport type NetData = (string | ArrayBufferLike | Blob | ArrayBufferView);\r\nexport type NetCallFunc = (data: any) => void;\r\n\r\n/** 请求协议 */\r\nexport interface IRequestProtocol {\r\n    /** 协议命令编号 */\r\n    cmd: string,\r\n    /** 回调方法名 */\r\n    callback?: string,\r\n    /** 是否压缩 */\r\n    isCompress: boolean,\r\n    /** 渠道编号 */\r\n    channelid: number,\r\n    /** 消息内容 */\r\n    data?: any;\r\n}\r\n\r\n/** 响应协议 */\r\nexport interface IResponseProtocol {\r\n    /** 响应协议状态码 */\r\n    code: number,\r\n    /** 数据是否压缩 */\r\n    isCompress: boolean,\r\n    /** 协议数据 */\r\n    data?: any,\r\n    /** 协议回调方法名 */\r\n    callback?: string\r\n}\r\n\r\n/** 回调对象 */\r\nexport interface CallbackObject {\r\n    target: any,                // 回调对象，不为null时调用target.callback(xxx)\r\n    callback: NetCallFunc,      // 回调函数\r\n}\r\n\r\n/** 请求对象 */\r\nexport interface RequestObject {\r\n    buffer: NetData,                   // 请求的Buffer\r\n    rspCmd: string,                    // 等待响应指令\r\n    rspObject: CallbackObject | null,  // 等待响应的回调对象\r\n}\r\n\r\n/** 协议辅助接口 */\r\nexport interface IProtocolHelper {\r\n    /** 返回包头长度 */\r\n    getHeadlen(): number;\r\n    /** 返回一个心跳包 */\r\n    getHearbeat(): NetData;\r\n    /** 返回整个包的长度 */\r\n    getPackageLen(msg: NetData): number;\r\n    /** 检查包数据是否合法（避免客户端报错崩溃） */\r\n    checkResponsePackage(msg: IResponseProtocol): boolean;\r\n    /** 处理请求包数据 */\r\n    handlerRequestPackage(reqProtocol: IRequestProtocol): string;\r\n    /** 处理响应包数据 */\r\n    handlerResponsePackage(respProtocol: IResponseProtocol): boolean;\r\n    /** 返回包的id或协议类型 */\r\n    getPackageId(msg: IResponseProtocol): string;\r\n}\r\n\r\nexport type SocketFunc = (event: any) => void;\r\nexport type MessageFunc = (msg: NetData) => void;\r\n\r\n/** Socket接口 */\r\nexport interface ISocket {\r\n    onConnected: SocketFunc | null;         // 连接回调\r\n    onMessage: MessageFunc | null;          // 消息回调\r\n    onError: SocketFunc | null;             // 错误回调\r\n    onClosed: SocketFunc | null;            // 关闭回调\r\n\r\n    connect(options: any): any;                     // 连接接口\r\n    send(buffer: NetData): number;                  // 数据发送接口\r\n    close(code?: number, reason?: string): void;    // 关闭接口\r\n}\r\n\r\n/** 网络提示接口 */\r\nexport interface INetworkTips {\r\n    connectTips(isShow: boolean): void;\r\n    reconnectTips(isShow: boolean): void;\r\n    requestTips(isShow: boolean): void;\r\n    responseErrorCode(code: number): void;\r\n}"]}