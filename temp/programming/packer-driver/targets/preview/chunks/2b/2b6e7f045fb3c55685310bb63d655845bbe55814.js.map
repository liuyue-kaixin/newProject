{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/animator/core/AnimatorController.ts"],"names":["AnimatorController","error","AnimatorParams","AnimatorState","curState","_curState","params","_params","states","_states","constructor","player","json","_jsonData","_animator","_anyState","_changeCount","animCompleteState","animComplete","Map","parameters","init","length","defaultState","anyState","i","state","set","name","changeState","updateState","checkAndTrans","updateAnimator","loop","resetAllAutoTrigger","onAnimationComplete","play","stateName","has","oldState","get","onStateChange"],"mappings":"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","sourcesContent":["import { error } from \"cc\";\r\nimport AnimatorBase from \"./AnimatorBase\";\r\nimport AnimatorParams from \"./AnimatorParams\";\r\nimport AnimatorState from \"./AnimatorState\";\r\n\r\n/**\r\n * 状态机控制类\r\n */\r\nexport default class AnimatorController {\r\n    private _jsonData: any = null;\r\n    private _animator: AnimatorBase = null!;\r\n\r\n    private _params: AnimatorParams = null!;\r\n    private _states: Map<string, AnimatorState> = null!;\r\n    private _anyState: AnimatorState = null!;\r\n    private _curState: AnimatorState = null!;\r\n\r\n    /** 状态切换次数 */\r\n    private _changeCount: number = 0;\r\n    /** 对应animComplete的状态 */\r\n    public animCompleteState: AnimatorState = null!;\r\n    /** 动画播放完毕的标记 */\r\n    public animComplete: boolean = false;\r\n    /** 当前运行的状态 */\r\n    public get curState(): AnimatorState { return this._curState; }\r\n    public get params(): AnimatorParams { return this._params; }\r\n    public get states(): Map<string, AnimatorState> { return this._states }\r\n\r\n    constructor(player: AnimatorBase, json: any) {\r\n        this._animator = player;\r\n        this._jsonData = json;\r\n        this._states = new Map<string, AnimatorState>();\r\n        this._params = new AnimatorParams(json.parameters);\r\n        this.init(json);\r\n    }\r\n\r\n    /**\r\n     * 初始化状态机所有动画状态\r\n     */\r\n    private init(json: any) {\r\n        if (json.states.length <= 0) {\r\n            error(`[AnimatorController.init] 状态机json错误`);\r\n            return;\r\n        }\r\n\r\n        let defaultState: string = json.defaultState;\r\n        this._anyState = new AnimatorState(json.anyState, this);\r\n        for (let i = 0; i < json.states.length; i++) {\r\n            let state: AnimatorState = new AnimatorState(json.states[i], this);\r\n            this._states.set(state.name, state);\r\n        }\r\n        this.changeState(defaultState);\r\n    }\r\n\r\n    private updateState() {\r\n        this._curState.checkAndTrans();\r\n        if (this._curState !== this._anyState && this._anyState !== null) {\r\n            this._anyState.checkAndTrans();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新状态机逻辑\r\n     */\r\n    public updateAnimator() {\r\n        // 重置计数\r\n        this._changeCount = 0;\r\n\r\n        this.updateState();\r\n\r\n        // 重置动画完成标记\r\n        if (this.animComplete && this.animCompleteState.loop) {\r\n            this.animComplete = false;\r\n        }\r\n        // 重置autoTrigger\r\n        this.params.resetAllAutoTrigger();\r\n    }\r\n\r\n    public onAnimationComplete() {\r\n        this.animComplete = true;\r\n        this.animCompleteState = this._curState;\r\n        // cc.log(`animation complete: ${this._curState.name}`);\r\n    }\r\n\r\n    /**\r\n     * 无视条件直接跳转状态\r\n     * @param 状态名\r\n     */\r\n    public play(stateName: string) {\r\n        if (!this._states.has(stateName) || this._curState.name === stateName) {\r\n            return;\r\n        }\r\n\r\n        // 重置动画完成标记\r\n        this.animComplete = false;\r\n        this.changeState(stateName);\r\n    }\r\n\r\n    /**\r\n     * 切换动画状态\r\n     */\r\n    public changeState(stateName: string) {\r\n        this._changeCount++;\r\n        if (this._changeCount > 1000) {\r\n            error('[AnimatorController.changeState] error: 状态切换递归调用超过1000次，transition设置可能出错!');\r\n            return;\r\n        }\r\n\r\n        if (this._states.has(stateName) && (this._curState === null || this._curState.name !== stateName)) {\r\n            let oldState = this._curState;\r\n            this._curState = this._states.get(stateName)!;\r\n\r\n            this._animator.onStateChange(oldState, this._curState);\r\n\r\n            this.updateState();\r\n        }\r\n        else {\r\n            error(`[AnimatorController.changeState] error state: ${stateName}`);\r\n        }\r\n    }\r\n}\r\n"]}