{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/core/common/audio/AudioMusic.ts"],"names":["AudioClip","AudioSource","_decorator","error","oops","ccclass","menu","AudioMusic","onComplete","_progress","_url","_isPlay","progress","duration","currentTime","value","load","url","callback","res","err","data","playing","stop","release","enabled","clip","play","update","dt"],"mappings":";;;;;;;;;;;;;;;;AAMSA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,K,OAAAA,K;;AACpCC,MAAAA,I,iBAAAA,I;;;;;;AAPT;AACA;AACA;AACA;AACA;AACA;;;;;OAGM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAoBJ,U;AAE1B;;4BAEaK,U,WADZF,OAAO,CAAC,YAAD,C,gBAAR,MACaE,UADb,SACgCN,WADhC,CAC4C;AAAA;AAAA;;AACxC;AADwC,eAExCO,UAFwC,GAEV,IAFU;AAAA,eAIhCC,SAJgC,GAIZ,CAJY;AAAA,eAKhCC,IALgC,GAKjB,IALiB;AAAA,eAMhCC,OANgC,GAMb,KANa;AAAA;;AASxC;AACY,YAARC,QAAQ,GAAW;AACnB,cAAI,KAAKC,QAAL,GAAgB,CAApB,EACI,KAAKJ,SAAL,GAAiB,KAAKK,WAAL,GAAmB,KAAKD,QAAzC;AACJ,iBAAO,KAAKJ,SAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACgB,YAARG,QAAQ,CAACG,KAAD,EAAgB;AACxB,eAAKN,SAAL,GAAiBM,KAAjB;AACA,eAAKD,WAAL,GAAmBC,KAAK,GAAG,KAAKF,QAAhC;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWG,QAAAA,IAAI,CAACC,GAAD,EAAcC,QAAd,EAAmC;AAC1C;AAAA;AAAA,4BAAKC,GAAL,CAASH,IAAT,CAAcC,GAAd,EAAmBjB,SAAnB,EAA8B,CAACoB,GAAD,EAAoBC,IAApB,KAAwC;AAClE,gBAAID,GAAJ,EAAS;AACLjB,cAAAA,KAAK,CAACiB,GAAD,CAAL;AACH;;AAED,gBAAI,KAAKE,OAAT,EAAkB;AACd,mBAAKX,OAAL,GAAe,KAAf;AACA,mBAAKY,IAAL;AACH;;AAED,gBAAI,KAAKb,IAAT,EAAe;AACX;AAAA;AAAA,gCAAKS,GAAL,CAASK,OAAT,CAAiB,KAAKd,IAAtB;AACH;;AAED,iBAAKe,OAAL,GAAe,IAAf;AACA,iBAAKC,IAAL,GAAYL,IAAZ,CAfkE,CAiBlE;;AACAH,YAAAA,QAAQ,IAAIA,QAAQ,EAApB;AAEA,iBAAKS,IAAL;AAEA,iBAAKjB,IAAL,GAAYO,GAAZ;AACH,WAvBD;AAwBH;AAED;;;AACAW,QAAAA,MAAM,CAACC,EAAD,EAAa;AACf,cAAI,KAAKf,WAAL,GAAmB,CAAvB,EAA0B;AACtB,iBAAKH,OAAL,GAAe,IAAf;AACH;;AAED,cAAI,KAAKA,OAAL,IAAgB,KAAKW,OAAL,IAAgB,KAApC,EAA2C;AACvC,iBAAKX,OAAL,GAAe,KAAf;AACA,iBAAKc,OAAL,GAAe,KAAf;AACA,iBAAKjB,UAAL,IAAmB,KAAKA,UAAL,EAAnB;AACH;AACJ;AAED;;;AACAgB,QAAAA,OAAO,GAAG;AACN,cAAI,KAAKd,IAAT,EAAe;AACX;AAAA;AAAA,8BAAKS,GAAL,CAASK,OAAT,CAAiB,KAAKd,IAAtB;AACA,iBAAKA,IAAL,GAAY,IAAZ;AACH;AACJ;;AA3EuC,O","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2022-06-21 12:05:13\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2023-05-16 09:11:30\r\n */\r\nimport { AudioClip, AudioSource, _decorator, error } from 'cc';\r\nimport { oops } from '../../Oops';\r\nconst { ccclass, menu } = _decorator;\r\n\r\n/** 背景音乐 */\r\n@ccclass('AudioMusic')\r\nexport class AudioMusic extends AudioSource {\r\n    /** 背景音乐播放完成回调 */\r\n    onComplete: Function | null = null;\r\n\r\n    private _progress: number = 0;\r\n    private _url: string = null!;\r\n    private _isPlay: boolean = false;\r\n\r\n\r\n    /** 获取音乐播放进度 */\r\n    get progress(): number {\r\n        if (this.duration > 0)\r\n            this._progress = this.currentTime / this.duration;\r\n        return this._progress;\r\n    }\r\n    /**\r\n     * 设置音乐当前播放进度\r\n     * @param value     进度百分比0到1之间\r\n     */\r\n    set progress(value: number) {\r\n        this._progress = value;\r\n        this.currentTime = value * this.duration;\r\n    }\r\n\r\n    /**\r\n     * 加载音乐并播放\r\n     * @param url          音乐资源地址\r\n     * @param callback     加载完成回调\r\n     */\r\n    public load(url: string, callback?: Function) {\r\n        oops.res.load(url, AudioClip, (err: Error | null, data: AudioClip) => {\r\n            if (err) {\r\n                error(err);\r\n            }\r\n\r\n            if (this.playing) {\r\n                this._isPlay = false;\r\n                this.stop();\r\n            }\r\n\r\n            if (this._url) {\r\n                oops.res.release(this._url);\r\n            }\r\n\r\n            this.enabled = true;\r\n            this.clip = data;\r\n\r\n            // 注：事件定义在这里，是为了在播放前设置初始播放位置数据\r\n            callback && callback();\r\n\r\n            this.play();\r\n\r\n            this._url = url;\r\n        });\r\n    }\r\n\r\n    /** cc.Component 生命周期方法，验证背景音乐播放完成逻辑，建议不要主动调用 */\r\n    update(dt: number) {\r\n        if (this.currentTime > 0) {\r\n            this._isPlay = true;\r\n        }\r\n\r\n        if (this._isPlay && this.playing == false) {\r\n            this._isPlay = false;\r\n            this.enabled = false\r\n            this.onComplete && this.onComplete();\r\n        }\r\n    }\r\n\r\n    /** 释放当前背景音乐资源 */\r\n    release() {\r\n        if (this._url) {\r\n            oops.res.release(this._url);\r\n            this._url = null!;\r\n        }\r\n    }\r\n}\r\n"]}