{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/model-view/VMState.ts"],"names":["Button","CCInteger","Enum","Node","Sprite","UIOpacity","UIRenderer","_decorator","color","VMBase","VM","ccclass","property","menu","help","CONDITION","ACTION","CHILD_MODE_TYPE","VMState","tooltip","type","visible","foreachChildMode","displayName","condition","range","valueAction","NODE_OPACITY","NODE_COLOR","COMPONENT_CUSTOM","onLoad","watchNodes","length","NODE_ACTIVE","push","node","concat","children","start","enabled","onValueInit","value","getValue","watchPath","checkNodeFromValue","onValueChanged","newVar","oldVar","pathArr","forEach","index","v","foreachChildType","NODE_INDEX","name","check","conditionCheck","setNodeState","valueA","valueB","setNodesStates","checkState","nodes","n","active","NODE_VISIBLE","opacity","getComponent","addComponent","valueActionOpacity","uir","valueActionColor","comp","valueComponentName","valueComponentProperty","valueComponentActionValue","valueComponentDefaultValue","SPRITE_GRAYSCALE","sprite","grayscale","BUTTON_INTERACTABLE","interactable","a","b","cod"],"mappings":"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","sourcesContent":["import { Button, CCInteger, Color, Enum, Node, Sprite, UIOpacity, UIRenderer, _decorator, color } from 'cc';\r\nimport { VMBase } from './VMBase';\r\nimport { VM } from './ViewModel';\r\n\r\nconst { ccclass, property, menu, help } = _decorator;\r\n\r\n/** 比较条件 */\r\nenum CONDITION {\r\n    \"==\",        // 正常计算，比较 等于\r\n    \"!=\",        // 正常计算，比较 不等于\r\n    \">\",         // 正常计算，比较>\r\n    \">=\",        // 正常计算，比较>=\r\n    \"<\",         // 正常计算，比较<\r\n    \"<=\",        // 正常计算，比较>=\r\n    \"range\"      // 计算在范围内\r\n}\r\n\r\nenum ACTION {\r\n    NODE_ACTIVE,            // 满足条件的节点激活，不满足的不激活（只对子节点的激活有效果，当前节点active = false时，组件就失去效果了，如果设置当前节点可用NODE_VISIBLE代替）\r\n    NODE_VISIBLE,           // 满足条件的节点显示，不满足的不显示\r\n    NODE_OPACITY,           // 满足条件的节点改变不透明度，不满足的还原255\r\n    NODE_COLOR,             // 满足条件的节点改变颜色，不满足的恢复白色\r\n    COMPONENT_CUSTOM,       // 自定义控制组件模式\r\n    SPRITE_GRAYSCALE,       // 满足条件的节点cc.Sprite组件，纹理变黑白\r\n    BUTTON_INTERACTABLE,    // 满足条件的节点cc.BUTTON组件,\r\n}\r\n\r\nenum CHILD_MODE_TYPE {\r\n    NODE_INDEX,\r\n    NODE_NAME\r\n}\r\n\r\n/**\r\n * [VM-State]\r\n * 监听数值状态,根据数值条件设置节点是否激活\r\n */\r\n@ccclass\r\n@menu('ModelViewer/VM-State (VM状态控制)')\r\n@help('https://github.com/wsssheep/cocos_creator_mvvm_tools/blob/master/docs/VMState.md')\r\nexport default class VMState extends VMBase {\r\n    @property\r\n    watchPath: string = \"\";\r\n\r\n    @property({\r\n        tooltip: '遍历子节点,根据子节点的名字或名字转换为值，判断值满足条件 来激活'\r\n    })\r\n    foreachChildMode: boolean = false;\r\n\r\n    @property({\r\n        type: Enum(CONDITION),\r\n    })\r\n    condition: CONDITION = CONDITION[\"==\"];\r\n\r\n    @property({\r\n        type: Enum(CHILD_MODE_TYPE),\r\n        tooltip: '遍历子节点,根据子节点的名字转换为值，判断值满足条件 来激活',\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.foreachChildMode === true;\r\n        }\r\n    })\r\n    foreachChildType: CHILD_MODE_TYPE = CHILD_MODE_TYPE.NODE_INDEX;\r\n\r\n    @property({\r\n        displayName: 'Value: a',\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.foreachChildMode === false;\r\n        }\r\n    })\r\n    valueA: number = 0;\r\n\r\n    @property({\r\n        displayName: 'Value: b',\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.foreachChildMode === false && this.condition === CONDITION.range;\r\n        }\r\n    })\r\n    valueB: number = 0;\r\n\r\n    @property({\r\n        type: Enum(ACTION),\r\n        tooltip: '一旦满足条件就对节点执行操作'\r\n    })\r\n    valueAction: ACTION = ACTION.NODE_ACTIVE;\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.valueAction === ACTION.NODE_OPACITY;\r\n        },\r\n        range: [0, 255],\r\n        type: CCInteger,\r\n        displayName: 'Action Opacity'\r\n    })\r\n    valueActionOpacity: number = 0;\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.valueAction === ACTION.NODE_COLOR\r\n        },\r\n        displayName: 'Action Color'\r\n    })\r\n    valueActionColor: Color = color(155, 155, 155);\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.valueAction === ACTION.COMPONENT_CUSTOM\r\n        },\r\n        displayName: 'Component Name'\r\n    })\r\n    valueComponentName: string = '';\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.valueAction === ACTION.COMPONENT_CUSTOM\r\n        },\r\n        displayName: 'Component Property'\r\n    })\r\n    valueComponentProperty: string = '';\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.valueAction === ACTION.COMPONENT_CUSTOM\r\n        },\r\n        displayName: 'Default Value'\r\n    })\r\n    valueComponentDefaultValue: string = '';\r\n\r\n    @property({\r\n        visible: function () {\r\n            // @ts-ignore\r\n            return this.valueAction === ACTION.COMPONENT_CUSTOM;\r\n        },\r\n        displayName: 'Action Value'\r\n    })\r\n    valueComponentActionValue: string = '';\r\n\r\n    @property({\r\n        type: [Node],\r\n        tooltip: '需要执行条件的节点，如果不填写则默认会执行本节点以及本节点的所有子节点 的状态'\r\n    })\r\n    watchNodes: Node[] = [];\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n        // 如果数组里没有监听值，那么默认把所有子节点给监听了\r\n        if (this.watchNodes.length == 0) {\r\n            if (this.valueAction !== ACTION.NODE_ACTIVE && this.foreachChildMode === false) {\r\n                this.watchNodes.push(this.node);\r\n            }\r\n            this.watchNodes = this.watchNodes.concat(this.node.children);\r\n        }\r\n    }\r\n\r\n    start() {\r\n        if (this.enabled) {\r\n            this.onValueInit();\r\n        }\r\n    }\r\n\r\n    // 当值初始化时\r\n    protected onValueInit() {\r\n        let value = VM.getValue(this.watchPath);\r\n        this.checkNodeFromValue(value);\r\n    }\r\n\r\n    // 当值被改变时\r\n    protected onValueChanged(newVar: any, oldVar: any, pathArr: any[]) {\r\n        this.checkNodeFromValue(newVar);\r\n    }\r\n\r\n    // 检查节点值更新\r\n    private checkNodeFromValue(value: any) {\r\n        if (this.foreachChildMode) {\r\n            this.watchNodes.forEach((node, index) => {\r\n                let v = (this.foreachChildType === CHILD_MODE_TYPE.NODE_INDEX) ? index : node.name;\r\n                let check = this.conditionCheck(value, v);\r\n                // log('遍历模式', value, node.name, check);\r\n                this.setNodeState(node, check);\r\n            })\r\n        }\r\n        else {\r\n            let check = this.conditionCheck(value, this.valueA, this.valueB);\r\n            this.setNodesStates(check);\r\n        }\r\n    }\r\n\r\n    // 更新 多个节点 的 状态\r\n    private setNodesStates(checkState?: boolean) {\r\n        let nodes = this.watchNodes;\r\n        let check = checkState;\r\n        nodes.forEach((node) => {\r\n            this.setNodeState(node, check);\r\n        })\r\n    }\r\n\r\n    /** 更新单个节点的状态 */\r\n    private setNodeState(node: Node, checkState?: boolean) {\r\n        let n = this.valueAction;\r\n        let check = checkState;\r\n        switch (n) {\r\n            case ACTION.NODE_ACTIVE:\r\n                node.active = check ? true : false;\r\n                break;\r\n            case ACTION.NODE_VISIBLE: {\r\n                let opacity = node.getComponent(UIOpacity);\r\n                if (opacity == null)\r\n                    opacity = node.addComponent(UIOpacity);\r\n\r\n                if (opacity) {\r\n                    opacity.opacity = check ? 255 : 0;\r\n                }\r\n                break;\r\n            }\r\n            case ACTION.NODE_OPACITY: {\r\n                let opacity = node.getComponent(UIOpacity);\r\n                if (opacity == null)\r\n                    opacity = node.addComponent(UIOpacity);\r\n\r\n                if (opacity) {\r\n                    opacity.opacity = check ? this.valueActionOpacity : 255;\r\n                }\r\n                break;\r\n            }\r\n            case ACTION.NODE_COLOR: {\r\n                let uir = node.getComponent(UIRenderer);\r\n                if (uir) {\r\n                    uir.color = check ? this.valueActionColor : color(255, 255, 255);\r\n                }\r\n                break;\r\n            }\r\n            case ACTION.COMPONENT_CUSTOM:\r\n                let comp: any = node.getComponent(this.valueComponentName);\r\n                if (comp == null) return;\r\n                if (this.valueComponentProperty in comp) {\r\n                    comp[this.valueComponentProperty] = check ? this.valueComponentActionValue : this.valueComponentDefaultValue;\r\n                }\r\n                break;\r\n            case ACTION.SPRITE_GRAYSCALE: {\r\n                let sprite = node.getComponent(Sprite);\r\n                if (sprite) {\r\n                    sprite.grayscale = check!;\r\n                }\r\n                break;\r\n            }\r\n            case ACTION.BUTTON_INTERACTABLE: {\r\n                let sprite = node.getComponent(Button);\r\n                if (sprite) {\r\n                    sprite.interactable = check!;\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** 条件检查 */\r\n    private conditionCheck(v: any, a: any, b?: any): boolean {\r\n        let cod = CONDITION;\r\n        switch (this.condition) {\r\n            case cod[\"==\"]:\r\n                if (v == a) return true;\r\n                break;\r\n            case cod[\"!=\"]:\r\n                if (v != a) return true;\r\n                break;\r\n            case cod[\"<\"]:\r\n                if (v < a) return true;\r\n                break;\r\n            case cod[\">\"]:\r\n                if (v > a) return true;\r\n                break;\r\n            case cod[\">=\"]:\r\n                if (v >= a) return true;\r\n                break;\r\n            case cod[\"<\"]:\r\n                if (v < a) return true;\r\n                break;\r\n            case cod[\"<=\"]:\r\n                if (v <= a) return true;\r\n                break;\r\n            case cod[\"range\"]:\r\n                if (v >= a && v <= b) return true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]}