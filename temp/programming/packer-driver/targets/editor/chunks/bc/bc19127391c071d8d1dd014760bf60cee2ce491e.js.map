{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/behavior-tree/Decorator.ts"],"names":["Decorator","BehaviorTree","BTreeNode","constructor","node","getNode","setNode","start","setControl","end","run","blackboard"],"mappings":";;;uDAaaA,S;;;;;;;;;;;;;;;;;;AAPJC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,S,iBAAAA,S;;;;;;AAPT;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACA;AACA;AACA;2BACaF,S,GAAN,MAAMA,SAAN;AAAA;AAAA,kCAAkC;AAGrCG,QAAAA,WAAW,CAACC,IAAD,EAA4B;AACnC;AADmC,eAFhCA,IAEgC;AAGnC,cAAIA,IAAJ,EACI,KAAKA,IAAL,GAAY;AAAA;AAAA,4CAAaC,OAAb,CAAqBD,IAArB,CAAZ;AACP;;AAESE,QAAAA,OAAO,CAACF,IAAD,EAA2B;AACxC,eAAKA,IAAL,GAAY;AAAA;AAAA,4CAAaC,OAAb,CAAqBD,IAArB,CAAZ;AACH;;AAEMG,QAAAA,KAAK,GAAG;AACX,eAAKH,IAAL,CAAUI,UAAV,CAAqB,IAArB;AACA,eAAKJ,IAAL,CAAUG,KAAV;AACA,gBAAMA,KAAN;AACH;;AAEME,QAAAA,GAAG,GAAG;AACT,eAAKL,IAAL,CAAUK,GAAV;AACH;;AAEMC,QAAAA,GAAG,CAACC,UAAD,EAAkB;AACxB,eAAKP,IAAL,CAAUM,GAAV,CAAcC,UAAd;AACH;;AA1BoC,O","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2022-06-21 12:05:14\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2022-07-20 14:05:02\r\n */\r\nimport { BehaviorTree } from './BehaviorTree';\r\nimport { BTreeNode } from './BTreeNode';\r\n\r\n/** \r\n * 装饰器是条件语句只能附加在其他节点上并且定义所附加的节点是否执行 \r\n * 如果装饰器是true 它所在的子树会被执行，如果是false 所在的子树不会被执行\r\n */\r\nexport class Decorator extends BTreeNode {\r\n    public node!: BTreeNode;\r\n\r\n    constructor(node?: string | BTreeNode) {\r\n        super()\r\n\r\n        if (node)\r\n            this.node = BehaviorTree.getNode(node);\r\n    }\r\n\r\n    protected setNode(node: string | BTreeNode) {\r\n        this.node = BehaviorTree.getNode(node);\r\n    }\r\n\r\n    public start() {\r\n        this.node.setControl(this);\r\n        this.node.start();\r\n        super.start();\r\n    }\r\n\r\n    public end() {\r\n        this.node.end();\r\n    }\r\n\r\n    public run(blackboard: any) {\r\n        this.node.run(blackboard);\r\n    }\r\n}\r\n"]}