{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/libs/collection/AsyncQueue.ts"],"names":["AsyncQueue","log","warn","_runningAsyncTask","_queues","_isProcessingTaskUUID","_enable","complete","queues","enable","val","size","play","push","callback","params","uuid","_$uuid_count","callbacks","pushMulti","remove","i","length","splice","isProcessing","isStop","runningParams","clear","step","next","args","actionData","shift","taskUUID","nextFunc","nextArgs","fnum","nextArgsArr","knum","yieldTime","time","task","_t","setTimeout","clearTimeout","des","excuteTimes","count","call"],"mappings":";;;6EAsCaA,U;;;;;;;;;AAtCJC,MAAAA,G,OAAAA,G;AAAKC,MAAAA,I,OAAAA,I;;;;;;;;;AAuBd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;4BACaF,U,GAAN,MAAMA,UAAN,CAAiB;AAAA;AAIpB;AAJoB,eAKZG,iBALY,GAK0B,IAL1B;AAAA,eAOZC,OAPY,GAOgB,EAPhB;AAcpB;AAdoB,eAeZC,qBAfY,GAeoB,CAfpB;AAAA,eAgBZC,OAhBY,GAgBO,IAhBP;;AAiCpB;AACJ;AACA;AAnCwB,eAoCpBC,QApCoB,GAoCQ,IApCR;AAAA;;AASpB;AACU,YAANC,MAAM,GAAqB;AAC3B,iBAAO,KAAKJ,OAAZ;AACH;;AAMD;AACU,YAANK,MAAM,GAAG;AACT,iBAAO,KAAKH,OAAZ;AACH;AACD;;;AACU,YAANG,MAAM,CAACC,GAAD,EAAe;AACrB,cAAI,KAAKJ,OAAL,KAAiBI,GAArB,EAA0B;AACtB;AACH;;AACD,eAAKJ,OAAL,GAAeI,GAAf;;AACA,cAAIA,GAAG,IAAI,KAAKC,IAAL,GAAY,CAAvB,EAA0B;AACtB,iBAAKC,IAAL;AACH;AACJ;;AAOD;AACJ;AACA;AACA;AACA;AACIC,QAAAA,IAAI,CAACC,QAAD,EAA0BC,MAAW,GAAG,IAAxC,EAAsD;AACtD,cAAIC,IAAI,GAAGhB,UAAU,CAACiB,YAAX,EAAX;;AACA,eAAKb,OAAL,CAAaS,IAAb,CAAkB;AACdG,YAAAA,IAAI,EAAEA,IADQ;AAEdE,YAAAA,SAAS,EAAE,CAACJ,QAAD,CAFG;AAGdC,YAAAA,MAAM,EAAEA;AAHM,WAAlB;;AAKA,iBAAOC,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIG,QAAAA,SAAS,CAACJ,MAAD,EAAc,GAAGG,SAAjB,EAAqD;AAC1D,cAAIF,IAAI,GAAGhB,UAAU,CAACiB,YAAX,EAAX;;AACA,eAAKb,OAAL,CAAaS,IAAb,CAAkB;AACdG,YAAAA,IAAI,EAAEA,IADQ;AAEdE,YAAAA,SAAS,EAAEA,SAFG;AAGdH,YAAAA,MAAM,EAAEA;AAHM,WAAlB;;AAKA,iBAAOC,IAAP;AACH;AAED;AACJ;AACA;AACA;;;AACII,QAAAA,MAAM,CAACJ,IAAD,EAAe;AAAA;;AACjB,cAAI,+BAAKb,iBAAL,2CAAwBa,IAAxB,MAAiCA,IAArC,EAA2C;AACvCd,YAAAA,IAAI,CAAC,cAAD,CAAJ;AACA;AACH;;AACD,eAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjB,OAAL,CAAakB,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,gBAAI,KAAKjB,OAAL,CAAaiB,CAAb,EAAgBL,IAAhB,KAAyBA,IAA7B,EAAmC;AAC/B,mBAAKZ,OAAL,CAAamB,MAAb,CAAoBF,CAApB,EAAuB,CAAvB;;AACA;AACH;AACJ;AACJ;AAED;;;AACQ,YAAJV,IAAI,GAAW;AACf,iBAAO,KAAKP,OAAL,CAAakB,MAApB;AACH;AAED;;;AACgB,YAAZE,YAAY,GAAY;AACxB,iBAAO,KAAKnB,qBAAL,GAA6B,CAApC;AACH;AAED;;;AACU,YAANoB,MAAM,GAAY;AAClB,cAAI,KAAKrB,OAAL,CAAakB,MAAb,GAAsB,CAA1B,EAA6B;AACzB,mBAAO,KAAP;AACH;;AACD,cAAI,KAAKE,YAAT,EAAuB;AACnB,mBAAO,KAAP;AACH;;AACD,iBAAO,IAAP;AACH;AAED;;;AACiB,YAAbE,aAAa,GAAG;AAChB,cAAI,KAAKvB,iBAAT,EAA4B;AACxB,mBAAO,KAAKA,iBAAL,CAAuBY,MAA9B;AACH;;AACD,iBAAO,IAAP;AACH;AAED;;;AACAY,QAAAA,KAAK,GAAG;AACJ,eAAKvB,OAAL,GAAe,EAAf;AACA,eAAKC,qBAAL,GAA6B,CAA7B;AACA,eAAKF,iBAAL,GAAyB,IAAzB;AACH;AAED;;;AACAyB,QAAAA,IAAI,GAAG;AACH,cAAI,KAAKJ,YAAT,EAAuB;AACnB,iBAAKK,IAAL,CAAU,KAAKxB,qBAAf;AACH;AACJ;AAED;AACJ;AACA;AACA;;;AACIO,QAAAA,IAAI,CAACkB,IAAS,GAAG,IAAb,EAAmB;AACnB,cAAI,KAAKN,YAAT,EAAuB;AACnB;AACH;;AAED,cAAI,CAAC,KAAKlB,OAAV,EAAmB;AACf;AACH;;AAED,cAAIyB,UAAqB,GAAG,KAAK3B,OAAL,CAAa4B,KAAb,EAA5B;;AACA,cAAID,UAAJ,EAAgB;AACZ,iBAAK5B,iBAAL,GAAyB4B,UAAzB;AACA,gBAAIE,QAAgB,GAAGF,UAAU,CAACf,IAAlC;AACA,iBAAKX,qBAAL,GAA6B4B,QAA7B;AACA,gBAAIf,SAA+B,GAAGa,UAAU,CAACb,SAAjD;;AAEA,gBAAIA,SAAS,CAACI,MAAV,IAAoB,CAAxB,EAA2B;AACvB,kBAAIY,QAAsB,GAAG,CAACC,QAAa,GAAG,IAAjB,KAA0B;AACnD,qBAAKN,IAAL,CAAUI,QAAV,EAAoBE,QAApB;AACH,eAFD;;AAGAjB,cAAAA,SAAS,CAAC,CAAD,CAAT,CAAagB,QAAb,EAAuBH,UAAU,CAAChB,MAAlC,EAA0Ce,IAA1C;AACH,aALD,MAMK;AACD;AACA,kBAAIM,IAAY,GAAGlB,SAAS,CAACI,MAA7B;AACA,kBAAIe,WAAkB,GAAG,EAAzB;;AACA,kBAAIH,QAAsB,GAAG,CAACC,QAAa,GAAG,IAAjB,KAA0B;AACnD,kBAAEC,IAAF;AACAC,gBAAAA,WAAW,CAACxB,IAAZ,CAAiBsB,QAAQ,IAAI,IAA7B;;AACA,oBAAIC,IAAI,KAAK,CAAb,EAAgB;AACZ,uBAAKP,IAAL,CAAUI,QAAV,EAAoBI,WAApB;AACH;AACJ,eAND;;AAOA,kBAAIC,IAAI,GAAGF,IAAX;;AACA,mBAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,IAApB,EAA0BjB,CAAC,EAA3B,EAA+B;AAC3BH,gBAAAA,SAAS,CAACG,CAAD,CAAT,CAAaa,QAAb,EAAuBH,UAAU,CAAChB,MAAlC,EAA0Ce,IAA1C;AACH;AACJ;AACJ,WA5BD,MA6BK;AACD,iBAAKzB,qBAAL,GAA6B,CAA7B;AACA,iBAAKF,iBAAL,GAAyB,IAAzB;;AACA,gBAAI,KAAKI,QAAT,EAAmB;AACf,mBAAKA,QAAL,CAAcuB,IAAd;AACH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACIS,QAAAA,SAAS,CAACC,IAAD,EAAe1B,QAAyB,GAAG,IAA3C,EAAiD;AACtD,cAAI2B,IAAI,GAAG,UAAUZ,IAAV,EAA0Bd,MAA1B,EAAuCe,IAAvC,EAAkD;AACzD,gBAAIY,EAAE,GAAGC,UAAU,CAAC,MAAM;AACtBC,cAAAA,YAAY,CAACF,EAAD,CAAZ;;AACA,kBAAI5B,QAAJ,EAAc;AACVA,gBAAAA,QAAQ;AACX;;AACDe,cAAAA,IAAI,CAACC,IAAD,CAAJ;AACH,aANkB,EAMhBU,IANgB,CAAnB;AAOH,WARD;;AASA,eAAK3B,IAAL,CAAU4B,IAAV,EAAgB;AAAEI,YAAAA,GAAG,EAAE;AAAP,WAAhB;AACH;;AAEShB,QAAAA,IAAI,CAACI,QAAD,EAAmBH,IAAS,GAAG,IAA/B,EAAqC;AAC/C,cAAI,KAAKzB,qBAAL,KAA+B4B,QAAnC,EAA6C;AACzC,iBAAK5B,qBAAL,GAA6B,CAA7B;AACA,iBAAKF,iBAAL,GAAyB,IAAzB;AACA,iBAAKS,IAAL,CAAUkB,IAAV;AACH,WAJD,MAKK;AACD,gBAAI,KAAK3B,iBAAT,EAA4B;AACxBF,cAAAA,GAAG,CAAC,KAAKE,iBAAN,CAAH;AACH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACsB,eAAX2C,WAAW,CAACC,KAAD,EAAgBlB,IAAqB,GAAG,IAAxC,EAAwD;AACtE,cAAIO,IAAY,GAAGW,KAAnB;;AACA,cAAIC,IAAI,GAAG,MAAM;AACb,cAAEZ,IAAF;;AACA,gBAAIA,IAAI,KAAK,CAAb,EAAgB;AACZP,cAAAA,IAAI,IAAIA,IAAI,EAAZ;AACH;AACJ,WALD;;AAMA,iBAAOmB,IAAP;AACH;;AAnOmB,O;;AACpB;AADShD,MAAAA,U,CAEMiB,Y,GAAuB,C","sourcesContent":["import { log, warn } from \"cc\";\r\n\r\nexport type NextFunction = (nextArgs?: any) => void;\r\n\r\nexport type AsyncCallback = (next: NextFunction, params: any, args: any) => void;\r\n\r\ninterface AsyncTask {\r\n    /**\r\n     * 任务uuid\r\n     */\r\n    uuid: number;\r\n    /**\r\n      * 任务开始执行的回调\r\n      * params: push时传入的参数\r\n      * args: 上个任务传来的参数\r\n      */\r\n    callbacks: Array<AsyncCallback>;\r\n    /**\r\n      * 任务参数\r\n      */\r\n    params: any\r\n}\r\n\r\n/**\r\n * 异步队列处理\r\n * @example\r\nvar queue: AsyncQueue = new AsyncQueue();\r\nqueue.push((next: NextFunction, params: any, args: any) => {\r\n    oops.res.load(\"language/font/\" + oops.language.current, next);\r\n});\r\nqueue.push((next: NextFunction, params: any, args: any) => {\r\n    oops.res.loadDir(\"common\", next);\r\n});\r\nqueue.complete =  () => {\r\n    console.log(\"处理完成\");\r\n};\r\nqueue.play();\r\n */\r\nexport class AsyncQueue {\r\n    // 任务task的唯一标识\r\n    private static _$uuid_count: number = 1;\r\n\r\n    // 正在运行的任务\r\n    private _runningAsyncTask: AsyncTask | null = null;\r\n\r\n    private _queues: Array<AsyncTask> = [];\r\n\r\n    /** 任务队列 */\r\n    get queues(): Array<AsyncTask> {\r\n        return this._queues;\r\n    }\r\n\r\n    // 正在执行的异步任务标识\r\n    private _isProcessingTaskUUID: number = 0;\r\n    private _enable: boolean = true;\r\n\r\n    /** 是否开启可用 */\r\n    get enable() {\r\n        return this._enable;\r\n    }\r\n    /** 是否开启可用 */\r\n    set enable(val: boolean) {\r\n        if (this._enable === val) {\r\n            return;\r\n        }\r\n        this._enable = val;\r\n        if (val && this.size > 0) {\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 任务队列完成回调\r\n     */\r\n    complete: Function | null = null;\r\n\r\n    /**\r\n     * 添加一个异步任务到队列中\r\n     * @param callback  回调\r\n     * @param params    参数\r\n     */\r\n    push(callback: AsyncCallback, params: any = null): number {\r\n        let uuid = AsyncQueue._$uuid_count++;\r\n        this._queues.push({\r\n            uuid: uuid,\r\n            callbacks: [callback],\r\n            params: params\r\n        })\r\n        return uuid;\r\n    }\r\n\r\n    /**\r\n     * 添加多个任务，多个任务函数会同时执行\r\n     * @param params     参数据\r\n     * @param callbacks  回调\r\n     * @returns \r\n     */\r\n    pushMulti(params: any, ...callbacks: AsyncCallback[]): number {\r\n        let uuid = AsyncQueue._$uuid_count++;\r\n        this._queues.push({\r\n            uuid: uuid,\r\n            callbacks: callbacks,\r\n            params: params\r\n        })\r\n        return uuid;\r\n    }\r\n\r\n    /**\r\n     * 移除一个还未执行的异步任务\r\n     * @param uuid  任务唯一编号\r\n     */\r\n    remove(uuid: number) {\r\n        if (this._runningAsyncTask?.uuid === uuid) {\r\n            warn(\"正在执行的任务不可以移除\");\r\n            return;\r\n        }\r\n        for (let i = 0; i < this._queues.length; i++) {\r\n            if (this._queues[i].uuid === uuid) {\r\n                this._queues.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 队列长度 */\r\n    get size(): number {\r\n        return this._queues.length;\r\n    }\r\n\r\n    /** 是否有正在处理的任务 */\r\n    get isProcessing(): boolean {\r\n        return this._isProcessingTaskUUID > 0;\r\n    }\r\n\r\n    /** 队列是否已停止 */\r\n    get isStop(): boolean {\r\n        if (this._queues.length > 0) {\r\n            return false;\r\n        }\r\n        if (this.isProcessing) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** 正在执行的任务参数 */\r\n    get runningParams() {\r\n        if (this._runningAsyncTask) {\r\n            return this._runningAsyncTask.params;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** 清空队列 */\r\n    clear() {\r\n        this._queues = [];\r\n        this._isProcessingTaskUUID = 0;\r\n        this._runningAsyncTask = null;\r\n    }\r\n\r\n    /** 跳过当前正在执行的任务 */\r\n    step() {\r\n        if (this.isProcessing) {\r\n            this.next(this._isProcessingTaskUUID);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开始运行队列\r\n     * @param args  参数\r\n     */\r\n    play(args: any = null) {\r\n        if (this.isProcessing) {\r\n            return;\r\n        }\r\n\r\n        if (!this._enable) {\r\n            return;\r\n        }\r\n\r\n        let actionData: AsyncTask = this._queues.shift()!;\r\n        if (actionData) {\r\n            this._runningAsyncTask = actionData;\r\n            let taskUUID: number = actionData.uuid;\r\n            this._isProcessingTaskUUID = taskUUID;\r\n            let callbacks: Array<AsyncCallback> = actionData.callbacks;\r\n\r\n            if (callbacks.length == 1) {\r\n                let nextFunc: NextFunction = (nextArgs: any = null) => {\r\n                    this.next(taskUUID, nextArgs);\r\n                }\r\n                callbacks[0](nextFunc, actionData.params, args);\r\n            }\r\n            else {\r\n                // 多个任务函数同时执行\r\n                let fnum: number = callbacks.length;\r\n                let nextArgsArr: any[] = [];\r\n                let nextFunc: NextFunction = (nextArgs: any = null) => {\r\n                    --fnum;\r\n                    nextArgsArr.push(nextArgs || null);\r\n                    if (fnum === 0) {\r\n                        this.next(taskUUID, nextArgsArr);\r\n                    }\r\n                }\r\n                let knum = fnum;\r\n                for (let i = 0; i < knum; i++) {\r\n                    callbacks[i](nextFunc, actionData.params, args);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._isProcessingTaskUUID = 0;\r\n            this._runningAsyncTask = null;\r\n            if (this.complete) {\r\n                this.complete(args);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 往队列中push一个延时任务\r\n     * @param time 毫秒时间\r\n     * @param callback （可选参数）时间到了之后回调\r\n     */\r\n    yieldTime(time: number, callback: Function | null = null) {\r\n        let task = function (next: Function, params: any, args: any) {\r\n            let _t = setTimeout(() => {\r\n                clearTimeout(_t);\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n                next(args);\r\n            }, time);\r\n        }\r\n        this.push(task, { des: \"AsyncQueue.yieldTime\" });\r\n    }\r\n\r\n    protected next(taskUUID: number, args: any = null) {\r\n        if (this._isProcessingTaskUUID === taskUUID) {\r\n            this._isProcessingTaskUUID = 0;\r\n            this._runningAsyncTask = null;\r\n            this.play(args);\r\n        }\r\n        else {\r\n            if (this._runningAsyncTask) {\r\n                log(this._runningAsyncTask);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 返回一个执行函数，执行函数调用count次后，next将触发\r\n     * @param count \r\n     * @param next \r\n     * @return 返回一个匿名函数\r\n     */\r\n    static excuteTimes(count: number, next: Function | null = null): Function {\r\n        let fnum: number = count;\r\n        let call = () => {\r\n            --fnum;\r\n            if (fnum === 0) {\r\n                next && next();\r\n            }\r\n        }\r\n        return call;\r\n    }\r\n}"]}