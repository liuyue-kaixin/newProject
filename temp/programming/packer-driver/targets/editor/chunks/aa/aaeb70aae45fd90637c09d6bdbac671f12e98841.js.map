{"version":3,"sources":["file:///Volumes/SSD%201/ccProject/extensions/oops-plugin-framework/assets/core/common/event/MessageManager.ts"],"names":["EventData","MessageEventData","MessageManager","log","warn","event","listener","object","events","on","list","data","push","Instance","off","ebs","eb","dispatchEvent","arg","clear","length","i","bin","once","_listener","$event","$args","call","splice","args","temp","concat","eventBin"],"mappings":"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","sourcesContent":["import { log, warn } from \"cc\";\r\nimport { ListenerFunc } from \"./EventMessage\";\r\n\r\nclass EventData {\r\n    public event!: string;\r\n    public listener!: ListenerFunc;\r\n    public object: any;\r\n}\r\n\r\n/**\r\n * 批量注册、移除全局事件对象\r\n */\r\nexport class MessageEventData {\r\n    private events: any = {};\r\n\r\n    /**\r\n     * 注册全局事件\r\n     * @param event      事件名\r\n     * @param listener   处理事件的侦听器函数\r\n     * @param object     侦听函数绑定的作用域对象\r\n     */\r\n    on(event: string, listener: ListenerFunc, object: object) {\r\n        let list: Array<EventData> = this.events[event];\r\n        if (list == null) {\r\n            list = [];\r\n            this.events[event] = list;\r\n        }\r\n        let data: EventData = new EventData();\r\n        data.event = event;\r\n        data.listener = listener;\r\n        data.object = object;\r\n        list.push(data);\r\n\r\n        MessageManager.Instance.on(event, listener, object);\r\n    }\r\n\r\n    /**\r\n    * 移除全局事件\r\n     * @param event     事件名\r\n     */\r\n    off(event: string) {\r\n        let ebs: Array<EventData> = this.events[event];\r\n        if (!ebs) {\r\n            return;\r\n        }\r\n        for (let eb of ebs) {\r\n            MessageManager.Instance.off(event, eb.listener, eb.object);\r\n        }\r\n        delete this.events[event];\r\n    }\r\n\r\n    /** \r\n     * 触发全局事件 \r\n     * @param event(string)      事件名\r\n     * @param args(any)          事件参数\r\n     */\r\n    dispatchEvent(event: string, arg: any = null) {\r\n        MessageManager.Instance.dispatchEvent(event, arg);\r\n    }\r\n\r\n    /** 清除所有的全局事件监听 */\r\n    clear() {\r\n        for (let event in this.events) {\r\n            this.off(event);\r\n        }\r\n    }\r\n}\r\n\r\n/** \r\n * 全局消息管理\r\n * @example \r\n// 注册持续监听的全局事件\r\nexport class RoleViewComp extends Component{\r\n    onLoad(){\r\n        // 监听全局事件\r\n        oops.message.on(GameEvent.GameServerConnected, this.onHandler, this);\r\n    }\r\n    \r\n    protected onDestroy() {\r\n        // 对象释放时取消注册的全局事件\r\n        oops.message.off(GameEvent.GameServerConnected, this.onHandler, this);\r\n    }\r\n    \r\n    private onHandler(event: string, args: any) {\r\n        switch (event) {\r\n            case GameEvent.GameServerConnected:\r\n                console.log(\"处理游戏服务器连接成功后的逻辑\");\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n// 注册只触发一次的全局事件\r\nexport class RoleViewComp extends Component{\r\n    onLoad(){\r\n        // 监听一次事件，事件响应后，该监听自动移除\r\n        oops.message.once(GameEvent.GameServerConnected, this.onHandler, this);\r\n    }\r\n    \r\n    private onHandler(event: string, args: any) {\r\n        switch (event) {\r\n            case GameEvent.GameServerConnected:\r\n                console.log(\"处理游戏服务器连接成功后的逻辑\");\r\n                break;\r\n        }\r\n    }\r\n}\r\n */\r\nexport class MessageManager {\r\n    static readonly Instance: MessageManager = new MessageManager();\r\n\r\n    private events: any = {};\r\n\r\n    /**\r\n     * 注册全局事件\r\n     * @param event      事件名\r\n     * @param listener   处理事件的侦听器函数\r\n     * @param object     侦听函数绑定的作用域对象\r\n     */\r\n    on(event: string, listener: ListenerFunc, object: object) {\r\n        if (!event || !listener) {\r\n            warn(`注册【${event}】事件的侦听器函数为空`);\r\n            return;\r\n        }\r\n\r\n        let list: Array<EventData> = this.events[event];\r\n        if (list == null) {\r\n            list = [];\r\n            this.events[event] = list;\r\n        }\r\n\r\n        let length = list.length;\r\n        for (let i = 0; i < length; i++) {\r\n            let bin = list[i];\r\n            if (bin.listener == listener && bin.object == object) {\r\n                warn(`名为【${event}】的事件重复注册侦听器`);\r\n            }\r\n        }\r\n\r\n\r\n        let data: EventData = new EventData();\r\n        data.event = event;\r\n        data.listener = listener;\r\n        data.object = object;\r\n        list.push(data);\r\n    }\r\n\r\n    /**\r\n     * 监听一次事件，事件响应后，该监听自动移除\r\n     * @param event     事件名\r\n     * @param listener  事件触发回调方法\r\n     * @param object    侦听函数绑定的作用域对象\r\n     */\r\n    once(event: string, listener: ListenerFunc, object: object) {\r\n        let _listener: any = ($event: string, $args: any) => {\r\n            this.off(event, _listener, object);\r\n            _listener = null;\r\n            listener.call(object, $event, $args);\r\n        }\r\n        this.on(event, _listener, object);\r\n    }\r\n\r\n    /**\r\n     * 移除全局事件\r\n     * @param event     事件名\r\n     * @param listener  处理事件的侦听器函数\r\n     * @param object    侦听函数绑定的作用域对象\r\n     */\r\n    off(event: string, listener: Function, object: object) {\r\n        let list: Array<EventData> = this.events[event];\r\n\r\n        if (!list) {\r\n            log(`名为【${event}】的事件不存在`);\r\n            return;\r\n        }\r\n\r\n        let length = list.length;\r\n        for (let i = 0; i < length; i++) {\r\n            let bin: EventData = list[i];\r\n            if (bin.listener == listener && bin.object == object) {\r\n                list.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (list.length == 0) {\r\n            delete this.events[event];\r\n        }\r\n    }\r\n\r\n    /** \r\n     * 触发全局事件 \r\n     * @param event(string)      事件名\r\n     * @param args(any)          事件参数\r\n     */\r\n    dispatchEvent(event: string, args: any = null) {\r\n        let list: Array<EventData> = this.events[event];\r\n\r\n        if (list != null) {\r\n            let temp: Array<EventData> = list.concat();\r\n            let length = temp.length;\r\n            for (let i = 0; i < length; i++) {\r\n                let eventBin = temp[i];\r\n                eventBin.listener.call(eventBin.object, event, args);\r\n            }\r\n        }\r\n    }\r\n}"]}