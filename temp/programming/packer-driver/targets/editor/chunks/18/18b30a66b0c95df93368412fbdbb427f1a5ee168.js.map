{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/animator-effect/EffectSingleCase.ts"],"names":["EffectData","EffectSingleCase","Animation","Component","NodePool","ParticleSystem","Prefab","sp","oops","ViewUtil","EffectEvent","EffectFinishedRelease","path","instance","_instance","speed","_speed","value","effects_use","forEach","key","setSpeed","constructor","effects","Map","res","message","on","Put","onHandler","event","args","put","loadAndShow","parent","params","Promise","resolve","reject","np","get","undefined","set","load","err","prefab","console","error","node","show","size","createPrefabNode","addComponent","isPlayFinishedRelease","getComponent","pos","position","name","delete","clear","release","spine","Skeleton","timeScale","anims","getComponentsInChildren","length","animator","aniName","defaultClip","aniState","getState","particles","particle","simulationSpeed"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2021-10-12 14:00:43\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2023-03-06 14:40:34\r\n */\r\nimport { Animation, Component, Node, NodePool, ParticleSystem, Prefab, Vec3, sp } from 'cc';\r\nimport { oops } from '../../core/Oops';\r\nimport { ViewUtil } from '../../core/utils/ViewUtil';\r\nimport { EffectEvent } from './EffectEvent';\r\nimport { EffectFinishedRelease } from './EffectFinishedRelease';\r\n\r\n/** 效果数据 */\r\nclass EffectData extends Component {\r\n    /** 资源路径 */\r\n    path: string = null!;\r\n}\r\n\r\n/** 特效参数 */\r\ninterface IEffectParams {\r\n    /** 初始位置 */\r\n    pos?: Vec3,\r\n    /** 是否播放完成后删除 */\r\n    isPlayFinishedRelease?: boolean\r\n}\r\n\r\n/** \r\n * 动画特效对象池管理器，加载动画后自动播放，播放完后自动回收到池中\r\n * 1、支持Spine动画\r\n * 2、支持Cocos Animation动画\r\n * 3、支持Cocos ParticleSystem粒子动画\r\n */\r\nexport class EffectSingleCase {\r\n    private static _instance: EffectSingleCase;\r\n    static get instance(): EffectSingleCase {\r\n        if (this._instance == null) {\r\n            this._instance = new EffectSingleCase();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    private _speed: number = 1;\r\n    /** 全局动画播放速度 */\r\n    get speed(): number {\r\n        return this._speed;\r\n    }\r\n    set speed(value: number) {\r\n        this._speed = value;\r\n        this.effects_use.forEach((value: Boolean, key: Node) => {\r\n            this.setSpeed(key);\r\n        });\r\n    }\r\n\r\n    /** 对象池集合 */\r\n    private effects: Map<string, NodePool> = new Map();\r\n    /** 正在使用中的显示对象集合 */\r\n    private effects_use: Map<Node, boolean> = new Map();\r\n    /** 对象池中用到的资源 - 这里只管理本对象加载的资源，预加载资源由其它对象自己施放 */\r\n    private res: Map<string, boolean> = new Map();\r\n\r\n    constructor() {\r\n        oops.message.on(EffectEvent.Put, this.onHandler, this);\r\n    }\r\n\r\n    private onHandler(event: string, args: any) {\r\n        if (event == EffectEvent.Put) {\r\n            this.put(args as Node);\r\n        }\r\n    }\r\n\r\n    /** \r\n     * 加载资源并现实特效 \r\n     * @param path    预制资源路径\r\n     * @param parent  父节点\r\n     * @param pos     位置\r\n     */\r\n    loadAndShow(path: string, parent?: Node, params?: IEffectParams): Promise<Node> {\r\n        return new Promise(async (resolve, reject) => {\r\n            var np = this.effects.get(path);\r\n            if (np == undefined) {\r\n                // 记录显示对象资源\r\n                this.res.set(path, true);\r\n\r\n                oops.res.load(path, Prefab, (err: Error | null, prefab: Prefab) => {\r\n                    if (err) {\r\n                        console.error(`名为【${path}】的特效资源加载失败`);\r\n                        return;\r\n                    }\r\n\r\n                    var node = this.show(path, parent, params);\r\n                    resolve(node);\r\n                });\r\n            }\r\n            else {\r\n                var node = this.show(path, parent, params);\r\n                resolve(node);\r\n            }\r\n        });\r\n    }\r\n\r\n    /** \r\n     * 显示预制对象\r\n     * @param path    预制资源路径\r\n     * @param parent  父节点\r\n     * @param pos     位置\r\n     */\r\n    show(path: string, parent?: Node, params?: IEffectParams): Node {\r\n        var np = this.effects.get(path);\r\n        if (np == null) {\r\n            np = new NodePool();\r\n            this.effects.set(path, np);\r\n        }\r\n\r\n        var node: Node;\r\n        // 创建池中新显示对象\r\n        if (np.size() == 0) {\r\n            node = ViewUtil.createPrefabNode(path);\r\n            node.addComponent(EffectData).path = path;\r\n            if (params && params.isPlayFinishedRelease) {\r\n                node.addComponent(EffectFinishedRelease);\r\n            }\r\n        }\r\n        // 池中获取没使用的显示对象\r\n        else {\r\n            node = np.get()!;\r\n            node.getComponent(EffectFinishedRelease);\r\n        }\r\n\r\n        // 设置动画播放速度\r\n        this.setSpeed(node);\r\n\r\n        // 设置显示对象位置\r\n        if (params && params.pos) node.position = params.pos;\r\n\r\n        // 显示到屏幕上\r\n        if (parent) node.parent = parent;\r\n\r\n        // 记录缓冲池中放出的节点\r\n        this.effects_use.set(node, true);\r\n\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * 回收对象\r\n     * @param name  预制对象名称\r\n     * @param node  节点\r\n     */\r\n    put(node: Node) {\r\n        var name = node.getComponent(EffectData)!.path;\r\n        var np = this.effects.get(name);\r\n        if (np) {\r\n            // 回收使用的节点\r\n            this.effects_use.delete(node);\r\n\r\n            // 回到到池中\r\n            np.put(node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除对象池数据\r\n     * @param path  参数为空时，清除所有对象池数据;指定名时，清楚指定数据\r\n     */\r\n    clear(path?: string) {\r\n        if (path) {\r\n            var np = this.effects.get(path)!;\r\n            np.clear();\r\n        }\r\n        else {\r\n            this.effects.forEach(np => {\r\n                np.clear();\r\n            });\r\n            this.effects.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 施放对象池中显示对象的资源内存\r\n     * @param path 资源路径 \r\n     */\r\n    release(path?: string) {\r\n        if (path) {\r\n            this.clear(path);\r\n            oops.res.release(path);\r\n        }\r\n        else {\r\n            this.clear();\r\n            this.res.forEach((value: boolean, path: string) => {\r\n                oops.res.release(path);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** 设置动画速度 */\r\n    private setSpeed(node: Node) {\r\n        // SPINE动画\r\n        let spine = node.getComponent(sp.Skeleton);\r\n        if (spine) {\r\n            spine.timeScale = this.speed;\r\n        }\r\n        else {\r\n            // COCOS动画\r\n            let anims: Animation[] = node.getComponentsInChildren(Animation);\r\n            if (anims.length > 0) {\r\n                anims.forEach(animator => {\r\n                    let aniName = animator.defaultClip?.name;\r\n                    if (aniName) {\r\n                        let aniState = animator.getState(aniName);\r\n                        if (aniState) {\r\n                            aniState.speed = this.speed;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            // 粒子动画\r\n            else if (ParticleSystem) {\r\n                let particles: ParticleSystem[] = node.getComponentsInChildren(ParticleSystem);\r\n                particles.forEach(particle => {\r\n                    particle.simulationSpeed = this.speed;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}"]}