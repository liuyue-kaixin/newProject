{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/libs/animator-move/MoveRigidBody.ts"],"names":["Component","EPSILON","RigidBody","Vec3","_decorator","ccclass","property","v3_0","v3_1","MoveRigidBody","tooltip","_rigidBody","_grounded","_curMaxSpeed","_prevAngleY","_stateX","_stateZ","_velocity","speed","_speed","value","ratio","_ratio","grounded","velocity","x","z","clearVelocity","start","getComponent","node","eulerAngles","y","stop","update","dt","applyGravity","applyDamping","applyLinearVelocity","g","gravity","m","mass","set","applyForce","getLinearVelocity","lengthSqr","multiplyScalar","Math","pow","damping","setLinearVelocity","dir","normalize","scaleAndAdd","ms","len","abs"],"mappings":"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","sourcesContent":["import { Component, EPSILON, RigidBody, Vec3, _decorator } from 'cc';\r\n\r\nconst { ccclass, property } = _decorator;\r\nconst v3_0 = new Vec3();\r\nconst v3_1 = new Vec3();\r\n\r\n/** \r\n * 物理方式移动\r\n * 1. 施加线性数度\r\n * 2. 施加阻尼\r\n * 3. 施加重力\r\n * 4. 控制移动速度或速度比率\r\n */\r\n@ccclass('MoveRigidBody')\r\nexport class MoveRigidBody extends Component {\r\n    @property({ tooltip: '阻尼' })\r\n    damping: number = 0.5;\r\n\r\n    @property({ tooltip: '重力' })\r\n    gravity: number = -10;\r\n\r\n    @property\r\n    private _speed: number = 5;\r\n    @property({ tooltip: '移动速度' })\r\n    public get speed(): number {\r\n        return this._speed;\r\n    }\r\n    public set speed(value: number) {\r\n        this._speed = value;\r\n        this._curMaxSpeed = value * this.ratio;\r\n    }\r\n\r\n    @property\r\n    private _ratio: number = 1;\r\n    @property({ tooltip: '速度比率' })\r\n    public get ratio(): number {\r\n        return this._ratio;\r\n    }\r\n    public set ratio(value: number) {\r\n        this._ratio = value;\r\n        this._curMaxSpeed = this.speed * value;\r\n    }\r\n\r\n    private _rigidBody: RigidBody = null!;\r\n    private _grounded = true;                               // 是否着地\r\n    private _curMaxSpeed: number = 0;                       // 当前最大速度\r\n    private _prevAngleY: number = 0;                        // 之前的Y角度值\r\n    private _stateX: number = 0;\r\n    private _stateZ: number = 0;\r\n\r\n    /** 是否着地 */\r\n    get grounded() { return this._grounded; }\r\n\r\n    private _velocity: Vec3 = new Vec3();\r\n    /** 移动方向 */\r\n    public get velocity(): Vec3 {\r\n        return this._velocity;\r\n    }\r\n    public set velocity(value: Vec3) {\r\n        this._velocity = value;\r\n\r\n        var x = value.x;\r\n        var z = value.z;\r\n        if ((x > 0 && this._stateX < 0) ||\r\n            (x < 0 && this._stateX > 0) ||\r\n            (z > 0 && this._stateZ < 0) ||\r\n            (z < 0 && this._stateZ > 0)) {\r\n            this._rigidBody.clearVelocity();            // 当前跟之前方向不一致则清除速度,避免惯性太大\r\n        }\r\n\r\n        this._stateX = x;\r\n        this._stateZ = z;\r\n    }\r\n\r\n    start() {\r\n        this._rigidBody = this.getComponent(RigidBody)!;\r\n        this._prevAngleY = this.node.eulerAngles.y;\r\n    }\r\n\r\n    /** 刚体停止移动 */\r\n    stop() {\r\n        this._stateX = 0;\r\n        this._stateZ = 0;\r\n        this._rigidBody.clearVelocity();                // 清除移动速度\r\n    }\r\n\r\n    update(dt: number) {\r\n        // 施加重力\r\n        this.applyGravity();\r\n\r\n        // 施加阻尼\r\n        this.applyDamping(dt);\r\n\r\n        // 未落地无法移动\r\n        if (!this.grounded) return;\r\n\r\n        // 施加移动\r\n        this.applyLinearVelocity(v3_0, 1);\r\n    }\r\n\r\n    /** 施加重力 */\r\n    private applyGravity() {\r\n        const g = this.gravity;\r\n        const m = this._rigidBody.mass;\r\n        v3_1.set(0, m * g, 0);\r\n        this._rigidBody.applyForce(v3_1);\r\n    }\r\n\r\n    /** 施加阻尼 */\r\n    private applyDamping(dt: number) {\r\n        // 获取线性速度\r\n        this._rigidBody.getLinearVelocity(v3_1);\r\n\r\n        if (v3_1.lengthSqr() > EPSILON) {\r\n            v3_1.multiplyScalar(Math.pow(1.0 - this.damping, dt));\r\n            this._rigidBody.setLinearVelocity(v3_1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 施加移动\r\n     * @param {Vec3} dir        方向\r\n     * @param {number} speed    移动数度\r\n     */\r\n    private applyLinearVelocity(dir: Vec3, speed: number) {\r\n        if (this._stateX || this._stateZ) {\r\n            v3_0.set(this._stateX, 0, this._stateZ);\r\n            v3_0.normalize();\r\n            // 获取线性速度\r\n            this._rigidBody.getLinearVelocity(v3_1);\r\n\r\n            Vec3.scaleAndAdd(v3_1, v3_1, dir, speed);\r\n\r\n            const ms = this._curMaxSpeed;\r\n            const len = v3_1.lengthSqr();\r\n            let ratio = 1;\r\n            if (len > ms) {\r\n                if (Math.abs(this.node.eulerAngles.y - this._prevAngleY) >= 10) {\r\n                    ratio = 2;\r\n                }\r\n                this._prevAngleY = this.node.eulerAngles.y;\r\n                v3_1.normalize();\r\n                v3_1.multiplyScalar(ms / ratio);\r\n            }\r\n            this._rigidBody.setLinearVelocity(v3_1);\r\n        }\r\n    }\r\n}"]}