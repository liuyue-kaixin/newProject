{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/core/utils/ImageUtil.ts"],"names":["ImageUtil","Color","Texture2D","getPixelColor","texture","x","y","canvas","document","createElement","ctx","getContext","width","height","image","getHtmlElementObj","drawImage","imageData","getImageData","pixelIndex","pixelData","data","slice","color","remove","imageToBase64","url","callback","Promise","res","extname","exec","includes","Image","src","onload","replace","dataURL","toDataURL","console","warn","base64ToTexture","base64","initWithElement","base64ToBlob","strings","split","type","window","atob","arrayBuffer","ArrayBuffer","length","uint8Array","Uint8Array","i","charCodeAt","Blob"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2022-09-01 18:00:28\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2022-09-02 14:49:42\r\n */\r\nimport { Color, Texture2D } from \"cc\";\r\n\r\n/**\r\n * 图像工具\r\n */\r\nexport class ImageUtil {\r\n    /**\r\n     * 获取纹理中指定像素的颜色，原点为左上角，从像素 (1, 1) 开始。\r\n     * @param texture 纹理\r\n     * @param x x 坐标\r\n     * @param y y 坐标\r\n     * @example\r\n// 获取纹理左上角第一个像素的颜色\r\nconst color = ImageUtil.getPixelColor(texture, 1, 1);\r\ncc.color(50, 100, 123, 255);\r\n     */\r\n    static getPixelColor(texture: Texture2D, x: number, y: number): Color {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d')!;\r\n        canvas.width = texture.width;\r\n        canvas.height = texture.height;\r\n        const image = texture.getHtmlElementObj()!;\r\n        ctx.drawImage(image, 0, 0, texture.width, texture.height);\r\n        const imageData = ctx.getImageData(0, 0, texture.width, texture.height);\r\n        const pixelIndex = ((y - 1) * texture.width * 4) + (x - 1) * 4;\r\n        const pixelData = imageData.data.slice(pixelIndex, pixelIndex + 4);\r\n        const color = new Color(pixelData[0], pixelData[1], pixelData[2], pixelData[3]);\r\n        image.remove();\r\n        canvas.remove();\r\n        return color;\r\n    }\r\n\r\n    /**\r\n     * 将图像转为 Base64 字符（仅 png、jpg 或 jpeg 格式资源）（有问题）\r\n     * @param url 图像地址\r\n     * @param callback 完成回调\r\n     */\r\n    static imageToBase64(url: string, callback?: (dataURL: string) => void): Promise<string> {\r\n        return new Promise(res => {\r\n            let extname = /\\.png|\\.jpg|\\.jpeg/.exec(url)?.[0];\r\n            //@ts-ignore\r\n            if (['.png', '.jpg', '.jpeg'].includes(extname)) {\r\n                const canvas = document.createElement('canvas');\r\n                const ctx = canvas.getContext('2d')!;\r\n                const image = new Image();\r\n                image.src = url;\r\n                image.onload = () => {\r\n                    canvas.height = image.height;\r\n                    canvas.width = image.width;\r\n                    ctx.drawImage(image, 0, 0);\r\n                    extname = extname === '.jpg' ? 'jpeg' : extname!.replace('.', '');\r\n                    const dataURL = canvas.toDataURL(`image/${extname}`);\r\n                    callback && callback(dataURL);\r\n                    res(dataURL);\r\n                    image.remove();\r\n                    canvas.remove();\r\n                }\r\n            }\r\n            else {\r\n                console.warn('Not a jpg/jpeg or png resource!');\r\n                callback && callback(\"\");\r\n                res(\"\");\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 将 Base64 字符转为 cc.Texture2D 资源（有问题）\r\n     * @param base64 Base64 字符\r\n     */\r\n    static base64ToTexture(base64: string): Texture2D {\r\n        const image = document.createElement('img');\r\n        image.src = base64;\r\n        const texture = new Texture2D();\r\n        //@ts-ignore\r\n        texture.initWithElement(image);\r\n        image.remove();\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * 将 Base64 字符转为二进制数据（有问题）\r\n     * @param base64 Base64 字符\r\n     */\r\n    static base64ToBlob(base64: string): Blob {\r\n        const strings = base64.split(',');\r\n        //@ts-ignore\r\n        const type = /image\\/\\w+|;/.exec(strings[0])[0];\r\n        const data = window.atob(strings[1]);\r\n        const arrayBuffer = new ArrayBuffer(data.length);\r\n        const uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < data.length; i++) {\r\n            uint8Array[i] = data.charCodeAt(i) & 0xff;\r\n        }\r\n        return new Blob([uint8Array], { type: type });\r\n    }\r\n}\r\n"]}