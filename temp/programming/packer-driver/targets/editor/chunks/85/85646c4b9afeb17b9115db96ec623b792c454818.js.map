{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/libs/model-view/StringFormat.ts"],"names":["StringFormat","deal","value","format","toLowerCase","trim","match_func","match","match_num","func","num","res","parseInt","int","fix","KMBT","per","sep","limit","Math","round","toString","replace","RegExp","time_m","time_s","time_ms","timeStamp","Date","fd","toFixed","count","substring","lang","counts","units","compressUnit","valueArr","unitArr","fixNum","index","length","e","StringFormatFunction"],"mappings":"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","sourcesContent":["/**\r\n * 数值格式化函数, 通过语义解析自动设置值的范围\r\n *     //整数\r\n * 1:def(0)//显示一个默认值\r\n */\r\nclass StringFormat {\r\n    deal(value: number | string, format: string): string {\r\n        if (format === '') return value as string;\r\n\r\n        format = format.toLowerCase().trim();               // 不区分大小\r\n        let match_func = format.match(/^[a-z|A-Z]+/gi);     // 匹配到 format 中的 函数名\r\n        let match_num = format.match(/\\d+$/gi);             //匹配到 format 中的参数\r\n        let func: string = '';\r\n        let num: number = 0;\r\n        let res: number | string = '';\r\n\r\n        if (match_func) func = match_func[0];\r\n        if (match_num) num = parseInt(match_num[0]);\r\n\r\n        if (typeof value == 'number') {\r\n            switch (func) {\r\n                case 'int': res = this.int(value); break;\r\n                case 'fix': res = this.fix(value, num); break;\r\n                case 'kmbt': res = this.KMBT(value); break;\r\n                case 'per': res = this.per(value, num); break;\r\n                case 'sep': res = this.sep(value); break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n        }\r\n        else {\r\n            switch (func) {\r\n                case 'limit': res = this.limit(value, num); break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n            res = value;\r\n        }\r\n\r\n        return res as string;\r\n    }\r\n\r\n    // 将数字按分号显示\r\n    private sep(value: number) {\r\n        let num = Math.round(value).toString();\r\n        return num.replace(new RegExp('(\\\\d)(?=(\\\\d{3})+$)', 'ig'), \"$1,\");\r\n    }\r\n\r\n    // 将数字按分显示 00:00 显示 （ms制）\r\n    private time_m(value: number) {\r\n        //todo\r\n    }\r\n\r\n    // 将数字按秒显示 00:00:00 显示 （ms制）\r\n    private time_s(value: number) {\r\n        //todo\r\n    }\r\n\r\n    // 将数字按 0:00:00:000 显示 （ms制）\r\n    private time_ms(value: number) {\r\n        //todo\r\n    }\r\n\r\n    // 将时间戳显示为详细的内容\r\n    private timeStamp(value: number) {\r\n        //todo\r\n        return new Date(value).toString()\r\n    }\r\n\r\n    /** [value:int] 将取值0~1 变成 1~100,可以指定修饰的小数位数 */\r\n    private per(value: number, fd: number) {\r\n        return Math.round(value * 100).toFixed(fd);\r\n    }\r\n\r\n    /** [value:int] 将取值变成整数 */\r\n    private int(value: number) {\r\n        return Math.round(value);\r\n    }\r\n\r\n    /** [value:fix2]数值转换为小数*/\r\n    private fix(value: number, fd: number) {\r\n        return value.toFixed(fd)\r\n    }\r\n\r\n    /** [value:limit3]字符串长度限制 */\r\n    private limit(value: string, count: number) {\r\n        return value.substring(0, count);\r\n    }\r\n\r\n    /** 将数字缩短显示为KMBT单位 大写,目前只支持英文 */\r\n    private KMBT(value: number, lang: string = 'en') {\r\n        //10^4=万, 10^8=亿,10^12=兆,10^16=京，\r\n        let counts = [1000, 1000000, 1000000000, 1000000000000];\r\n        let units = ['', 'K', 'M', 'B', 'T'];\r\n\r\n        switch (lang) {\r\n            case 'zh':\r\n                //10^4=万, 10^8=亿,10^12=兆,10^16=京，\r\n                let counts = [10000, 100000000, 1000000000000, 10000000000000000];\r\n                let units = ['', '万', '亿', '兆', '京'];\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return this.compressUnit(value, counts, units, 2);\r\n    }\r\n\r\n    //压缩任意单位的数字，后缀加上单位文字\r\n    private compressUnit(value: any, valueArr: number[], unitArr: string[], fixNum: number = 2): string {\r\n        let counts = valueArr;\r\n        let units = unitArr;\r\n        let res: string = \"\";\r\n        let index;\r\n        for (index = 0; index < counts.length; index++) {\r\n            const e = counts[index];\r\n            if (value < e) {\r\n                if (index > 0) {\r\n                    res = (value / counts[index - 1]).toFixed(fixNum);\r\n                }\r\n                else {\r\n                    res = value.toFixed(0);\r\n                }\r\n                break;\r\n            }\r\n\r\n        }\r\n        return res + units[index];\r\n    }\r\n}\r\n\r\n/**格式化处理函数 */\r\nexport let StringFormatFunction = new StringFormat();"]}