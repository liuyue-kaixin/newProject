{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/libs/network/NetNode.ts"],"names":["NetNode","error","warn","Logger","NetNodeStateStrs","NetTipsType","NetNodeState","_connectOptions","_autoReconnect","_isSocketInit","_isSocketOpen","_state","Closed","_socket","_networkTips","_protocolHelper","_connectedCallback","_disconnectCallback","_callbackExecuter","_keepAliveTimer","_receiveMsgTimer","_reconnectTimer","_heartTime","_receiveTime","_reconnetTimeOut","_requests","Array","_listener","init","socket","protocol","networkTips","execFunc","logNet","callback","buffer","call","target","connect","options","initSocket","Connecting","updateNetTips","autoReconnect","onConnected","event","onMessage","msg","onError","onClosed","tipsType","isShow","Requesting","requestTips","connectTips","ReConnecting","reconnectTips","Checking","onChecked","Working","requests","concat","length","i","req","send","rspObject","rspCmd","splice","json","JSON","parse","checkResponsePackage","handlerResponsePackage","responseErrorCode","code","resetReceiveMsgTimer","resetHearbeatTimer","getPackageId","reqIdx","data","parseInt","listeners","rsp","clearTimer","isAutoReconnect","setTimeout","close","reason","closeSocket","buf","force","push","request","reqProtocol","showTips","handlerRequestPackage","base_request","requestUnique","stringify","setResponeHandler","cmd","addResponeHandler","index","getNetListenersIndex","removeResponeHandler","cleanListeners","iterator","clearTimeout","getHearbeat","rejectReconnect"],"mappings":"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","sourcesContent":["import { error, warn } from \"cc\";\r\nimport { Logger } from \"../../core/common/log/Logger\";\r\nimport { CallbackObject, INetworkTips, IProtocolHelper, IRequestProtocol, ISocket, NetCallFunc, NetData, RequestObject } from \"./NetInterface\";\r\n\r\n/*\r\n*   CocosCreator网络节点基类，以及网络相关接口定义\r\n*   1. 网络连接、断开、请求发送、数据接收等基础功能\r\n*   2. 心跳机制\r\n*   3. 断线重连 + 请求重发\r\n*   4. 调用网络屏蔽层\r\n*/\r\n\r\ntype ExecuterFunc = (callback: CallbackObject, buffer: NetData) => void;\r\ntype CheckFunc = (checkedFunc: VoidFunc) => void;\r\ntype VoidFunc = () => void;\r\ntype BoolFunc = () => boolean;\r\n\r\nvar NetNodeStateStrs = [\"已关闭\", \"连接中\", \"验证中\", \"可传输数据\"];\r\n\r\n/** 网络提示类型枚举 */\r\nexport enum NetTipsType {\r\n    Connecting,\r\n    ReConnecting,\r\n    Requesting,\r\n}\r\n\r\n/** 网络状态枚举 */\r\nexport enum NetNodeState {\r\n    Closed,                     // 已关闭\r\n    Connecting,                 // 连接中\r\n    Checking,                   // 验证中\r\n    Working,                    // 可传输数据\r\n}\r\n\r\n/** 网络连接参数 */\r\nexport interface NetConnectOptions {\r\n    host?: string,              // 地址\r\n    port?: number,              // 端口\r\n    url?: string,               // url，与地址+端口二选一\r\n    autoReconnect?: number,     // -1 永久重连，0不自动重连，其他正整数为自动重试次数\r\n}\r\n\r\n/** 网络节点 */\r\nexport class NetNode {\r\n    protected _connectOptions: NetConnectOptions | null = null;\r\n    protected _autoReconnect: number = 0;\r\n    protected _isSocketInit: boolean = false;                               // Socket是否初始化过\r\n    protected _isSocketOpen: boolean = false;                               // Socket是否连接成功过\r\n    protected _state: NetNodeState = NetNodeState.Closed;                   // 节点当前状态\r\n    protected _socket: ISocket | null = null;                               // Socket对象（可能是原生socket、websocket、wx.socket...)\r\n\r\n    protected _networkTips: INetworkTips | null = null;                     // 网络提示ui对象（请求提示、断线重连提示等）\r\n    protected _protocolHelper: IProtocolHelper | null = null;               // 包解析对象\r\n    protected _connectedCallback: CheckFunc | null = null;                  // 连接完成回调\r\n    protected _disconnectCallback: BoolFunc | null = null;                  // 断线回调\r\n    protected _callbackExecuter: ExecuterFunc | null = null;                // 回调执行\r\n\r\n    protected _keepAliveTimer: any = null;                                  // 心跳定时器\r\n    protected _receiveMsgTimer: any = null;                                 // 接收数据定时器\r\n    protected _reconnectTimer: any = null;                                  // 重连定时器\r\n    protected _heartTime: number = 10000;                                   // 心跳间隔\r\n    protected _receiveTime: number = 6000000;                               // 多久没收到数据断开\r\n    protected _reconnetTimeOut: number = 8000000;                           // 重连间隔\r\n    protected _requests: RequestObject[] = Array<RequestObject>();          // 请求列表\r\n    protected _listener: { [key: string]: CallbackObject[] | null } = {}    // 监听者列表\r\n\r\n    /********************** 网络相关处理 *********************/\r\n    init(socket: ISocket, protocol: IProtocolHelper, networkTips: INetworkTips | null = null, execFunc: ExecuterFunc | null = null) {\r\n        Logger.logNet(`网络初始化`);\r\n        this._socket = socket;\r\n        this._protocolHelper = protocol;\r\n        this._networkTips = networkTips;\r\n        this._callbackExecuter = execFunc ? execFunc : (callback: CallbackObject, buffer: NetData) => {\r\n            callback.callback.call(callback.target, buffer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 请求连接服务器\r\n     * @param options 连接参数\r\n     */\r\n    connect(options: NetConnectOptions): boolean {\r\n        if (this._socket && this._state == NetNodeState.Closed) {\r\n            if (!this._isSocketInit) {\r\n                this.initSocket();\r\n            }\r\n            this._state = NetNodeState.Connecting;\r\n            if (!this._socket.connect(options)) {\r\n                this.updateNetTips(NetTipsType.Connecting, false);\r\n                return false;\r\n            }\r\n            if (this._connectOptions == null && typeof options.autoReconnect == \"number\") {\r\n                this._autoReconnect = options.autoReconnect;\r\n            }\r\n            this._connectOptions = options;\r\n            this.updateNetTips(NetTipsType.Connecting, true);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected initSocket() {\r\n        if (this._socket) {\r\n            this._socket.onConnected = (event) => { this.onConnected(event) };\r\n            this._socket.onMessage = (msg) => { this.onMessage(msg) };\r\n            this._socket.onError = (event) => { this.onError(event) };\r\n            this._socket.onClosed = (event) => { this.onClosed(event) };\r\n            this._isSocketInit = true;\r\n        }\r\n    }\r\n\r\n    protected updateNetTips(tipsType: NetTipsType, isShow: boolean) {\r\n        if (this._networkTips) {\r\n            if (tipsType == NetTipsType.Requesting) {\r\n                this._networkTips.requestTips(isShow);\r\n            }\r\n            else if (tipsType == NetTipsType.Connecting) {\r\n                this._networkTips.connectTips(isShow);\r\n            }\r\n            else if (tipsType == NetTipsType.ReConnecting) {\r\n                this._networkTips.reconnectTips(isShow);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 网络连接成功 */\r\n    protected onConnected(event: any) {\r\n        Logger.logNet(\"网络已连接\")\r\n        this._isSocketOpen = true;\r\n        // 如果设置了鉴权回调，在连接完成后进入鉴权阶段，等待鉴权结束\r\n        if (this._connectedCallback !== null) {\r\n            this._state = NetNodeState.Checking;\r\n            this._connectedCallback(() => { this.onChecked() });\r\n        }\r\n        else {\r\n            this.onChecked();\r\n        }\r\n        Logger.logNet(`网络已连接当前状态为【${NetNodeStateStrs[this._state]}】`);\r\n    }\r\n\r\n    /** 连接验证成功，进入工作状态 */\r\n    protected onChecked() {\r\n        Logger.logNet(\"连接验证成功，进入工作状态\");\r\n        this._state = NetNodeState.Working;\r\n        // 关闭连接或重连中的状态显示\r\n        this.updateNetTips(NetTipsType.Connecting, false);\r\n        this.updateNetTips(NetTipsType.ReConnecting, false);\r\n\r\n        // 重发待发送信息\r\n        var requests = this._requests.concat();\r\n        if (requests.length > 0) {\r\n            Logger.logNet(`请求【${this._requests.length}】个待发送的信息`);\r\n\r\n            for (var i = 0; i < requests.length;) {\r\n                let req = requests[i];\r\n                this._socket!.send(req.buffer);\r\n                if (req.rspObject == null || req.rspCmd != \"\") {\r\n                    requests.splice(i, 1);\r\n                }\r\n                else {\r\n                    ++i;\r\n                }\r\n            }\r\n            // 如果还有等待返回的请求，启动网络请求层\r\n            this.updateNetTips(NetTipsType.Requesting, this._requests.length > 0);\r\n        }\r\n    }\r\n\r\n    /** 接收到一个完整的消息包 */\r\n    protected onMessage(msg: any): void {\r\n        // Logger.logNet(`接受消息状态为【${NetNodeStateStrs[this._state]}】`);\r\n\r\n        var json = JSON.parse(msg);\r\n\r\n        // 进行头部的校验（实际包长与头部长度是否匹配）\r\n        if (!this._protocolHelper!.checkResponsePackage(json)) {\r\n            error(`校验接受消息数据异常`);\r\n            return;\r\n        }\r\n\r\n        // 处理相应包数据\r\n        if (!this._protocolHelper!.handlerResponsePackage(json)) {\r\n            if (this._networkTips)\r\n                this._networkTips.responseErrorCode(json.code);\r\n        }\r\n\r\n        // 接受到数据，重新定时收数据计时器\r\n        this.resetReceiveMsgTimer();\r\n        // 重置心跳包发送器\r\n        this.resetHearbeatTimer();\r\n        // 触发消息执行\r\n        let rspCmd = this._protocolHelper!.getPackageId(json);\r\n\r\n        Logger.logNet(`接受到命令【${rspCmd}】的消息`);\r\n        // 优先触发request队列\r\n        if (this._requests.length > 0) {\r\n            for (let reqIdx in this._requests) {\r\n                let req = this._requests[reqIdx];\r\n                if (req.rspCmd == rspCmd && req.rspObject) {\r\n                    Logger.logNet(`触发请求命令【${rspCmd}】的回调`);\r\n                    this._callbackExecuter!(req.rspObject, json.data);\r\n                    this._requests.splice(parseInt(reqIdx), 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (this._requests.length == 0) {\r\n                this.updateNetTips(NetTipsType.Requesting, false);\r\n            }\r\n            else {\r\n                Logger.logNet(`请求队列中还有【${this._requests.length}】个请求在等待`);\r\n            }\r\n        }\r\n\r\n        let listeners = this._listener[rspCmd];\r\n        if (null != listeners) {\r\n            for (const rsp of listeners) {\r\n                Logger.logNet(`触发监听命令【${rspCmd}】的回调`);\r\n                this._callbackExecuter!(rsp, json.data);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onError(event: any) {\r\n        error(event);\r\n    }\r\n\r\n    protected onClosed(event: any) {\r\n        this.clearTimer();\r\n\r\n        // 执行断线回调，返回false表示不进行重连\r\n        if (this._disconnectCallback && !this._disconnectCallback()) {\r\n            Logger.logNet(`断开连接`);\r\n            return;\r\n        }\r\n\r\n        // 自动重连\r\n        if (this.isAutoReconnect()) {\r\n            this.updateNetTips(NetTipsType.ReConnecting, true);\r\n            this._reconnectTimer = setTimeout(() => {\r\n                this._socket!.close();\r\n                this._state = NetNodeState.Closed;\r\n                this.connect(this._connectOptions!);\r\n                if (this._autoReconnect > 0) {\r\n                    this._autoReconnect -= 1;\r\n                }\r\n            }, this._reconnetTimeOut);\r\n        }\r\n        else {\r\n            this._state = NetNodeState.Closed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 断开网络\r\n     * @param code      关闭码\r\n     * @param reason    关闭原因\r\n     */\r\n    close(code?: number, reason?: string) {\r\n        this.clearTimer();\r\n        this._listener = {};\r\n        this._requests.length = 0;\r\n        if (this._networkTips) {\r\n            this._networkTips.connectTips(false);\r\n            this._networkTips.reconnectTips(false);\r\n            this._networkTips.requestTips(false);\r\n        }\r\n        if (this._socket) {\r\n            this._socket.close(code, reason);\r\n        }\r\n        else {\r\n            this._state = NetNodeState.Closed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 只是关闭Socket套接字（仍然重用缓存与当前状态）\r\n     * @param code      关闭码\r\n     * @param reason    关闭原因\r\n     */\r\n    closeSocket(code?: number, reason?: string) {\r\n        if (this._socket) {\r\n            this._socket.close(code, reason);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 发起请求，如果当前处于重连中，进入缓存列表等待重连完成后发送\r\n     * @param buf       网络数据\r\n     * @param force     是否强制发送\r\n     */\r\n    send(buf: NetData, force: boolean = false): number {\r\n        if (this._state == NetNodeState.Working || force) {\r\n            return this._socket!.send(buf);\r\n        }\r\n        else if (this._state == NetNodeState.Checking ||\r\n            this._state == NetNodeState.Connecting) {\r\n            this._requests.push({\r\n                buffer: buf,\r\n                rspCmd: \"\",\r\n                rspObject: null\r\n            });\r\n            Logger.logNet(`当前状态为【${NetNodeStateStrs[this._state]}】,繁忙并缓冲发送数据`);\r\n            return 0;\r\n        }\r\n        else {\r\n            error(`当前状态为【${NetNodeStateStrs[this._state]}】,请求错误`);\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 发起请求，并进入缓存列表\r\n     * @param reqProtocol 请求协议\r\n     * @param rspObject   回调对象\r\n     * @param showTips    是否触发请求提示\r\n     * @param force       是否强制发送\r\n     */\r\n    request<T>(reqProtocol: IRequestProtocol, rspObject: CallbackObject, showTips: boolean = true, force: boolean = false) {\r\n        var rspCmd = this._protocolHelper!.handlerRequestPackage(reqProtocol);\r\n        this.base_request(reqProtocol, rspCmd, rspObject, showTips, force);\r\n    }\r\n\r\n    /**\r\n     * 唯一request，确保没有同一响应的请求（避免一个请求重复发送，netTips界面的屏蔽也是一个好的方法）\r\n     * @param reqProtocol 请求协议\r\n     * @param rspObject   回调对象\r\n     * @param showTips    是否触发请求提示\r\n     * @param force       是否强制发送\r\n     */\r\n    requestUnique(reqProtocol: IRequestProtocol, rspObject: CallbackObject, showTips: boolean = true, force: boolean = false): boolean {\r\n        var rspCmd = this._protocolHelper!.handlerRequestPackage(reqProtocol);\r\n\r\n        for (let i = 0; i < this._requests.length; ++i) {\r\n            if (this._requests[i].rspCmd == rspCmd) {\r\n                Logger.logNet(`命令【${rspCmd}】重复请求`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this.base_request(reqProtocol, rspCmd, rspObject, showTips, force);\r\n        return true;\r\n    }\r\n\r\n    private base_request(reqProtocol: IRequestProtocol, rspCmd: string, rspObject: CallbackObject, showTips: boolean = true, force: boolean = false) {\r\n        var buf: NetData = JSON.stringify(reqProtocol);         // 转为二进制流发送\r\n\r\n        if (this._state == NetNodeState.Working || force) {\r\n            this._socket!.send(buf);\r\n        }\r\n\r\n        Logger.logNet(`队列命令为【${rspCmd}】的请求，等待请求数据的回调`);\r\n\r\n        // 进入发送缓存列表\r\n        this._requests.push({\r\n            buffer: buf, rspCmd, rspObject\r\n        });\r\n        // 启动网络请求层\r\n        if (showTips) {\r\n            this.updateNetTips(NetTipsType.Requesting, true);\r\n        }\r\n    }\r\n\r\n    /********************** 回调相关处理 *********************/\r\n    /**\r\n     * 设置一个唯一的服务器推送监听\r\n     * @param cmd       命令字串\r\n     * @param callback  回调方法\r\n     * @param target    目标对象\r\n     */\r\n    setResponeHandler(cmd: string, callback: NetCallFunc, target?: any): boolean {\r\n        if (callback == null) {\r\n            error(`命令为【${cmd}】设置响应处理程序错误`);\r\n            return false;\r\n        }\r\n        this._listener[cmd] = [{ target, callback }];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 可添加多个同类返回消息的监听\r\n     * @param cmd       命令字串\r\n     * @param callback  回调方法\r\n     * @param target    目标对象\r\n     * @returns \r\n     */\r\n    addResponeHandler(cmd: string, callback: NetCallFunc, target?: any): boolean {\r\n        if (callback == null) {\r\n            error(`命令为【${cmd}】添加响应处理程序错误`);\r\n            return false;\r\n        }\r\n        let rspObject = { target, callback };\r\n        if (null == this._listener[cmd]) {\r\n            this._listener[cmd] = [rspObject];\r\n        }\r\n        else {\r\n            let index = this.getNetListenersIndex(cmd, rspObject);\r\n            if (-1 == index) {\r\n                this._listener[cmd]!.push(rspObject);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 删除一个监听中指定子回调\r\n     * @param cmd       命令字串\r\n     * @param callback  回调方法\r\n     * @param target    目标对象\r\n     */\r\n    removeResponeHandler(cmd: string, callback: NetCallFunc, target?: any) {\r\n        if (null != this._listener[cmd] && callback != null) {\r\n            let index = this.getNetListenersIndex(cmd, { target, callback });\r\n            if (-1 != index) {\r\n                this._listener[cmd]!.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除所有监听或指定命令的监听\r\n     * @param cmd  命令字串（默认不填为清除所有）\r\n     */\r\n    cleanListeners(cmd: string = \"\") {\r\n        if (cmd == \"\") {\r\n            this._listener = {}\r\n        }\r\n        else {\r\n            delete this._listener[cmd];\r\n        }\r\n    }\r\n\r\n    protected getNetListenersIndex(cmd: string, rspObject: CallbackObject): number {\r\n        let index = -1;\r\n        for (let i = 0; i < this._listener[cmd]!.length; i++) {\r\n            let iterator = this._listener[cmd]![i];\r\n            if (iterator.callback == rspObject.callback\r\n                && iterator.target == rspObject.target) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /********************** 心跳、超时相关处理 *********************/\r\n    protected resetReceiveMsgTimer() {\r\n        if (this._receiveMsgTimer !== null) {\r\n            clearTimeout(this._receiveMsgTimer);\r\n        }\r\n\r\n        this._receiveMsgTimer = setTimeout(() => {\r\n            warn(\"接收消息定时器关闭网络连接\");\r\n            this._socket!.close();\r\n        }, this._receiveTime);\r\n    }\r\n\r\n    protected resetHearbeatTimer() {\r\n        if (this._keepAliveTimer !== null) {\r\n            clearTimeout(this._keepAliveTimer);\r\n        }\r\n\r\n        this._keepAliveTimer = setTimeout(() => {\r\n            Logger.logNet(\"网络节点保持活跃发送心跳信息\");\r\n            this.send(this._protocolHelper!.getHearbeat());\r\n        }, this._heartTime);\r\n    }\r\n\r\n    protected clearTimer() {\r\n        if (this._receiveMsgTimer !== null) {\r\n            clearTimeout(this._receiveMsgTimer);\r\n        }\r\n        if (this._keepAliveTimer !== null) {\r\n            clearTimeout(this._keepAliveTimer);\r\n        }\r\n        if (this._reconnectTimer !== null) {\r\n            clearTimeout(this._reconnectTimer);\r\n        }\r\n    }\r\n\r\n    /** 是否自动重连接 */\r\n    isAutoReconnect() {\r\n        return this._autoReconnect != 0;\r\n    }\r\n\r\n    /** 拒绝重新连接 */\r\n    rejectReconnect() {\r\n        this._autoReconnect = 0;\r\n        this.clearTimer();\r\n    }\r\n}"]}