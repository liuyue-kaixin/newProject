{"version":3,"sources":["file:///Volumes/SSD/ccProject/node_modules/crypto-es/lib/sha3.js"],"names":["SHA3Algo","WordArray","Hasher","X64Word","RHO_OFFSETS","PI_INDEXES","ROUND_CONSTANTS","_x","_y","t","newX","newY","x","y","LFSR","i","roundConstantMsw","roundConstantLsw","j","bitPosition","create","T","constructor","cfg","Object","assign","outputLength","_doReset","_state","state","blockSize","_doProcessBlock","M","offset","nBlockSizeLanes","M2i","M2i1","lane","high","low","round","tMsw","tLsw","Tx","Tx4","Tx1","Tx1Msw","Tx1Lsw","laneIndex","laneMsw","laneLsw","rhoOffset","TPiLane","T0","state0","TLane","Tx1Lane","Tx2Lane","roundConstant","_doFinalize","data","_data","dataWords","words","nBitsLeft","sigBytes","blockSizeBits","Math","ceil","length","_process","outputLengthBytes","outputLengthLanes","hashWords","push","clone","call","slice","SHA3","_createHelper","HmacSHA3","_createHmacHelper"],"mappings":"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","sourcesContent":["import {\r\n  WordArray,\r\n  Hasher,\r\n} from './core.js';\r\nimport { X64Word } from './x64-core.js';\r\n\r\n// Constants tables\r\nconst RHO_OFFSETS = [];\r\nconst PI_INDEXES = [];\r\nconst ROUND_CONSTANTS = [];\r\n\r\n// Compute Constants\r\n// Compute rho offset constants\r\nlet _x = 1;\r\nlet _y = 0;\r\nfor (let t = 0; t < 24; t += 1) {\r\n  RHO_OFFSETS[_x + 5 * _y] = ((t + 1) * (t + 2) / 2) % 64;\r\n\r\n  const newX = _y % 5;\r\n  const newY = (2 * _x + 3 * _y) % 5;\r\n  _x = newX;\r\n  _y = newY;\r\n}\r\n\r\n// Compute pi index constants\r\nfor (let x = 0; x < 5; x += 1) {\r\n  for (let y = 0; y < 5; y += 1) {\r\n    PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\r\n  }\r\n}\r\n\r\n// Compute round constants\r\nlet LFSR = 0x01;\r\nfor (let i = 0; i < 24; i += 1) {\r\n  let roundConstantMsw = 0;\r\n  let roundConstantLsw = 0;\r\n\r\n  for (let j = 0; j < 7; j += 1) {\r\n    if (LFSR & 0x01) {\r\n      const bitPosition = (1 << j) - 1;\r\n      if (bitPosition < 32) {\r\n        roundConstantLsw ^= 1 << bitPosition;\r\n      } else /* if (bitPosition >= 32) */ {\r\n        roundConstantMsw ^= 1 << (bitPosition - 32);\r\n      }\r\n    }\r\n\r\n    // Compute next LFSR\r\n    if (LFSR & 0x80) {\r\n      // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\r\n      LFSR = (LFSR << 1) ^ 0x71;\r\n    } else {\r\n      LFSR <<= 1;\r\n    }\r\n  }\r\n\r\n  ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\r\n}\r\n\r\n// Reusable objects for temporary values\r\nconst T = [];\r\nfor (let i = 0; i < 25; i += 1) {\r\n  T[i] = X64Word.create();\r\n}\r\n\r\n/**\r\n * SHA-3 hash algorithm.\r\n */\r\nexport class SHA3Algo extends Hasher {\r\n  constructor(cfg) {\r\n    /**\r\n     * Configuration options.\r\n     *\r\n     * @property {number} outputLength\r\n     *   The desired number of bits in the output hash.\r\n     *   Only values permitted are: 224, 256, 384, 512.\r\n     *   Default: 512\r\n     */\r\n    super(Object.assign(\r\n      { outputLength: 512 },\r\n      cfg,\r\n    ));\r\n  }\r\n\r\n  _doReset() {\r\n    this._state = [];\r\n    const state = this._state;\r\n    for (let i = 0; i < 25; i += 1) {\r\n      state[i] = new X64Word();\r\n    }\r\n\r\n    this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\r\n  }\r\n\r\n  _doProcessBlock(M, offset) {\r\n    // Shortcuts\r\n    const state = this._state;\r\n    const nBlockSizeLanes = this.blockSize / 2;\r\n\r\n    // Absorb\r\n    for (let i = 0; i < nBlockSizeLanes; i += 1) {\r\n      // Shortcuts\r\n      let M2i = M[offset + 2 * i];\r\n      let M2i1 = M[offset + 2 * i + 1];\r\n\r\n      // Swap endian\r\n      M2i = (((M2i << 8) | (M2i >>> 24)) & 0x00ff00ff)\r\n        | (((M2i << 24) | (M2i >>> 8)) & 0xff00ff00);\r\n      M2i1 = (((M2i1 << 8) | (M2i1 >>> 24)) & 0x00ff00ff)\r\n        | (((M2i1 << 24) | (M2i1 >>> 8)) & 0xff00ff00);\r\n\r\n      // Absorb message into state\r\n      const lane = state[i];\r\n      lane.high ^= M2i1;\r\n      lane.low ^= M2i;\r\n    }\r\n\r\n    // Rounds\r\n    for (let round = 0; round < 24; round += 1) {\r\n      // Theta\r\n      for (let x = 0; x < 5; x += 1) {\r\n        // Mix column lanes\r\n        let tMsw = 0;\r\n        let tLsw = 0;\r\n        for (let y = 0; y < 5; y += 1) {\r\n          const lane = state[x + 5 * y];\r\n          tMsw ^= lane.high;\r\n          tLsw ^= lane.low;\r\n        }\r\n\r\n        // Temporary values\r\n        const Tx = T[x];\r\n        Tx.high = tMsw;\r\n        Tx.low = tLsw;\r\n      }\r\n      for (let x = 0; x < 5; x += 1) {\r\n        // Shortcuts\r\n        const Tx4 = T[(x + 4) % 5];\r\n        const Tx1 = T[(x + 1) % 5];\r\n        const Tx1Msw = Tx1.high;\r\n        const Tx1Lsw = Tx1.low;\r\n\r\n        // Mix surrounding columns\r\n        const tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\r\n        const tLsw = Tx4.low ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\r\n        for (let y = 0; y < 5; y += 1) {\r\n          const lane = state[x + 5 * y];\r\n          lane.high ^= tMsw;\r\n          lane.low ^= tLsw;\r\n        }\r\n      }\r\n\r\n      // Rho Pi\r\n      for (let laneIndex = 1; laneIndex < 25; laneIndex += 1) {\r\n        let tMsw;\r\n        let tLsw;\r\n\r\n        // Shortcuts\r\n        const lane = state[laneIndex];\r\n        const laneMsw = lane.high;\r\n        const laneLsw = lane.low;\r\n        const rhoOffset = RHO_OFFSETS[laneIndex];\r\n\r\n        // Rotate lanes\r\n        if (rhoOffset < 32) {\r\n          tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\r\n          tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\r\n        } else /* if (rhoOffset >= 32) */ {\r\n          tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\r\n          tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\r\n        }\r\n\r\n        // Transpose lanes\r\n        const TPiLane = T[PI_INDEXES[laneIndex]];\r\n        TPiLane.high = tMsw;\r\n        TPiLane.low = tLsw;\r\n      }\r\n\r\n      // Rho pi at x = y = 0\r\n      const T0 = T[0];\r\n      const state0 = state[0];\r\n      T0.high = state0.high;\r\n      T0.low = state0.low;\r\n\r\n      // Chi\r\n      for (let x = 0; x < 5; x += 1) {\r\n        for (let y = 0; y < 5; y += 1) {\r\n          // Shortcuts\r\n          const laneIndex = x + 5 * y;\r\n          const lane = state[laneIndex];\r\n          const TLane = T[laneIndex];\r\n          const Tx1Lane = T[((x + 1) % 5) + 5 * y];\r\n          const Tx2Lane = T[((x + 2) % 5) + 5 * y];\r\n\r\n          // Mix rows\r\n          lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\r\n          lane.low = TLane.low ^ (~Tx1Lane.low & Tx2Lane.low);\r\n        }\r\n      }\r\n\r\n      // Iota\r\n      const lane = state[0];\r\n      const roundConstant = ROUND_CONSTANTS[round];\r\n      lane.high ^= roundConstant.high;\r\n      lane.low ^= roundConstant.low;\r\n    }\r\n  }\r\n\r\n  _doFinalize() {\r\n    // Shortcuts\r\n    const data = this._data;\r\n    const dataWords = data.words;\r\n    const nBitsLeft = data.sigBytes * 8;\r\n    const blockSizeBits = this.blockSize * 32;\r\n\r\n    // Add padding\r\n    dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - (nBitsLeft % 32));\r\n    dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\r\n    data.sigBytes = dataWords.length * 4;\r\n\r\n    // Hash final blocks\r\n    this._process();\r\n\r\n    // Shortcuts\r\n    const state = this._state;\r\n    const outputLengthBytes = this.cfg.outputLength / 8;\r\n    const outputLengthLanes = outputLengthBytes / 8;\r\n\r\n    // Squeeze\r\n    const hashWords = [];\r\n    for (let i = 0; i < outputLengthLanes; i += 1) {\r\n      // Shortcuts\r\n      const lane = state[i];\r\n      let laneMsw = lane.high;\r\n      let laneLsw = lane.low;\r\n\r\n      // Swap endian\r\n      laneMsw = (((laneMsw << 8) | (laneMsw >>> 24)) & 0x00ff00ff)\r\n        | (((laneMsw << 24) | (laneMsw >>> 8)) & 0xff00ff00);\r\n      laneLsw = (((laneLsw << 8) | (laneLsw >>> 24)) & 0x00ff00ff)\r\n        | (((laneLsw << 24) | (laneLsw >>> 8)) & 0xff00ff00);\r\n\r\n      // Squeeze state to retrieve hash\r\n      hashWords.push(laneLsw);\r\n      hashWords.push(laneMsw);\r\n    }\r\n\r\n    // Return final computed hash\r\n    return new WordArray(hashWords, outputLengthBytes);\r\n  }\r\n\r\n  clone() {\r\n    const clone = super.clone.call(this);\r\n\r\n    clone._state = this._state.slice(0);\r\n    const state = clone._state;\r\n    for (let i = 0; i < 25; i += 1) {\r\n      state[i] = state[i].clone();\r\n    }\r\n\r\n    return clone;\r\n  }\r\n}\r\n\r\n/**\r\n * Shortcut function to the hasher's object interface.\r\n *\r\n * @param {WordArray|string} message The message to hash.\r\n *\r\n * @return {WordArray} The hash.\r\n *\r\n * @static\r\n *\r\n * @example\r\n *\r\n *     var hash = CryptoJS.SHA3('message');\r\n *     var hash = CryptoJS.SHA3(wordArray);\r\n */\r\nexport const SHA3 = Hasher._createHelper(SHA3Algo);\r\n\r\n/**\r\n * Shortcut function to the HMAC's object interface.\r\n *\r\n * @param {WordArray|string} message The message to hash.\r\n * @param {WordArray|string} key The secret key.\r\n *\r\n * @return {WordArray} The HMAC.\r\n *\r\n * @static\r\n *\r\n * @example\r\n *\r\n *     var hmac = CryptoJS.HmacSHA3(message, key);\r\n */\r\nexport const HmacSHA3 = Hasher._createHmacHelper(SHA3Algo);\r\n"]}