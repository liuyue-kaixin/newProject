{"version":3,"sources":["file:///Volumes/SSD%201/ccProject/extensions/oops-plugin-framework/assets/libs/ecs/ECSMatcher.ts"],"names":["ECSMatcher","BaseOf","AnyOf","AllOf","ExcludeOf","ECSMask","ECSModel","macherId","key","_key","s","i","rules","length","getKey","constructor","_indices","isMatch","mid","indices","forEach","rule","Array","prototype","push","apply","anyOf","args","bindMatchMethod","allOf","onlyOf","otherTids","ctor","compCtors","indexOf","excludeOf","isMatch1","isMatch2","isMatchMore","entity","clone","newMatcher","mask","componentTypeId","len","tid","Error","set","sort","a","b","toString","join","or","and"],"mappings":";;;iDAWaA,U,EA6HEC,M,EAyCTC,K,EAcAC,K,EAcAC,S;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3MGC,MAAAA,O,iBAAAA,O;;AACoBC,MAAAA,Q,iBAAAA,Q;;;;;;;AAEzBC,MAAAA,Q,GAAmB,C;AAEvB;AACA;AACA;AACA;;4BACaP,U,GAAN,MAAMA,UAAN,CAAyC;AAO9B,YAAHQ,GAAG,GAAW;AACrB,cAAI,CAAC,KAAKC,IAAV,EAAgB;AACZ,gBAAIC,CAAC,GAAG,EAAR;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,KAAL,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AACxCD,cAAAA,CAAC,IAAI,KAAKE,KAAL,CAAWD,CAAX,EAAcG,MAAd,EAAL;;AACA,kBAAIH,CAAC,GAAG,KAAKC,KAAL,CAAWC,MAAX,GAAoB,CAA5B,EAA+B;AAC3BH,gBAAAA,CAAC,IAAI,MAAL;AACH;AACJ;;AACD,iBAAKD,IAAL,GAAYC,CAAZ;AACH;;AACD,iBAAO,KAAKD,IAAZ;AACH;;AAEDM,QAAAA,WAAW,GAAG;AAAA,eApBJH,KAoBI,GApBc,EAoBd;AAAA,eAnBJI,QAmBI,GAnBwB,IAmBxB;AAAA,eAlBPC,OAkBO;AAAA,eAjBPC,GAiBO,GAjBO,CAAC,CAiBR;AAAA,eAfNT,IAeM,GAfgB,IAehB;AACV,eAAKS,GAAL,GAAWX,QAAQ,EAAnB;AACH;AAED;AACJ;AACA;;;AACe,YAAPY,OAAO,GAAG;AACV,cAAI,KAAKH,QAAL,KAAkB,IAAtB,EAA4B;AACxB,iBAAKA,QAAL,GAAgB,EAAhB;AACA,iBAAKJ,KAAL,CAAWQ,OAAX,CAAoBC,IAAD,IAAU;AACzBC,cAAAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,KAAKT,QAAhC,EAA0CK,IAAI,CAACF,OAA/C;AACH,aAFD;AAGH;;AACD,iBAAO,KAAKH,QAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIU,QAAAA,KAAK,CAAC,GAAGC,IAAJ,EAA6C;AAC9C,eAAKf,KAAL,CAAWY,IAAX,CAAgB,IAAItB,KAAJ,CAAU,GAAGyB,IAAb,CAAhB;AACA,eAAKC,eAAL;AACA,iBAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIC,QAAAA,KAAK,CAAC,GAAGF,IAAJ,EAA6C;AAC9C,eAAKf,KAAL,CAAWY,IAAX,CAAgB,IAAIrB,KAAJ,CAAU,GAAGwB,IAAb,CAAhB;AACA,eAAKC,eAAL;AACA,iBAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,QAAAA,MAAM,CAAC,GAAGH,IAAJ,EAA6C;AAC/C,eAAKf,KAAL,CAAWY,IAAX,CAAgB,IAAIrB,KAAJ,CAAU,GAAGwB,IAAb,CAAhB;AACA,cAAII,SAAgC,GAAG,EAAvC;;AACA,eAAK,IAAIC,IAAT,IAAiB;AAAA;AAAA,oCAASC,SAA1B,EAAqC;AACjC,gBAAIN,IAAI,CAACO,OAAL,CAAaF,IAAb,IAAqB,CAAzB,EAA4B;AACxBD,cAAAA,SAAS,CAACP,IAAV,CAAeQ,IAAf;AACH;AACJ;;AACD,eAAKpB,KAAL,CAAWY,IAAX,CAAgB,IAAIpB,SAAJ,CAAc,GAAG2B,SAAjB,CAAhB;AACA,eAAKH,eAAL;AACA,iBAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIO,QAAAA,SAAS,CAAC,GAAGR,IAAJ,EAAiC;AACtC,eAAKf,KAAL,CAAWY,IAAX,CAAgB,IAAIpB,SAAJ,CAAc,GAAGuB,IAAjB,CAAhB;AACA,eAAKC,eAAL;AACA,iBAAO,IAAP;AACH;;AAEOA,QAAAA,eAAe,GAAG;AACtB,cAAI,KAAKhB,KAAL,CAAWC,MAAX,KAAsB,CAA1B,EAA6B;AACzB,iBAAKI,OAAL,GAAe,KAAKmB,QAApB;AACH,WAFD,MAGK,IAAI,KAAKxB,KAAL,CAAWC,MAAX,KAAsB,CAA1B,EAA6B;AAC9B,iBAAKI,OAAL,GAAe,KAAKoB,QAApB;AACH,WAFI,MAGA;AACD,iBAAKpB,OAAL,GAAe,KAAKqB,WAApB;AACH;AACJ;;AAEOF,QAAAA,QAAQ,CAACG,MAAD,EAA6B;AACzC,iBAAO,KAAK3B,KAAL,CAAW,CAAX,EAAcK,OAAd,CAAsBsB,MAAtB,CAAP;AACH;;AAEOF,QAAAA,QAAQ,CAACE,MAAD,EAA6B;AACzC,iBAAO,KAAK3B,KAAL,CAAW,CAAX,EAAcK,OAAd,CAAsBsB,MAAtB,KAAiC,KAAK3B,KAAL,CAAW,CAAX,EAAcK,OAAd,CAAsBsB,MAAtB,CAAxC;AACH;;AAEOD,QAAAA,WAAW,CAACC,MAAD,EAA6B;AAC5C,eAAK,IAAIlB,IAAT,IAAiB,KAAKT,KAAtB,EAA6B;AACzB,gBAAI,CAACS,IAAI,CAACJ,OAAL,CAAasB,MAAb,CAAL,EAA2B;AACvB,qBAAO,KAAP;AACH;AACJ;;AACD,iBAAO,IAAP;AACH;;AAEDC,QAAAA,KAAK,GAAe;AAChB,cAAIC,UAAU,GAAG,IAAIzC,UAAJ,EAAjB;AACAyC,UAAAA,UAAU,CAACvB,GAAX,GAAiBX,QAAQ,EAAzB;AACA,eAAKK,KAAL,CAAWQ,OAAX,CAAmBC,IAAI,IAAIoB,UAAU,CAAC7B,KAAX,CAAiBY,IAAjB,CAAsBH,IAAtB,CAA3B;AACA,iBAAOoB,UAAP;AACH;;AA1H2C,O;;AA6HjCxC,MAAAA,M,GAAf,MAAeA,MAAf,CAAsB;AAKlBc,QAAAA,WAAW,CAAC,GAAGY,IAAJ,EAAiC;AAAA,eAJ5CR,OAI4C,GAJxB,EAIwB;AAAA,eAFlCuB,IAEkC,GAF3B;AAAA;AAAA,mCAE2B;AACxC,cAAIC,eAAe,GAAG,CAAC,CAAvB;AACA,cAAIC,GAAG,GAAGjB,IAAI,CAACd,MAAf;;AACA,eAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiC,GAApB,EAAyBjC,CAAC,EAA1B,EAA8B;AAC1B,gBAAI,OAAQgB,IAAI,CAAChB,CAAD,CAAZ,KAAqB,QAAzB,EAAmC;AAC/BgC,cAAAA,eAAe,GAAGhB,IAAI,CAAChB,CAAD,CAAtB;AACH,aAFD,MAGK;AACDgC,cAAAA,eAAe,GAAIhB,IAAI,CAAChB,CAAD,CAAL,CAAiCkC,GAAnD;AACH;;AACD,gBAAIF,eAAe,IAAI,CAAC,CAAxB,EAA2B;AACvB,oBAAMG,KAAK,CAAC,YAAD,CAAX;AACH;;AACD,iBAAKJ,IAAL,CAAUK,GAAV,CAAcJ,eAAd;;AAEA,gBAAI,KAAKxB,OAAL,CAAae,OAAb,CAAqBS,eAArB,IAAwC,CAA5C,EAA+C;AAAE;AAC7C,mBAAKxB,OAAL,CAAaK,IAAb,CAAkBmB,eAAlB;AACH;AACJ;;AACD,cAAIC,GAAG,GAAG,CAAV,EAAa;AACT,iBAAKzB,OAAL,CAAa6B,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAE,qBAAOD,CAAC,GAAGC,CAAX;AAAe,aAA7C,EADS,CACuC;AACnD;AACJ;;AAEDC,QAAAA,QAAQ,GAAW;AACf,iBAAO,KAAKhC,OAAL,CAAaiC,IAAb,CAAkB,GAAlB,CAAP,CADe,CACgB;AAClC;;AA/BiB,O;AAsCtB;AACA;AACA;;AACMlD,MAAAA,K,GAAN,MAAMA,KAAN,SAAoBD,MAApB,CAA2B;AAChBgB,QAAAA,OAAO,CAACsB,MAAD,EAA6B;AACvC;AACA,iBAAO,KAAKG,IAAL,CAAUW,EAAV,CAAad,MAAM,CAACG,IAApB,CAAP;AACH;;AAED5B,QAAAA,MAAM,GAAW;AACb,iBAAO,WAAW,KAAKqC,QAAL,EAAlB;AACH;;AARsB,O;AAW3B;AACA;AACA;;AACMhD,MAAAA,K,GAAN,MAAMA,KAAN,SAAoBF,MAApB,CAA2B;AAChBgB,QAAAA,OAAO,CAACsB,MAAD,EAA6B;AACvC;AACA,iBAAO,KAAKG,IAAL,CAAUY,GAAV,CAAcf,MAAM,CAACG,IAArB,CAAP;AACH;;AAED5B,QAAAA,MAAM,GAAW;AACb,iBAAO,WAAW,KAAKqC,QAAL,EAAlB;AACH;;AARsB,O;AAW3B;AACA;AACA;;AACM/C,MAAAA,S,GAAN,MAAMA,SAAN,SAAwBH,MAAxB,CAA+B;AACpBa,QAAAA,MAAM,GAAW;AACpB,iBAAO,eAAe,KAAKqC,QAAL,EAAtB;AACH;;AAEMlC,QAAAA,OAAO,CAACsB,MAAD,EAA6B;AACvC;AACA,iBAAO,CAAC,KAAKG,IAAL,CAAUW,EAAV,CAAad,MAAM,CAACG,IAApB,CAAR;AACH;;AAR0B,O","sourcesContent":["import { ecs } from \"./ECS\";\r\nimport { ECSEntity } from \"./ECSEntity\";\r\nimport { ECSMask } from \"./ECSMask\";\r\nimport { CompCtor, CompType, ECSModel } from \"./ECSModel\";\r\n\r\nlet macherId: number = 1;\r\n\r\n/**\r\n * 筛选规则间是“与”的关系\r\n * 比如：ecs.Macher.allOf(...).excludeOf(...)表达的是allOf && excludeOf，即实体有“这些组件” 并且 “没有这些组件”\r\n */\r\nexport class ECSMatcher implements ecs.IMatcher {\r\n    protected rules: BaseOf[] = [];\r\n    protected _indices: number[] | null = null;\r\n    public isMatch!: (entity: ECSEntity) => boolean;\r\n    public mid: number = -1;\r\n\r\n    private _key: string | null = null;\r\n    public get key(): string {\r\n        if (!this._key) {\r\n            let s = '';\r\n            for (let i = 0; i < this.rules.length; i++) {\r\n                s += this.rules[i].getKey()\r\n                if (i < this.rules.length - 1) {\r\n                    s += ' && '\r\n                }\r\n            }\r\n            this._key = s;\r\n        }\r\n        return this._key;\r\n    }\r\n\r\n    constructor() {\r\n        this.mid = macherId++;\r\n    }\r\n\r\n    /**\r\n     * 匹配器关注的组件索引。在创建Group时，Context根据组件id去给Group关联组件的添加和移除事件。\r\n     */\r\n    get indices() {\r\n        if (this._indices === null) {\r\n            this._indices = [];\r\n            this.rules.forEach((rule) => {\r\n                Array.prototype.push.apply(this._indices, rule.indices);\r\n            });\r\n        }\r\n        return this._indices;\r\n    }\r\n\r\n    /**\r\n     * 组件间是或的关系，表示关注拥有任意一个这些组件的实体。\r\n     * @param args 组件索引\r\n     */\r\n    anyOf(...args: CompType<ecs.IComp>[]): ECSMatcher {\r\n        this.rules.push(new AnyOf(...args));\r\n        this.bindMatchMethod();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 组件间是与的关系，表示关注拥有所有这些组件的实体。\r\n     * @param args 组件索引\r\n     */\r\n    allOf(...args: CompType<ecs.IComp>[]): ECSMatcher {\r\n        this.rules.push(new AllOf(...args));\r\n        this.bindMatchMethod();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 表示关注只拥有这些组件的实体\r\n     * \r\n     * 注意：\r\n     *  不是特殊情况不建议使用onlyOf。因为onlyOf会监听所有组件的添加和删除事件。\r\n     * @param args 组件索引\r\n     */\r\n    onlyOf(...args: CompType<ecs.IComp>[]): ECSMatcher {\r\n        this.rules.push(new AllOf(...args));\r\n        let otherTids: CompType<ecs.IComp>[] = [];\r\n        for (let ctor of ECSModel.compCtors) {\r\n            if (args.indexOf(ctor) < 0) {\r\n                otherTids.push(ctor);\r\n            }\r\n        }\r\n        this.rules.push(new ExcludeOf(...otherTids));\r\n        this.bindMatchMethod();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 不包含指定的任意一个组件\r\n     * @param args \r\n     */\r\n    excludeOf(...args: CompType<ecs.IComp>[]) {\r\n        this.rules.push(new ExcludeOf(...args));\r\n        this.bindMatchMethod();\r\n        return this;\r\n    }\r\n\r\n    private bindMatchMethod() {\r\n        if (this.rules.length === 1) {\r\n            this.isMatch = this.isMatch1;\r\n        }\r\n        else if (this.rules.length === 2) {\r\n            this.isMatch = this.isMatch2;\r\n        }\r\n        else {\r\n            this.isMatch = this.isMatchMore;\r\n        }\r\n    }\r\n\r\n    private isMatch1(entity: ECSEntity): boolean {\r\n        return this.rules[0].isMatch(entity);\r\n    }\r\n\r\n    private isMatch2(entity: ECSEntity): boolean {\r\n        return this.rules[0].isMatch(entity) && this.rules[1].isMatch(entity);\r\n    }\r\n\r\n    private isMatchMore(entity: ECSEntity): boolean {\r\n        for (let rule of this.rules) {\r\n            if (!rule.isMatch(entity)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    clone(): ECSMatcher {\r\n        let newMatcher = new ECSMatcher();\r\n        newMatcher.mid = macherId++;\r\n        this.rules.forEach(rule => newMatcher.rules.push(rule));\r\n        return newMatcher;\r\n    }\r\n}\r\n\r\nabstract class BaseOf {\r\n    indices: number[] = [];\r\n\r\n    protected mask = new ECSMask();\r\n\r\n    constructor(...args: CompType<ecs.IComp>[]) {\r\n        let componentTypeId = -1;\r\n        let len = args.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (typeof (args[i]) === \"number\") {\r\n                componentTypeId = args[i] as number;\r\n            }\r\n            else {\r\n                componentTypeId = (args[i] as CompCtor<ecs.IComp>).tid;\r\n            }\r\n            if (componentTypeId == -1) {\r\n                throw Error('存在没有注册的组件！');\r\n            }\r\n            this.mask.set(componentTypeId);\r\n\r\n            if (this.indices.indexOf(componentTypeId) < 0) { // 去重\r\n                this.indices.push(componentTypeId);\r\n            }\r\n        }\r\n        if (len > 1) {\r\n            this.indices.sort((a, b) => { return a - b; }); // 对组件类型id进行排序，这样关注相同组件的系统就能共用同一个group\r\n        }\r\n    }\r\n\r\n    toString(): string {\r\n        return this.indices.join('-'); // 生成group的key\r\n    }\r\n\r\n    abstract getKey(): string;\r\n\r\n    abstract isMatch(entity: ECSEntity): boolean;\r\n}\r\n\r\n/**\r\n * 用于描述包含任意一个这些组件的实体\r\n */\r\nclass AnyOf extends BaseOf {\r\n    public isMatch(entity: ECSEntity): boolean {\r\n        // @ts-ignore\r\n        return this.mask.or(entity.mask);\r\n    }\r\n\r\n    getKey(): string {\r\n        return 'anyOf:' + this.toString();\r\n    }\r\n}\r\n\r\n/**\r\n * 用于描述包含了“这些”组件的实体，这个实体除了包含这些组件还可以包含其他组件\r\n */\r\nclass AllOf extends BaseOf {\r\n    public isMatch(entity: ECSEntity): boolean {\r\n        // @ts-ignore\r\n        return this.mask.and(entity.mask);\r\n    }\r\n\r\n    getKey(): string {\r\n        return 'allOf:' + this.toString();\r\n    }\r\n}\r\n\r\n/**\r\n * 不包含指定的任意一个组件\r\n */\r\nclass ExcludeOf extends BaseOf {\r\n    public getKey(): string {\r\n        return 'excludeOf:' + this.toString();\r\n    }\r\n\r\n    public isMatch(entity: ECSEntity): boolean {\r\n        // @ts-ignore\r\n        return !this.mask.or(entity.mask);\r\n    }\r\n}"]}