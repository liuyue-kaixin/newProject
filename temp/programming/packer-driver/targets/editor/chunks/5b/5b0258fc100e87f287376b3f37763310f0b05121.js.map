{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/network/WebSock.ts"],"names":["WebSock","Logger","_ws","onConnected","onMessage","onError","onClosed","connect","options","readyState","WebSocket","CONNECTING","logNet","url","ip","port","protocol","binaryType","onmessage","event","data","onopen","onerror","onclose","send","buffer","OPEN","close","code","reason"],"mappings":";;;sCAiBaA,O;;;;;;;;;;;;;;;;;;;;;;;;;;AAXJC,MAAAA,M,iBAAAA,M;;;;;;AANT;AACA;AACA;AACA;AACA;AACA;;;AAMA;AACA;AACA;AACA;AACA;AACA;yBACaD,O,GAAN,MAAMA,OAAN,CAAiC;AAAA;AAAA,eAC5BE,GAD4B,GACJ,IADI;AACe;;AAEnD;AAHoC,eAIpCC,WAJoC,GAIwB,IAJxB;;AAKpC;AALoC,eAMpCC,SANoC,GAMJ,IANI;;AAOpC;AAPoC,eAQpCC,OARoC,GAQoB,IARpB;;AASpC;AAToC,eAUpCC,QAVoC,GAU0B,IAV1B;AAAA;;AAYpC;AACAC,QAAAA,OAAO,CAACC,OAAD,EAAe;AAClB,cAAI,KAAKN,GAAT,EAAc;AACV,gBAAI,KAAKA,GAAL,CAASO,UAAT,KAAwBC,SAAS,CAACC,UAAtC,EAAkD;AAC9C;AAAA;AAAA,oCAAOC,MAAP,CAAc,4CAAd;AACA,qBAAO,KAAP;AACH;AACJ;;AAED,cAAIC,GAAG,GAAG,IAAV;;AACA,cAAIL,OAAO,CAACK,GAAZ,EAAiB;AACbA,YAAAA,GAAG,GAAGL,OAAO,CAACK,GAAd;AACH,WAFD,MAGK;AACD,gBAAIC,EAAE,GAAGN,OAAO,CAACM,EAAjB;AACA,gBAAIC,IAAI,GAAGP,OAAO,CAACO,IAAnB;AACA,gBAAIC,QAAQ,GAAGR,OAAO,CAACQ,QAAvB;AACAH,YAAAA,GAAG,GAAI,GAAEG,QAAS,MAAKF,EAAG,IAAGC,IAAK,EAAlC;AACH;;AAED,eAAKb,GAAL,GAAW,IAAIQ,SAAJ,CAAcG,GAAd,CAAX;AACA,eAAKX,GAAL,CAASe,UAAT,GAAsBT,OAAO,CAACS,UAAR,GAAqBT,OAAO,CAACS,UAA7B,GAA0C,aAAhE;;AACA,eAAKf,GAAL,CAASgB,SAAT,GAAsBC,KAAD,IAAW;AAC5B,gBAAIf,SAAsB,GAAG,KAAKA,SAAlC;AACAA,YAAAA,SAAS,CAACe,KAAK,CAACC,IAAP,CAAT;AACH,WAHD;;AAIA,eAAKlB,GAAL,CAASmB,MAAT,GAAkB,KAAKlB,WAAvB;AACA,eAAKD,GAAL,CAASoB,OAAT,GAAmB,KAAKjB,OAAxB;AACA,eAAKH,GAAL,CAASqB,OAAT,GAAmB,KAAKjB,QAAxB;AACA,iBAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIkB,QAAAA,IAAI,CAACC,MAAD,EAA0B;AAC1B,cAAI,KAAKvB,GAAL,IAAY,KAAKA,GAAL,CAASO,UAAT,IAAuBC,SAAS,CAACgB,IAAjD,EAAuD;AACnD,iBAAKxB,GAAL,CAASsB,IAAT,CAAcC,MAAd;;AACA,mBAAO,CAAP;AACH;;AACD,iBAAO,CAAC,CAAR;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIE,QAAAA,KAAK,CAACC,IAAD,EAAgBC,MAAhB,EAAiC;AAClC,cAAI,KAAK3B,GAAT,EAAc;AACV,iBAAKA,GAAL,CAASyB,KAAT,CAAeC,IAAf,EAAqBC,MAArB;AACH;AACJ;;AAjEmC,O","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2021-07-03 16:13:17\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2022-09-09 17:42:19\r\n */\r\nimport { Logger } from \"../../core/common/log/Logger\";\r\nimport { ISocket, MessageFunc, NetData } from \"./NetInterface\";\r\n\r\ntype Connected = (event: any) => void;\r\n\r\n/**\r\n * WebSocket 封装\r\n * 1. 连接/断开相关接口\r\n * 2. 网络异常回调\r\n * 3. 数据发送与接收\r\n */\r\nexport class WebSock implements ISocket {\r\n    private _ws: WebSocket | null = null;              // websocket对象\r\n\r\n    /** 网络连接成功事件 */\r\n    onConnected: ((this: WebSocket, ev: Event) => any) | null = null;\r\n    /** 接受到网络数据事件 */\r\n    onMessage: MessageFunc | null = null;\r\n    /** 网络错误事件 */\r\n    onError: ((this: WebSocket, ev: Event) => any) | null = null;\r\n    /** 网络断开事件 */\r\n    onClosed: ((this: WebSocket, ev: CloseEvent) => any) | null = null;\r\n\r\n    /** 请求连接 */\r\n    connect(options: any) {\r\n        if (this._ws) {\r\n            if (this._ws.readyState === WebSocket.CONNECTING) {\r\n                Logger.logNet(\"websocket connecting, wait for a moment...\")\r\n                return false;\r\n            }\r\n        }\r\n\r\n        let url = null;\r\n        if (options.url) {\r\n            url = options.url;\r\n        }\r\n        else {\r\n            let ip = options.ip;\r\n            let port = options.port;\r\n            let protocol = options.protocol;\r\n            url = `${protocol}://${ip}:${port}`;\r\n        }\r\n\r\n        this._ws = new WebSocket(url);\r\n        this._ws.binaryType = options.binaryType ? options.binaryType : \"arraybuffer\";\r\n        this._ws.onmessage = (event) => {\r\n            let onMessage: MessageFunc = this.onMessage!;\r\n            onMessage(event.data);\r\n        };\r\n        this._ws.onopen = this.onConnected;\r\n        this._ws.onerror = this.onError;\r\n        this._ws.onclose = this.onClosed;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 发送数据 \r\n     * @param buffer 网络数据\r\n     */\r\n    send(buffer: NetData): number {\r\n        if (this._ws && this._ws.readyState == WebSocket.OPEN) {\r\n            this._ws.send(buffer);\r\n            return 1;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * 网络断开\r\n     * @param code      关闭码\r\n     * @param reason    关闭原因\r\n     */\r\n    close(code?: number, reason?: string) {\r\n        if (this._ws) {\r\n            this._ws.close(code, reason);\r\n        }\r\n    }\r\n}"]}