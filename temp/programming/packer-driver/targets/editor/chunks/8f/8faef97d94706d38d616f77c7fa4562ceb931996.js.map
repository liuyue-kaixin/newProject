{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/libs/ecs/ECSSystem.ts"],"names":["ECSComblockSystem","ECSRootSystem","ECSSystem","ECSModel","constructor","group","dt","enteredEntities","removedEntities","hasEntityEnter","hasEntityRemove","hasUpdate","tmpExecute","execute","hasOwnProperty","Object","prototype","getPrototypeOf","call","hasFirstUpdate","Map","execute1","createGroup","filter","watchEntityEnterAndRemove","execute0","updateOnce","init","onDestroy","hasEntity","count","size","entities","values","entity","entityEnter","clear","matchEntities","firstUpdate","update","entityRemove","s","executeSystemFlows","systemCnt","add","system","Array","push","apply","comblockSystems","length","systems","forEach","sys","i","_comblockSystems"],"mappings":"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","sourcesContent":["import { ecs } from \"./ECS\";\r\nimport { ECSEntity } from \"./ECSEntity\";\r\nimport { ECSGroup } from \"./ECSGroup\";\r\nimport { ECSModel } from \"./ECSModel\";\r\n\r\n/** 继承此类实现具体业务逻辑的系统 */\r\nexport abstract class ECSComblockSystem<E extends ECSEntity = ECSEntity> {\r\n    static s: boolean = true;\r\n\r\n    protected group: ECSGroup<E>;\r\n    protected dt: number = 0;\r\n\r\n    private enteredEntities: Map<number, E> = null!;\r\n    private removedEntities: Map<number, E> = null!;\r\n\r\n    private hasEntityEnter: boolean = false;\r\n    private hasEntityRemove: boolean = false;\r\n    private hasUpdate: boolean = false;\r\n\r\n    private tmpExecute: ((dt: number) => void) | null = null;\r\n    private execute!: (dt: number) => void;\r\n\r\n    /** 构造函数 */\r\n    constructor() {\r\n        let hasOwnProperty = Object.hasOwnProperty;\r\n        let prototype = Object.getPrototypeOf(this);\r\n        let hasEntityEnter = hasOwnProperty.call(prototype, 'entityEnter');\r\n        let hasEntityRemove = hasOwnProperty.call(prototype, 'entityRemove');\r\n        let hasFirstUpdate = hasOwnProperty.call(prototype, 'firstUpdate');\r\n        let hasUpdate = hasOwnProperty.call(prototype, 'update');\r\n\r\n        this.hasEntityEnter = hasEntityEnter;\r\n        this.hasEntityRemove = hasEntityRemove;\r\n        this.hasUpdate = hasUpdate;\r\n\r\n        if (hasEntityEnter || hasEntityRemove) {\r\n            this.enteredEntities = new Map<number, E>();\r\n            this.removedEntities = new Map<number, E>();\r\n\r\n            this.execute = this.execute1;\r\n            this.group = ECSModel.createGroup(this.filter());\r\n            this.group.watchEntityEnterAndRemove(this.enteredEntities, this.removedEntities);\r\n        }\r\n        else {\r\n            this.execute = this.execute0;\r\n            this.group = ECSModel.createGroup(this.filter());\r\n        }\r\n\r\n        if (hasFirstUpdate) {\r\n            this.tmpExecute = this.execute;\r\n            this.execute = this.updateOnce;\r\n        }\r\n    }\r\n\r\n    /** 系统实始化 */\r\n    init(): void {\r\n\r\n    }\r\n\r\n    /** 系统释放事件 */\r\n    onDestroy(): void {\r\n\r\n    }\r\n\r\n    /** 是否存在实体 */\r\n    hasEntity(): boolean {\r\n        return this.group.count > 0;\r\n    }\r\n\r\n    /**\r\n     * 先执行entityEnter，最后执行firstUpdate\r\n     * @param dt \r\n     * @returns \r\n     */\r\n    private updateOnce(dt: number) {\r\n        if (this.group.count === 0) {\r\n            return;\r\n        }\r\n\r\n        this.dt = dt;\r\n\r\n        // 处理刚进来的实体\r\n        if (this.enteredEntities.size > 0) {\r\n            var entities = this.enteredEntities.values();\r\n            for (let entity of entities) {\r\n                (this as unknown as ecs.IEntityEnterSystem).entityEnter(entity);\r\n            }\r\n            this.enteredEntities.clear();\r\n        }\r\n\r\n        // 只执行firstUpdate\r\n        for (let entity of this.group.matchEntities) {\r\n            (this as unknown as ecs.ISystemFirstUpdate).firstUpdate(entity);\r\n        }\r\n\r\n        this.execute = this.tmpExecute!;\r\n        this.execute(dt);\r\n        this.tmpExecute = null;\r\n    }\r\n\r\n    /**\r\n     * 只执行update\r\n     * @param dt \r\n     * @returns \r\n     */\r\n    private execute0(dt: number): void {\r\n        if (this.group.count === 0) return;\r\n\r\n        this.dt = dt;\r\n\r\n        // 执行update\r\n        if (this.hasUpdate) {\r\n            for (let entity of this.group.matchEntities) {\r\n                (this as unknown as ecs.ISystemUpdate).update(entity);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 先执行entityRemove，再执行entityEnter，最后执行update\r\n     * @param dt \r\n     * @returns \r\n     */\r\n    private execute1(dt: number): void {\r\n        if (this.removedEntities.size > 0) {\r\n            if (this.hasEntityRemove) {\r\n                var entities = this.removedEntities.values();\r\n                for (let entity of entities) {\r\n                    (this as unknown as ecs.IEntityRemoveSystem).entityRemove(entity);\r\n                }\r\n            }\r\n            this.removedEntities.clear();\r\n        }\r\n\r\n        if (this.group.count === 0) return;\r\n\r\n        this.dt = dt;\r\n\r\n        // 处理刚进来的实体\r\n        if (this.enteredEntities!.size > 0) {\r\n            if (this.hasEntityEnter) {\r\n                var entities = this.enteredEntities!.values();\r\n                for (let entity of entities) {\r\n                    (this as unknown as ecs.IEntityEnterSystem).entityEnter(entity);\r\n                }\r\n            }\r\n            this.enteredEntities!.clear();\r\n        }\r\n\r\n        // 执行update\r\n        if (this.hasUpdate) {\r\n            for (let entity of this.group.matchEntities) {\r\n                (this as unknown as ecs.ISystemUpdate).update(entity);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 实体过滤规则\r\n     * \r\n     * 根据提供的组件过滤实体。\r\n     */\r\n    abstract filter(): ecs.IMatcher;\r\n}\r\n\r\n/** 根System，对游戏中的System遍历从这里开始，一个System组合中只能有一个RootSystem，可以有多个并行的RootSystem */\r\nexport class ECSRootSystem {\r\n    private executeSystemFlows: ECSComblockSystem[] = [];\r\n    private systemCnt: number = 0;\r\n\r\n    add(system: ECSSystem | ECSComblockSystem) {\r\n        if (system instanceof ECSSystem) {\r\n            // 将嵌套的System都“摊平”，放在根System中进行遍历，减少execute的频繁进入退出。\r\n            Array.prototype.push.apply(this.executeSystemFlows, system.comblockSystems);\r\n        }\r\n        else {\r\n            this.executeSystemFlows.push(system as ECSComblockSystem);\r\n        }\r\n        this.systemCnt = this.executeSystemFlows.length;\r\n        return this;\r\n    }\r\n\r\n    init() {\r\n        // 自动注册系统组件\r\n        ECSModel.systems.forEach(sys => this.add(sys));\r\n\r\n        // 初始化组件\r\n        this.executeSystemFlows.forEach(sys => sys.init());\r\n    }\r\n\r\n    execute(dt: number) {\r\n        for (let i = 0; i < this.systemCnt; i++) {\r\n            // @ts-ignore\r\n            this.executeSystemFlows[i].execute(dt);\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.executeSystemFlows.forEach(sys => sys.onDestroy());\r\n    }\r\n}\r\n\r\n/** 系统组合器，用于将多个相同功能模块的系统逻辑上放在一起，系统也可以嵌套系统 */\r\nexport class ECSSystem {\r\n    private _comblockSystems: ECSComblockSystem[] = [];\r\n    get comblockSystems() {\r\n        return this._comblockSystems;\r\n    }\r\n\r\n    add(system: ECSSystem | ECSComblockSystem) {\r\n        if (system instanceof ECSSystem) {\r\n            Array.prototype.push.apply(this._comblockSystems, system._comblockSystems);\r\n            system._comblockSystems.length = 0;\r\n        }\r\n        else {\r\n            this._comblockSystems.push(system as ECSComblockSystem);\r\n        }\r\n        return this;\r\n    }\r\n}"]}