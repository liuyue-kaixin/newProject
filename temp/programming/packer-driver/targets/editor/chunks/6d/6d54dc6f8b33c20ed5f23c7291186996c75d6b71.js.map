{"version":3,"sources":["file:///Volumes/SSD%201/ccProject/assets/script/battle/collision/Body.ts"],"names":["cBody","Mat3","Quat","Vec2","Vec3","Dirty","constructor","obj","id","fid","mask","group","shape","object","weight","isDirty","lower","upper","aabb","isRemove","isRetrieve","isIdentity","inCollider","raidus","points","center","rotMat3","halfSize","scale","isAgent","maxNeighbors","neighborDist","maxVelocity","newVelocity","prefVelocity","orcaLines","updateBound","NON","hasChangeDirty","set","velocity","tryVelocity","aabbChange","S","s","getScale","x","y","z","R","rot","getRotation","fromQuat","equals","IDENTITY","updateAABB","getRotMat3","AABB","p","getPosition","clear","length","node","worldScale","worldPosition","worldRotation","getCenter","getRaidus","radius","Math","max","getHalfSize","size","getPoints","m","sp","point2Ds","i","undefined","m00","m03","m06","m01","m04","m07"],"mappings":"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","sourcesContent":["import { Mat3, Quat, Vec2, Vec3 } from \"cc\";\nimport { Dirty, cObject } from \"./Object\";\nimport { ShapeType, cShape } from \"./Shape\";\nimport { Line } from \"./Maths\";\n\n\nexport class cBody {\n\n    id: number = 0;\n    fid:number = -1;\n    mask: number = 0;\n    group: number = 0;\n    shape: cShape = null;\n    object: cObject = null;\n    weight: number = 0;\n\n    //脏区更新标记\n    isDirty: number = 1 | 2 | 4;\n\n    //缓存\n    lower: number = 0;\n    upper: number = 0;\n    aabb: Array<number> = [0, 0, 0, 0, 0, 0];\n\n    //状态\n    isRemove: boolean = false;\n    isRetrieve: boolean = true;\n    isIdentity: boolean = true;\n    inCollider: boolean = false;\n\n    //缓存\n    raidus: number = 0;\n    points: Array<Vec2> = [];\n    center: Vec3 = new Vec3();\n    rotMat3: Mat3 = new Mat3();\n    halfSize: Vec3 = new Vec3();\n    scale: Vec3 = new Vec3(1,1,1);\n\n\n    //Agent\n    isAgent:boolean = false;  //Agent 开关\n    maxNeighbors: number = 0;\n    neighborDist: number = 0; //物体半径\n    maxVelocity: number = 0;  //最大速度\n    newVelocity:Vec3 = new Vec3();\n    prefVelocity:Vec3 = new Vec3();\n    orcaLines:Array<Line> = [];\n\n    constructor(obj: cObject) {\n        this.object = obj;\n    }\n    \n\n    updateBound(isDirty: Dirty = Dirty.NON) {\n\n        let object = this.object;\n        isDirty|=object.hasChangeDirty();\n        \n        if(this.isAgent){\n            this.newVelocity.set(object.velocity); //当前速度\n            this.prefVelocity.set(object.tryVelocity);//期望速度\n\n            //强制跟随，在Agent没碰撞情况下，保证全速跟随\n            object.velocity.set(object.tryVelocity);\n           \n        }\n\n        if (isDirty > 0) {\n\n            let aabbChange = false;\n            const shape = this.shape;\n            \n            if(isDirty & Dirty.S){\n                aabbChange = true;\n                let s = this.getScale();\n                this.scale.x = (s.x >= 0 ? s.x : -s.x);\n                this.scale.y = (s.y >= 0 ? s.y : -s.y);\n                this.scale.z = (s.z >= 0 ? s.z : -s.z);\n            }\n\n            if (isDirty & Dirty.R) {\n                //旋转更新aabb\n                this.isIdentity = false;\n                let rot = this.getRotation();\n                this.rotMat3.fromQuat(rot); //计算缓存Mat3\n\n                if (rot.equals(Quat.IDENTITY, 0.0001)) {\n                    this.isIdentity = true;\n                }\n\n                aabbChange = true;\n            }\n\n            if(aabbChange) shape.updateAABB(this.getScale() , this.getRotMat3(), this.isIdentity);\n\n            const AABB = this.aabb;// world aabb\n            const aabb = shape.aabb; //local aabb\n            const p = this.getPosition(); //world postion\n\n            AABB[0] = aabb[0] + p.x;\n            AABB[1] = aabb[1] + p.y;\n            AABB[2] = aabb[2] + p.z;\n\n            AABB[3] = aabb[3] + p.x;\n            AABB[4] = aabb[4] + p.y;\n            AABB[5] = aabb[5] + p.z;\n\n            this.isDirty = 1 | 2 | 4 | 8; //设置脏区标记\n\n            return true;\n        }\n\n        return false;\n    }\n\n    clear() {\n        this.shape = null;\n        this.object = null;\n        this.isRemove = false;\n        this.inCollider = false;\n        this.orcaLines.length = 0;\n    }\n\n\n    //body 坐标统一使用世界数据进行计算\n    getRotMat3() { return this.rotMat3;} //world rotate mat3\n    getScale() { return this.object.node.worldScale; } // world scale \n    getPosition() { return this.object.node.worldPosition; } //wold position\n    getRotation() { return this.object.node.worldRotation; } //world rotation\n\n\n   \n\n    getCenter() {\n\n        if (this.isDirty & 1) {\n            this.isDirty &= (~1);\n\n            const aabb = this.aabb;\n            const center = this.center;\n            center.x = (aabb[0] + aabb[3]) * 0.5;\n            center.y = (aabb[1] + aabb[4]) * 0.5;\n            center.z = (aabb[2] + aabb[5]) * 0.5;\n        }\n\n        return this.center; //world center\n    }\n\n    getRaidus() {\n\n        if (this.isDirty & 2) {\n            this.isDirty &= (~2);\n\n            const scale = this.scale;\n            const raidus = this.shape.radius;\n            this.raidus = Math.max(scale.x, scale.y, scale.z)* raidus;\n        \n        }\n\n        return this.raidus; //world raidus\n    }\n\n    getHalfSize() {\n        \n        if (this.isDirty & 4) {\n            this.isDirty &= (~4);\n\n            const scale = this.scale;\n            const size = this.shape.size;\n            const halfSize = this.halfSize;\n           \n            halfSize.x = scale.x * size.x*0.5;\n            halfSize.y = scale.y * size.y*0.5;\n            halfSize.z = scale.z * size.z*0.5;\n\n        }\n\n        return this.halfSize; //world halfsize\n    }\n\n    getPoints(){\n\n        if (this.isDirty & 8) {\n            this.isDirty &= (~8);\n\n            const scale = this.scale;\n            const m = this.getRotMat3();\n            const center = this.getCenter();\n           \n            let points = this.points;\n            let sp = this.shape.point2Ds;\n\n            let length = sp.length;\n            for(let i = 0;i < length;i++){\n                let x = sp[i].x * scale.x;\n                let y = sp[i].y * scale.y;\n                let z = 0;\n                if(points[i] == undefined) { points[i] = new Vec2()}\n                points[i].x = (x * m.m00 + y * m.m03 + z * m.m06) + center.x;\n                points[i].y = (x * m.m01 + y * m.m04 + z * m.m07) + center.y;\n                // out.z = x * m.m02 + y * m.m05 + z * m.m08;\n\n            }\n            points.length = length;\n        }\n\n        return this.points; //world points\n    }\n}\n"]}