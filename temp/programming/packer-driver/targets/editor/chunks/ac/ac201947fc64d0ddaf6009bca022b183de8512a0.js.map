{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/core/gui/layer/UIMap.ts"],"names":["TreeNode","UIMap","id","pid","parent","child","name","panel","manager","nodes","Map","init","data","key","d","n","parseInt","set","forEach","value","get","push","pathFinding","startId","endId","start","end","close","findUp","open","remove","paths_close","paths_open","paths","current","release","clear"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2022-06-14 19:35:16\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2022-09-02 13:27:20\r\n */\r\nimport { LayerManager } from \"./LayerManager\";\r\n\r\n/** 界面关系树节点 */\r\nclass TreeNode {\r\n    id!: number;\r\n    /** 父节点编号 */\r\n    pid!: number;\r\n    /** 父节点 */\r\n    parent: TreeNode | null = null;\r\n    /** 子节点 */\r\n    child: Array<TreeNode> = [];\r\n    /** 界面名 */\r\n    name!: string;\r\n    /** 界面代号（用于同一界面有多条路径时） */\r\n    panel!: string;\r\n}\r\n\r\n/** 用于树形结构两节点之间的寻路功能 */\r\nexport class UIMap {\r\n    /** UI层级管理器 */\r\n    private manager!: LayerManager;\r\n    /** 界面节点树 */\r\n    private nodes: Map<number, TreeNode> = new Map<number, TreeNode>();\r\n\r\n    /** 创建UI关系树 */\r\n    init(manager: LayerManager, data: any) {\r\n        this.manager = manager;\r\n\r\n        // 解析数据\r\n        for (var key in data) {\r\n            var d = data[key];\r\n            var n = new TreeNode();\r\n            n.id = parseInt(key);\r\n            n.pid = d.parent;\r\n            n.name = d.name;\r\n            n.panel = d.panel;\r\n            this.nodes.set(n.id, n);\r\n        }\r\n\r\n        // 设置节点关系\r\n        this.nodes.forEach((value: TreeNode, key: number) => {\r\n            value.parent = this.nodes.get(value.pid)!;\r\n            if (value.parent)\r\n                value.parent.child.push(value);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 树节点寻路\r\n     * @param startId 起始节点编号\r\n     * @param endId   结束节点编号\r\n     * @returns \r\n     */\r\n    pathFinding(startId: number, endId: number): any {\r\n        var start: TreeNode = this.nodes.get(startId)!;\r\n        var end: TreeNode = this.nodes.get(endId)!;\r\n\r\n        var close: Array<TreeNode> = this.findUp(start);\r\n        var open: Array<TreeNode> = this.findUp(end);\r\n\r\n        close.forEach(value => {\r\n            this.manager.remove(value.id, true);\r\n        });\r\n\r\n        open.forEach(value => {\r\n            this.manager.open(value.id);\r\n        });\r\n\r\n        return { paths_close: close, paths_open: open };\r\n    }\r\n\r\n    /** 向上寻找子节点直到根节点停止，并返回节点路径数组 */\r\n    private findUp(start: TreeNode): TreeNode[] {\r\n        var paths: TreeNode[] = [];\r\n        var current: TreeNode = start;\r\n        while (current.parent != null) {        // 父级为空时为根节点\r\n            paths.push(current);\r\n            current = current.parent!;\r\n        }\r\n        return paths;\r\n    }\r\n\r\n    /** 释放所有节点 */\r\n    release() {\r\n        this.nodes.clear();\r\n    }\r\n}\r\n"]}