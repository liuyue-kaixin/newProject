{"version":3,"sources":["file:///Volumes/SSD/ccProject/assets/script/battle/collision/Maths.ts"],"names":["Line","Vector2","RVOMath","weight","direction","point","constructor","x","y","multiply","vector1","vector2","multiply2","scalar","vector","division","subtract","addition","abs","sqrt","absSq","normalize","det","distSqPointLineSegment","vector3","r","fabs","Math","leftOf","a","b","c","sqr","transfromFloat","value","floor","RVO_EPSILON","RVO_POSITIVEINFINITY"],"mappings":"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","sourcesContent":["export  class Line\n{\n    public weight:number = 0.5;\n    public direction: Vector2;\n    public point: Vector2;\n}\n\nexport  class Vector2\n{\n    public x: number;\n    public y: number;\n    constructor(x: number = 0, y: number = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    public static multiply(vector1: Vector2, vector2: Vector2)\n    {\n        return vector1.x * vector2.x + vector1.y * vector2.y;\n    }\n\n\n    public static multiply2(scalar: number, vector: Vector2)\n    {\n        return new Vector2(vector.x * scalar, vector.y * scalar);\n    }\n\n \n    public static division(vector: Vector2, scalar: number)\n    {\n        if(scalar == 0 ) scalar = 1;\n        return new Vector2(vector.x / scalar, vector.y / scalar);\n    }\n\n \n    public static subtract(vector1: Vector2, vector2: Vector2)\n    {\n        return new Vector2(vector1.x - vector2.x, vector1.y - vector2.y)\n    }\n\n \n    public static addition(vector1: Vector2, vector2: Vector2)\n    {\n        return new Vector2(vector1.x + vector2.x, vector1.y + vector2.y);\n    }\n}\n\n\nexport class RVOMath\n{\n    public static readonly RVO_EPSILON = 0.00001;\n    public static readonly RVO_POSITIVEINFINITY = 10000000000000;\n\n    public static abs(vector: Vector2)\n    {\n        return this.sqrt(this.absSq(vector));\n    }\n\n    public static absSq(vector: Vector2)\n    {\n        return Vector2.multiply(vector, vector);\n    }\n\n    public static normalize(vector: Vector2)\n    {\n        return Vector2.division(vector, this.abs(vector));\n    }\n\n    public static det(vector1: Vector2, vector2: Vector2)\n    {\n        return vector1.x * vector2.y - vector1.y * vector2.x;\n    }\n\n    public static distSqPointLineSegment(vector1: Vector2, vector2: Vector2, vector3: Vector2)\n    {\n        let r = Vector2.multiply(Vector2.subtract(vector3, vector1), Vector2.subtract(vector2, vector1)) / this.absSq(Vector2.subtract(vector2, vector1));\n        if (r < 0)\n        {\n            return this.absSq(Vector2.subtract(vector3, vector1));\n        }\n        if (r > 1)\n        {\n            return this.absSq(Vector2.subtract(vector3, vector2));\n        }\n        return this.absSq(Vector2.subtract(vector3, Vector2.addition(vector1, Vector2.multiply2(r, Vector2.subtract(vector2, vector1)))));\n    }\n\n    public static fabs(scalar: number)\n    {\n        return Math.abs(scalar);\n    }\n\n    public static leftOf(a: Vector2, b: Vector2, c: Vector2)\n    {\n        return this.det(Vector2.subtract(a, c), Vector2.subtract(b, a));\n    }\n\n    public static sqr(scalar: number)\n    {\n        return scalar * scalar;\n    }\n\n    public static sqrt(scalar: number)\n    {\n        return Math.sqrt(scalar);\n    }\n\n    public static transfromFloat(value: number)\n    {\n        return Math.floor(value * 10) / 10;\n    }\n}"]}