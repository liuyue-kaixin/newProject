{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/libs/gui/language/Language.ts"],"names":["LanguageManager","EventDispatcher","Logger","LanguageData","LanguagePack","LanguageEvent","_languages","_languagePack","_defaultLanguage","languages","default","lang","current","pack","isExist","indexOf","getNextLang","supportLangs","index","newLanguage","length","setLanguage","language","callback","toLowerCase","console","log","loadLanguageAssets","logConfig","updateLanguage","dispatchEvent","CHANGE","getLangByID","labId","releaseLanguageAssets","RELEASE_RES"],"mappings":"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","sourcesContent":["import { EventDispatcher } from \"../../../core/common/event/EventDispatcher\";\r\nimport { Logger } from \"../../../core/common/log/Logger\";\r\nimport { LanguageData } from \"./LanguageData\";\r\nimport { LanguagePack } from \"./LanguagePack\";\r\n\r\nexport enum LanguageEvent {\r\n    /** 语种变化事件 */\r\n    CHANGE = 'LanguageEvent.CHANGE',\r\n    /** 语种资源释放事件 */\r\n    RELEASE_RES = \"LanguageEvent.RELEASE_RES\"\r\n}\r\n\r\nexport class LanguageManager extends EventDispatcher {\r\n    private _languages: Array<string> = [\"zh\", \"en\", \"tr\"];        // 支持的语言\r\n    private _languagePack: LanguagePack = new LanguagePack();    // 语言包\r\n    private _defaultLanguage: string = \"zh\";                     // 默认语言\r\n\r\n    /** 支持的多种语言列表 */\r\n    get languages(): string[] {\r\n        return this._languages;\r\n    }\r\n    set languages(languages: Array<string>) {\r\n        this._languages = languages;\r\n    }\r\n\r\n    /** 设置的当前语言列表中没有配置时，使用默认语言 */\r\n    set default(lang: string) {\r\n        this._defaultLanguage = lang || \"zh\";\r\n    }\r\n\r\n    /** 获取当前语种 */\r\n    get current(): string {\r\n        return LanguageData.current;\r\n    }\r\n\r\n    /** 语言包 */\r\n    get pack(): LanguagePack {\r\n        return this._languagePack;\r\n    }\r\n\r\n    isExist(lang: string): boolean {\r\n        return this.languages.indexOf(lang) > -1;\r\n    }\r\n\r\n    /**\r\n     * 获取下一个语种\r\n     */\r\n    getNextLang(): string {\r\n        let supportLangs = this.languages;\r\n        let index = supportLangs.indexOf(LanguageData.current);\r\n        let newLanguage = supportLangs[(index + 1) % supportLangs.length];\r\n        return newLanguage;\r\n    }\r\n\r\n    /**\r\n     * 改变语种，会自动下载对应的语种，下载完成回调\r\n     * @param language \r\n     */\r\n    setLanguage(language: string, callback: (success: boolean) => void) {\r\n        if (language == null || language == \"\") {\r\n            language = this._defaultLanguage;\r\n        }\r\n        else {\r\n            language = language.toLowerCase();\r\n        }\r\n\r\n        let index = this.languages.indexOf(language);\r\n        if (index < 0) {\r\n            console.log(`当前不支持【${language}】语言，将自动切换到【${this._defaultLanguage}】语言`);\r\n            language = this._defaultLanguage;\r\n        }\r\n\r\n        if (language === LanguageData.current) {\r\n            callback(false);\r\n            return;\r\n        }\r\n\r\n        this.loadLanguageAssets(language, (lang: string) => {\r\n            Logger.logConfig(`当前语言为【${language}】`);\r\n            LanguageData.current = language;\r\n            this._languagePack.updateLanguage(language);\r\n            this.dispatchEvent(LanguageEvent.CHANGE, lang);\r\n            callback(true);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 根据data获取对应语种的字符\r\n     * @param labId \r\n     * @param arr \r\n     */\r\n    getLangByID(labId: string): string {\r\n        return LanguageData.getLangByID(labId);\r\n    }\r\n\r\n    /**\r\n     * 下载语言包素材资源\r\n     * 包括语言json配置和语言纹理包\r\n     * @param lang \r\n     * @param callback \r\n     */\r\n    loadLanguageAssets(lang: string, callback: Function) {\r\n        lang = lang.toLowerCase();\r\n        return this._languagePack.loadLanguageAssets(lang, callback);\r\n    }\r\n\r\n    /**\r\n     * 释放不需要的语言包资源\r\n     * @param lang \r\n     */\r\n    releaseLanguageAssets(lang: string) {\r\n        lang = lang.toLowerCase();\r\n        this._languagePack.releaseLanguageAssets(lang);\r\n        this.dispatchEvent(LanguageEvent.RELEASE_RES, lang);\r\n    }\r\n}"]}