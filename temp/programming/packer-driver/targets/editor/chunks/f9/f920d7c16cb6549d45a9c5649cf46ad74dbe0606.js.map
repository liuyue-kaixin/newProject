{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/gui/badge/RoundRectMask.ts"],"names":["CCFloat","Component","game","Game","Mask","UITransform","_decorator","ccclass","property","executeInEditMode","disallowMultiple","requireComponent","menu","RoundRectMask","type","tooltip","mask","radius","propRadius","r","updateMask","onEnable","getComponent","_radius","uiTransform","node","Math","min","width","onDraw","bind","_updateGraphics","Type","GRAPHICS_RECT","graphics","_graphics","clear","height","x","anchorX","y","anchorY","roundRect","renderType","RENDER_TYPE_CANVAS","stroke","fill"],"mappings":"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","sourcesContent":["import { CCFloat, Component, game, Game, Graphics, Mask, UITransform, _decorator } from 'cc';\r\nconst { ccclass, property, executeInEditMode, disallowMultiple, requireComponent, menu } = _decorator;\r\n\r\n@ccclass('RoundRectMask')\r\n@executeInEditMode(true)\r\n@disallowMultiple(true)\r\n@requireComponent(Mask)\r\n@menu('渲染组件/圆角遮罩')\r\nexport class RoundRectMask extends Component {\r\n    // 圆角半径\r\n    @property({ type: CCFloat, tooltip: '圆角半径:\\n0-1之间为最小边长比例值, \\n>1为具体像素值' })\r\n    private propRadius: number = 50;\r\n\r\n    mask: Mask | null = null;\r\n\r\n    public get radius(): number {\r\n        return this.propRadius;\r\n    }\r\n\r\n    public set radius(r: number) {\r\n        this.propRadius = r;\r\n        this.updateMask(r);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.mask = this.getComponent(Mask);\r\n        this.updateMask(this.radius);\r\n    }\r\n\r\n    private updateMask(r: number) {\r\n        let _radius = r >= 0 ? r : 0;\r\n        if (_radius < 1) {\r\n            const uiTransform = this.node.getComponent(UITransform);\r\n\r\n            _radius = Math.min(uiTransform?.width || 0, uiTransform?.width || 0) * _radius;\r\n        }\r\n\r\n        if (this.mask) {\r\n            // @ts-ignore.\r\n            this.mask['radius'] = _radius;\r\n            // @ts-ignore.\r\n            this.mask['onDraw'] = this.onDraw.bind(this.mask);\r\n            this.mask['_updateGraphics'] = this._updateGraphics.bind(this.mask);\r\n            this.mask.type = Mask.Type.GRAPHICS_RECT;\r\n        }\r\n    }\r\n\r\n    private _updateGraphics() {\r\n        // @ts-ignore.\r\n        let graphics = this._graphics;\r\n        if (!graphics) {\r\n            return;\r\n        }\r\n        this.onDraw(graphics);\r\n    }\r\n\r\n    /**\r\n     * mask 用于绘制罩子的函数.\r\n     * this 指向mask 对象,需要特别注意.\r\n     * @param graphics\r\n     */\r\n    protected onDraw(graphics: Graphics) {\r\n        const uiTransform = this.node.getComponent(UITransform) as UITransform;\r\n\r\n        graphics.clear();\r\n        let width = uiTransform.width;\r\n        let height = uiTransform.height;\r\n        let x = -width * uiTransform.anchorX;\r\n        let y = -height * uiTransform.anchorY;\r\n        graphics.roundRect(x, y, width, height, this.radius || 0);\r\n        if (game.renderType === Game.RENDER_TYPE_CANVAS) {\r\n            graphics.stroke();\r\n        }\r\n        else {\r\n            graphics.fill();\r\n        }\r\n    }\r\n}\r\n"]}