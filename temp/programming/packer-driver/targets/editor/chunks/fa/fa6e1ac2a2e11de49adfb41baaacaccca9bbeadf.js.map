{"version":3,"sources":["file:///Volumes/SSD%201/ccProject/extensions/oops-plugin-framework/assets/libs/network/NetManager.ts"],"names":["NetManager","_channels","getInstance","_instance","setNetNode","node","channelId","removeNetNode","connect","options","send","buf","force","request","reqProtocol","rspObject","showTips","requestUnique","close","code","reason","closeSocket"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2022-09-01 18:00:28\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2022-09-09 18:10:50\r\n */\r\nimport { CallbackObject, IRequestProtocol, NetData } from \"./NetInterface\";\r\nimport { NetConnectOptions, NetNode } from \"./NetNode\";\r\n\r\n/*\r\n * 网络节点管理类\r\n */\r\nexport class NetManager {\r\n    private static _instance: NetManager;\r\n    protected _channels: { [key: number]: NetNode } = {};\r\n\r\n    /** 网络管理单例对象 */\r\n    static getInstance(): NetManager {\r\n        if (!this._instance) {\r\n            this._instance = new NetManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * 添加网络节点\r\n     * @param node       网络节点\r\n     * @param channelId  通道编号\r\n     * @example\r\n    // 游戏服务器心跳协议\r\n    class GameProtocol extends NetProtocolPako { \r\n        // 自定义心跳协议\r\n        getHearbeat(): NetData { \r\n            return '{\"action\":\"LoginAction\",\"method\":\"heart\",\"data\":\"null\",\"callback\":\"LoginAction_heart\"}';\r\n        }\r\n    }\r\n        \r\n    var net = new NetNodeGame();\r\n    var ws = new WebSock();        // WebSocket 网络连接对象\r\n    var gp = new GameProtocol();   // 网络通讯协议对象\r\n    var gt = new NetGameTips()     // 网络提示对象\r\n    net.init(ws, gp, gt);\r\n    NetManager.getInstance().setNetNode(net, NetChannelType.Game);\r\n     */\r\n    setNetNode(node: NetNode, channelId: number = 0) {\r\n        this._channels[channelId] = node;\r\n    }\r\n\r\n    /** 移除Node */\r\n    removeNetNode(channelId: number) {\r\n        delete this._channels[channelId];\r\n    }\r\n\r\n    /**\r\n     * 网络节点连接服务器\r\n     * @param options      连接参数\r\n     * @param channelId    通道编号\r\n     * @example\r\n    var options = {\r\n        url: 'ws://127.0.0.1:3000',\r\n        autoReconnect: 0            // -1 永久重连，0不自动重连，其他正整数为自动重试次数\r\n    }\r\n    NetManager.getInstance().connect(options, NetChannelType.Game);\r\n     */\r\n    connect(options: NetConnectOptions, channelId: number = 0): boolean {\r\n        if (this._channels[channelId]) {\r\n            return this._channels[channelId].connect(options);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** 节点连接发送数据*/\r\n    send(buf: NetData, force: boolean = false, channelId: number = 0): number {\r\n        let node = this._channels[channelId];\r\n        if (node) {\r\n            return node!.send(buf, force);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * 发起请求，并在在结果返回时调用指定好的回调函数\r\n     * @param reqProtocol 请求协议\r\n     * @param rspObject   回调对象\r\n     * @param showTips    是否触发请求提示\r\n     * @param force       是否强制发送\r\n     * @param channelId   通道编号\r\n     * @example\r\n    let protocol: IRequestProtocol = {\r\n        action: action,\r\n        method: method,\r\n        data: JSON.stringify(data),\r\n        isCompress: this.isCompress,\r\n        channelid: netConfig.channelid\r\n    }\r\n    return this.request(protocol, rspObject, showTips, force);\r\n     */\r\n    request(reqProtocol: IRequestProtocol, rspObject: CallbackObject, showTips: boolean = true, force: boolean = false, channelId: number = 0) {\r\n        let node = this._channels[channelId];\r\n        if (node) {\r\n            node.request(reqProtocol, rspObject, showTips, force);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 同request功能一致，但在request之前会先判断队列中是否已有rspCmd，如有重复的则直接返回\r\n     * @param reqProtocol 请求协议\r\n     * @param rspObject   回调对象\r\n     * @param showTips    是否触发请求提示\r\n     * @param force       是否强制发送\r\n     * @param channelId   通道编号\r\n     * @example\r\n    let protocol: IRequestProtocol = {\r\n        action: action,\r\n        method: method,\r\n        data: JSON.stringify(data),\r\n        isCompress: this.isCompress,\r\n        channelid: netConfig.channelid\r\n    }\r\n    return this.request(protocol, rspObject, showTips, force);\r\n     */\r\n    requestUnique(reqProtocol: IRequestProtocol, rspObject: CallbackObject, showTips: boolean = true, force: boolean = false, channelId: number = 0): boolean {\r\n        let node = this._channels[channelId];\r\n        if (node) {\r\n            return node.requestUnique(reqProtocol, rspObject, showTips, force);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 节点网络断开\r\n     * @param code        关闭码\r\n     * @param reason      关闭原因\r\n     * @param channelId   通道编号\r\n     * @example \r\n     * NetManager.getInstance().close(undefined, undefined, NetChannelType.Game);\r\n     */\r\n    close(code?: number, reason?: string, channelId: number = 0) {\r\n        if (this._channels[channelId]) {\r\n            return this._channels[channelId].closeSocket(code, reason);\r\n        }\r\n    }\r\n}"]}