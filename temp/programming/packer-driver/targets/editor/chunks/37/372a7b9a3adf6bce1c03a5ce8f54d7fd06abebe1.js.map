{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/behavior-tree/BehaviorTree.ts"],"names":["BehaviorTree","BTreeNode","countUnnamed","started","_started","constructor","node","blackboard","title","_root","_current","_blackboard","name","setObject","run","console","error","getNode","setControl","start","running","success","end","fail","register","_registeredNodes","set","get","Error","Map"],"mappings":";;;yCAMaA,Y;;;;;;;;;;;;;;;;;;AANJC,MAAAA,S,iBAAAA,S;;;;;;;AAGLC,MAAAA,Y,GAAe,C;AAEnB;;8BACaF,Y,GAAN,MAAMA,YAAN,CAAuC;AAY1C;AACkB,YAAPG,OAAO,GAAY;AAC1B,iBAAO,KAAKC,QAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWC,QAAAA,WAAW,CAACC,IAAD,EAAkBC,UAAlB,EAAoC;AAAA,eArB9CC,KAqB8C;;AAnBtD;AAmBsD,eAlB9CC,KAkB8C;;AAjBtD;AAiBsD,eAhB9CC,QAgB8C;;AAftD;AAesD,eAd9CN,QAc8C,GAd1B,KAc0B;;AAbtD;AAasD,eAZ9CO,WAY8C;AAClDT,UAAAA,YAAY,IAAI,CAAhB;AACA,eAAKM,KAAL,GAAaF,IAAI,CAACD,WAAL,CAAiBO,IAAjB,GAAwB,SAAxB,GAAqCV,YAArC,GAAqD,GAAlE;AACA,eAAKO,KAAL,GAAaH,IAAb;AACA,eAAKK,WAAL,GAAmBJ,UAAnB;AACH;AAED;;;AACOM,QAAAA,SAAS,CAACN,UAAD,EAAkB;AAC9B,eAAKI,WAAL,GAAmBJ,UAAnB;AACH;AAED;;;AACOO,QAAAA,GAAG,GAAG;AACT,cAAI,KAAKV,QAAT,EAAmB;AACfW,YAAAA,OAAO,CAACC,KAAR,CAAe,OAAM,KAAKR,KAAM,2BAAhC;AACH;;AAED,eAAKJ,QAAL,GAAgB,IAAhB;AACA,cAAIE,IAAI,GAAGN,YAAY,CAACiB,OAAb,CAAqB,KAAKR,KAA1B,CAAX;AACA,eAAKC,QAAL,GAAgBJ,IAAhB;AACAA,UAAAA,IAAI,CAACY,UAAL,CAAgB,IAAhB;AACAZ,UAAAA,IAAI,CAACa,KAAL,CAAW,KAAKR,WAAhB;AACAL,UAAAA,IAAI,CAACQ,GAAL,CAAS,KAAKH,WAAd;AACH;;AAEMS,QAAAA,OAAO,CAACd,IAAD,EAAkB;AAC5B,eAAKF,QAAL,GAAgB,KAAhB;AACH;;AAEMiB,QAAAA,OAAO,GAAG;AACb,eAAKX,QAAL,CAAcY,GAAd,CAAkB,KAAKX,WAAvB;;AACA,eAAKP,QAAL,GAAgB,KAAhB;AACH;;AAEMmB,QAAAA,IAAI,GAAG;AACV,eAAKb,QAAL,CAAcY,GAAd,CAAkB,KAAKX,WAAvB;;AACA,eAAKP,QAAL,GAAgB,KAAhB;AACH;AAED;;;AAIe,eAARoB,QAAQ,CAACZ,IAAD,EAAeN,IAAf,EAAgC;AAC3C,eAAKmB,gBAAL,CAAsBC,GAAtB,CAA0Bd,IAA1B,EAAgCN,IAAhC;AACH;;AAEa,eAAPW,OAAO,CAACL,IAAD,EAAsC;AAChD,cAAIN,IAAI,GAAGM,IAAI;AAAA;AAAA,qCAAJ,GAA4BA,IAA5B,GAAmC,KAAKa,gBAAL,CAAsBE,GAAtB,CAA0Bf,IAA1B,CAA9C;;AACA,cAAI,CAACN,IAAL,EAAW;AACP,kBAAM,IAAIsB,KAAJ,CAAW,UAAShB,IAAK,YAAzB,CAAN;AACH;;AACD,iBAAON,IAAP;AACH;;AA5EyC,O;;AAAjCN,MAAAA,Y,CAgEFyB,gB,GAA2C,IAAII,GAAJ,E","sourcesContent":["import { BTreeNode } from './BTreeNode';\r\nimport { IControl } from './IControl';\r\n\r\nvar countUnnamed = 0;\r\n\r\n/** 行为树 */\r\nexport class BehaviorTree implements IControl {\r\n    private title: string;\r\n\r\n    /** 根节点 */\r\n    private _root: BTreeNode;\r\n    /** 当前执行节点 */\r\n    private _current!: BTreeNode;\r\n    /** 是否已开始执行 */\r\n    private _started: boolean = false;\r\n    /** 外部参数对象 */\r\n    private _blackboard: any;\r\n\r\n    /** 是否已开始执行 */\r\n    public get started(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param node          根节点\r\n     * @param blackboard    外部参数对象\r\n     */\r\n    public constructor(node: BTreeNode, blackboard?: any) {\r\n        countUnnamed += 1;\r\n        this.title = node.constructor.name + '(btree_' + (countUnnamed) + ')';\r\n        this._root = node;\r\n        this._blackboard = blackboard;\r\n    }\r\n\r\n    /** 设置行为逻辑中的共享数据 */\r\n    public setObject(blackboard: any) {\r\n        this._blackboard = blackboard;\r\n    }\r\n\r\n    /** 执行行为树逻辑 */\r\n    public run() {\r\n        if (this._started) {\r\n            console.error(`行为树【${this.title}】未调用步骤，在最后一次调用步骤时有一个任务未完成`);\r\n        }\r\n\r\n        this._started = true;\r\n        var node = BehaviorTree.getNode(this._root);\r\n        this._current = node;\r\n        node.setControl(this);\r\n        node.start(this._blackboard);\r\n        node.run(this._blackboard);\r\n    }\r\n\r\n    public running(node: BTreeNode) {\r\n        this._started = false;\r\n    }\r\n\r\n    public success() {\r\n        this._current.end(this._blackboard);\r\n        this._started = false;\r\n    }\r\n\r\n    public fail() {\r\n        this._current.end(this._blackboard);\r\n        this._started = false;\r\n    }\r\n\r\n    /** ---------------------------------------------------------------------------------------------------- */\r\n\r\n    static _registeredNodes: Map<string, BTreeNode> = new Map<string, BTreeNode>();\r\n\r\n    static register(name: string, node: BTreeNode) {\r\n        this._registeredNodes.set(name, node);\r\n    }\r\n\r\n    static getNode(name: string | BTreeNode): BTreeNode {\r\n        var node = name instanceof BTreeNode ? name : this._registeredNodes.get(name);\r\n        if (!node) {\r\n            throw new Error(`无法找到节点【${name}】，可能它没有注册过`);\r\n        }\r\n        return node;\r\n    }\r\n}\r\n"]}