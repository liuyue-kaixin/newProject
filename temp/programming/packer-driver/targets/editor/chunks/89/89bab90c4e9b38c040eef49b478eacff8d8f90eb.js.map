{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/core/common/random/RandomManager.ts"],"names":["RandomManager","isClient","isGlobal","random","instance","_instance","Math","getRandom","setSeed","seed","seedrandom","global","require","getRandomFloat","min","max","getRandomInt","type","ceil","floor","getRandomByMinMaxList","n","result","i","push","getRandomByObjectList","objects","temp","slice","index","length","splice","getRandomBySumList","sum","residue","value"],"mappings":"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","sourcesContent":["/** 引擎 utils.ts 中有一些基础数学方法 */\r\n\r\n/** 随机管理 */\r\nexport class RandomManager {\r\n    private static _instance: RandomManager;\r\n\r\n    /** 是否运行在客户端环境 */\r\n    isClient: boolean = true;\r\n    /** 是否为全局伪随机 */\r\n    isGlobal: boolean = false;\r\n\r\n    private random: any = null;\r\n\r\n    /** 随机数管理单例对象 */\r\n    static get instance(): RandomManager {\r\n        if (this._instance == null) {\r\n            this._instance = new RandomManager();\r\n            this._instance.random = Math.random;\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    private getRandom(): number {\r\n        return this.isGlobal ? Math.random() : this.random();\r\n    }\r\n\r\n    /** 设置随机种子 */\r\n    setSeed(seed: number) {\r\n        if (this.isClient) {\r\n            //注：seedrandom.min.js文件在Cocos Creator中导入为插件生效\r\n            //@ts-ignore\r\n            if (Math.seedrandom) {\r\n                if (this.isGlobal)\r\n                    //@ts-ignore\r\n                    new Math.seedrandom(seed, { global: true });\r\n                else\r\n                    //@ts-ignore\r\n                    this.random = new Math.seedrandom(seed);\r\n            }\r\n        }\r\n        else {\r\n            var seedrandom = require('seedrandom');\r\n            if (this.isGlobal)\r\n                new seedrandom(seed, { global: true });\r\n            else\r\n                this.random = new seedrandom(seed);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成指定范围的随机浮点数\r\n     * @param min   最小值\r\n     * @param max   最大值\r\n     * @param type  类型\r\n     */\r\n    getRandomFloat(min: number = 0, max: number = 1): number {\r\n        return this.getRandom() * (max - min) + min;\r\n    }\r\n\r\n    /**\r\n     * 生成指定范围的随机整数\r\n     * @param min   最小值\r\n     * @param max   最大值\r\n     * @param type  类型\r\n     * @example\r\n    var min = 1;\r\n    var max = 10;\r\n    // [min,max) 得到一个两数之间的随机整数,这个值不小于min（如果min不是整数的话，得到一个向上取整的 min），并且小于（但不等于）max  \r\n    RandomManager.instance.getRandomInt(min, max, 1);\r\n\r\n    // [min,max] 得到一个两数之间的随机整数，包括两个数在内,这个值比min大（如果min不是整数，那就不小于比min大的整数），但小于（但不等于）max\r\n    RandomManager.instance.getRandomInt(min, max, 2);\r\n\r\n    // (min,max) 得到一个两数之间的随机整数\r\n    RandomManager.instance.getRandomInt(min, max, 3);\r\n     */\r\n    getRandomInt(min: number, max: number, type: number = 2): number {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        switch (type) {\r\n            case 1: // [min,max) 得到一个两数之间的随机整数,这个值不小于min（如果min不是整数的话，得到一个向上取整的 min），并且小于（但不等于）max  \r\n                return Math.floor(this.getRandom() * (max - min)) + min;\r\n            case 2: // [min,max] 得到一个两数之间的随机整数，包括两个数在内,这个值比min大（如果min不是整数，那就不小于比min大的整数），但小于（但不等于）max\r\n                return Math.floor(this.getRandom() * (max - min + 1)) + min;\r\n            case 3: // (min,max) 得到一个两数之间的随机整数\r\n                return Math.floor(this.getRandom() * (max - min - 1)) + min + 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 根据最大值，最小值范围生成随机数数组\r\n     * @param min   最小值\r\n     * @param max   最大值\r\n     * @param n     随机个数\r\n     * @param type  类型\r\n     * @example\r\n    var a = RandomManager.instance.getRandomByMinMaxList(50, 100, 5)\r\n    console.log(\"随机的数字\", a);\r\n     */\r\n    getRandomByMinMaxList(min: number, max: number, n: number): Array<number> {\r\n        var result: Array<number> = [];\r\n        for (let i = 0; i < n; i++) {\r\n            result.push(this.getRandomInt(min, max))\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 获取数组中随机对象\r\n     * @param objects 对象数组\r\n     * @param n 随机个数\r\n     * @example\r\n    var b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n    var r = RandomManager.instance.getRandomByObjectList(b, 5);\r\n    console.log(\"原始的对象\", b);\r\n    console.log(\"随机的对象\", r);\r\n     */\r\n    getRandomByObjectList<T>(objects: Array<T>, n: number): Array<T> {\r\n        var temp: Array<T> = objects.slice();\r\n        var result: Array<T> = [];\r\n        for (let i = 0; i < n; i++) {\r\n            let index = this.getRandomInt(0, objects.length, n);\r\n            result.push(temp.splice(index, 1)[0]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 定和随机分配\r\n     * @param n     随机数量\r\n     * @param sum   随机元素合\r\n     * @example\r\n    var c = RandomManager.instance.getRandomBySumList(5, -100);\r\n    console.log(\"定和随机分配\", c);\r\n     */\r\n    getRandomBySumList(n: number, sum: number): number[] {\r\n        var residue = sum;\r\n        var value = 0;\r\n        var result: Array<number> = [];\r\n        for (let i = 0; i < n; i++) {\r\n            value = this.getRandomInt(0, residue, 3);\r\n            if (i == n - 1) {\r\n                value = residue;\r\n            }\r\n            else {\r\n                residue -= value;\r\n            }\r\n            result.push(value);\r\n        }\r\n        return result;\r\n    }\r\n}"]}