{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/ccProject/extensions/oops-plugin-framework/assets/libs/animator/AnimatorSpine.ts"],"names":["sp","_decorator","AnimatorBase","ccclass","property","requireComponent","disallowMultiple","AnimatorSpine","Skeleton","_spine","_completeListenerMap","Map","_secondaryListenerMap","start","PlayOnStart","_hasInit","getComponent","setEventListener","onSpineEvent","bind","setCompleteListener","onSpineComplete","AssetRawUrl","initJson","json","onInit","args","initArgs","getBone","name","bone","findBone","trackEntry","event","animationName","animation","data","_animationPlayer","onFrameEventCallback","entry","trackIndex","onAnimFinished","forEach","target","cb","call","TrackIndex","playAnimation","animName","loop","setAnimation","clearTrack","scaleTime","scale","timeScale","addSecondaryListener","set","addCompleteListener","has","removeCompleteListener","delete","clearCompleteListener","clear"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,E,OAAAA,E;AAAIC,MAAAA,U,OAAAA,U;;AAENC,MAAAA,Y;;;;;;;;;OAGD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA,gBAArB;AAAuCC,QAAAA;AAAvC,O,GAA4DL,U;AAElE;AACA;AACA;;yBAIqBM,a,WADpBF,gBAAgB,CAACL,EAAE,CAACQ,QAAJ,C,EAFhBL,O,UACAG,gB,wBADD,MAGqBC,aAHrB;AAAA;AAAA,wCAGwD;AAAA;AAAA;;AACpD;AADoD,eAE1CE,MAF0C,GAEpB,IAFoB;;AAGpD;AAHoD,eAI1CC,oBAJ0C,GAIc,IAAIC,GAAJ,EAJd;;AAKpD;AALoD,eAM1CC,qBAN0C,GAMkC,IAAID,GAAJ,EANlC;AAAA;;AAQ1CE,QAAAA,KAAK,GAAG;AACd,cAAI,CAAC,KAAKC,WAAN,IAAqB,KAAKC,QAA9B,EAAwC;AACpC;AACH;;AACD,eAAKA,QAAL,GAAgB,IAAhB;AAEA,eAAKN,MAAL,GAAc,KAAKO,YAAL,CAAkBhB,EAAE,CAACQ,QAArB,CAAd;;AACA,eAAKC,MAAL,CAAYQ,gBAAZ,CAA6B,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAA7B;;AACA,eAAKV,MAAL,CAAYW,mBAAZ,CAAgC,KAAKC,eAAL,CAAqBF,IAArB,CAA0B,IAA1B,CAAhC;;AAEA,cAAI,KAAKG,WAAL,KAAqB,IAAzB,EAA+B;AAC3B,iBAAKC,QAAL,CAAc,KAAKD,WAAL,CAAiBE,IAA/B;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACWC,QAAAA,MAAM,CAAC,GAAGC,IAAJ,EAAqH;AAC9H,cAAI,KAAKZ,WAAL,IAAoB,KAAKC,QAA7B,EAAuC;AACnC;AACH;;AACD,eAAKA,QAAL,GAAgB,IAAhB;AAEA,eAAKY,QAAL,CAAc,GAAGD,IAAjB;AAEA,eAAKjB,MAAL,GAAc,KAAKO,YAAL,CAAkBhB,EAAE,CAACQ,QAArB,CAAd;;AACA,eAAKC,MAAL,CAAYQ,gBAAZ,CAA6B,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAA7B;;AACA,eAAKV,MAAL,CAAYW,mBAAZ,CAAgC,KAAKC,eAAL,CAAqBF,IAArB,CAA0B,IAA1B,CAAhC;;AAEA,cAAI,KAAKG,WAAL,KAAqB,IAAzB,EAA+B;AAC3B,iBAAKC,QAAL,CAAc,KAAKD,WAAL,CAAiBE,IAA/B;AACH;AACJ;AAED;;;AAEOI,QAAAA,OAAO,CAACC,IAAD,EAAoB;AAC9B,cAAIC,IAAI,GAAG,KAAKrB,MAAL,CAAYsB,QAAZ,CAAqBF,IAArB,CAAX;;AACA,iBAAOC,IAAP;AACH;;AAEOZ,QAAAA,YAAY,CAACc,UAAD,EAAkBC,KAAlB,EAA8B;AAAA;;AAC9C,cAAIC,aAAa,GAAGF,UAAU,CAACG,SAAX,GAAuBF,KAAK,CAACG,IAAN,CAAWP,IAAlC,GAAyC,EAA7D;AACA,wCAAKQ,gBAAL,mCAAuBC,oBAAvB,CAA4CJ,aAA5C,EAA2D,IAA3D;AACH;AAED;;;AAEQb,QAAAA,eAAe,CAACkB,KAAD,EAAa;AAChCA,UAAAA,KAAK,CAACC,UAAN,KAAqB,CAArB,IAA0B,KAAKC,cAAL,EAA1B;;AACA,eAAK/B,oBAAL,CAA0BgC,OAA1B,CAAkC,CAACC,MAAD,EAASC,EAAT,KAAgB;AAAED,YAAAA,MAAM,GAAGC,EAAE,CAACC,IAAH,CAAQF,MAAR,EAAgBJ,KAAhB,CAAH,GAA4BK,EAAE,CAACL,KAAD,CAApC;AAA8C,WAAlG;;AACA,eAAK3B,qBAAL,CAA2B8B,OAA3B,CAAmC,CAACC,MAAD,EAASC,EAAT,KAAgB;AAAEL,YAAAA,KAAK,CAACC,UAAN,KAAqBG,MAAM,CAACG,UAA5B,IAA0CF,EAAE,CAACC,IAAH,CAAQF,MAAR,EAAgBJ,KAAhB,CAA1C;AAAmE,WAAxH;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACcQ,QAAAA,aAAa,CAACC,QAAD,EAAmBC,IAAnB,EAAkC;AACrD,cAAID,QAAJ,EAAc;AACV,iBAAKvC,MAAL,CAAYyC,YAAZ,CAAyB,CAAzB,EAA4BF,QAA5B,EAAsCC,IAAtC;AACH,WAFD,MAGK;AACD,iBAAKxC,MAAL,CAAY0C,UAAZ,CAAuB,CAAvB;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACcC,QAAAA,SAAS,CAACC,KAAD,EAAgB;AAC/B,cAAIA,KAAK,GAAG,CAAZ,EACI,KAAK5C,MAAL,CAAY6C,SAAZ,GAAwBD,KAAxB;AACP;AAED;AACJ;AACA;;;AACWE,QAAAA,oBAAoB,CAACX,EAAD,EAA4BD,MAA5B,EAA4D;AACnF,eAAK/B,qBAAL,CAA2B4C,GAA3B,CAA+BZ,EAA/B,EAAmCD,MAAnC;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWc,QAAAA,mBAAmB,CAACb,EAAD,EAA4BD,MAAW,GAAG,IAA1C,EAAgD;AACtE,cAAI,KAAKjC,oBAAL,CAA0BgD,GAA1B,CAA8Bd,EAA9B,CAAJ,EAAuC;AACnC;AACH;;AACD,eAAKlC,oBAAL,CAA0B8C,GAA1B,CAA8BZ,EAA9B,EAAkCD,MAAlC;AACH;AAED;AACJ;AACA;AACA;;;AACWgB,QAAAA,sBAAsB,CAACf,EAAD,EAA4B;AACrD,eAAKlC,oBAAL,CAA0BkD,MAA1B,CAAiChB,EAAjC;AACH;AAED;AACJ;AACA;;;AACWiB,QAAAA,qBAAqB,GAAG;AAC3B,eAAKnD,oBAAL,CAA0BoD,KAA1B;AACH;;AA5HmD,O","sourcesContent":["import { sp, _decorator } from \"cc\";\r\nimport AnimatorSpineSecondary from \"./AnimatorSpineSecondary\";\r\nimport AnimatorBase, { AnimationPlayer } from \"./core/AnimatorBase\";\r\nimport { AnimatorStateLogic } from \"./core/AnimatorStateLogic\";\r\n\r\nconst { ccclass, property, requireComponent, disallowMultiple } = _decorator;\r\n\r\n/** \r\n * Spine状态机组件（主状态机），trackIndex为0\r\n */\r\n@ccclass\r\n@disallowMultiple\r\n@requireComponent(sp.Skeleton)\r\nexport default class AnimatorSpine extends AnimatorBase {\r\n    /** spine组件 */\r\n    protected _spine: sp.Skeleton = null!;\r\n    /** 动画完成的回调 */\r\n    protected _completeListenerMap: Map<(entry?: any) => void, any> = new Map();\r\n    /** 次状态机注册的回调 */\r\n    protected _secondaryListenerMap: Map<(entry?: any) => void, AnimatorSpineSecondary> = new Map();\r\n\r\n    protected start() {\r\n        if (!this.PlayOnStart || this._hasInit) {\r\n            return;\r\n        }\r\n        this._hasInit = true;\r\n\r\n        this._spine = this.getComponent(sp.Skeleton)!;\r\n        this._spine.setEventListener(this.onSpineEvent.bind(this));\r\n        this._spine.setCompleteListener(this.onSpineComplete.bind(this));\r\n\r\n        if (this.AssetRawUrl !== null) {\r\n            this.initJson(this.AssetRawUrl.json);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 手动初始化状态机，可传入0-3个参数，类型如下\r\n     * - onStateChangeCall 状态切换时的回调\r\n     * - stateLogicMap 各个状态逻辑控制\r\n     * - animationPlayer 自定义动画控制\r\n     * @override\r\n     */\r\n    public onInit(...args: Array<Map<string, AnimatorStateLogic> | ((fromState: string, toState: string) => void) | AnimationPlayer>) {\r\n        if (this.PlayOnStart || this._hasInit) {\r\n            return;\r\n        }\r\n        this._hasInit = true;\r\n\r\n        this.initArgs(...args);\r\n\r\n        this._spine = this.getComponent(sp.Skeleton)!;\r\n        this._spine.setEventListener(this.onSpineEvent.bind(this));\r\n        this._spine.setCompleteListener(this.onSpineComplete.bind(this));\r\n\r\n        if (this.AssetRawUrl !== null) {\r\n            this.initJson(this.AssetRawUrl.json);\r\n        }\r\n    }\r\n\r\n    /** ---------- 后续扩展代码 开始 ---------- */\r\n\r\n    public getBone(name: string): any {\r\n        var bone = this._spine.findBone(name);\r\n        return bone\r\n    }\r\n\r\n    private onSpineEvent(trackEntry: any, event: any) {\r\n        var animationName = trackEntry.animation ? event.data.name : \"\";\r\n        this._animationPlayer?.onFrameEventCallback(animationName, this);\r\n    }\r\n\r\n    /** ---------- 后续扩展代码 结束 ---------- */\r\n\r\n    private onSpineComplete(entry: any) {\r\n        entry.trackIndex === 0 && this.onAnimFinished();\r\n        this._completeListenerMap.forEach((target, cb) => { target ? cb.call(target, entry) : cb(entry); });\r\n        this._secondaryListenerMap.forEach((target, cb) => { entry.trackIndex === target.TrackIndex && cb.call(target, entry); });\r\n    }\r\n\r\n    /**\r\n     * 播放动画\r\n     * @override\r\n     * @param animName 动画名\r\n     * @param loop 是否循环播放\r\n     */\r\n    protected playAnimation(animName: string, loop: boolean) {\r\n        if (animName) {\r\n            this._spine.setAnimation(0, animName, loop);\r\n        }\r\n        else {\r\n            this._spine.clearTrack(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 缩放动画播放速率\r\n     * @override\r\n     * @param scale 缩放倍率\r\n     */\r\n    protected scaleTime(scale: number) {\r\n        if (scale > 0)\r\n            this._spine.timeScale = scale;\r\n    }\r\n\r\n    /**\r\n     * 注册次状态机动画结束的回调（状态机内部方法，不能由外部直接调用）\r\n     */\r\n    public addSecondaryListener(cb: (entry?: any) => void, target: AnimatorSpineSecondary) {\r\n        this._secondaryListenerMap.set(cb, target);\r\n    }\r\n\r\n    /**\r\n     * 注册动画完成时的监听\r\n     * @param cb 回调\r\n     * @param target 调用回调的this对象\r\n     */\r\n    public addCompleteListener(cb: (entry?: any) => void, target: any = null) {\r\n        if (this._completeListenerMap.has(cb)) {\r\n            return;\r\n        }\r\n        this._completeListenerMap.set(cb, target);\r\n    }\r\n\r\n    /**\r\n     * 注销动画完成的监听\r\n     * @param cb 回调\r\n     */\r\n    public removeCompleteListener(cb: (entry?: any) => void) {\r\n        this._completeListenerMap.delete(cb);\r\n    }\r\n\r\n    /**\r\n     * 清空动画完成的监听\r\n     */\r\n    public clearCompleteListener() {\r\n        this._completeListenerMap.clear;\r\n    }\r\n}\r\n"]}