{"version":3,"sources":["file:///Volumes/SSD/ccProject/extensions/oops-plugin-framework/assets/core/utils/ViewUtil.ts"],"names":["ViewUtil","Animation","AnimationClip","instantiate","Prefab","Size","UITransform","v3","oops","nodeTreeInfoLite","parent","obj","map","Map","items","children","i","length","_node","name","indexOf","set","findNodes","reg","nodes","ns","_name","test","push","calculateASpaceToBSpacePos","a","b","aPos","world","getComponent","convertToWorldSpaceAR","space","convertToNodeSpaceAR","calculateScreenPosToSpacePos","event","uil","getUILocation","worldPos","x","y","mapPos","uniformScale","targetWidth","targetHeight","defaultWidth","defaultHeight","widthRatio","heightRatio","ratio","size","Math","floor","createPrefabNode","path","p","res","get","n","createPrefabNodeAsync","Promise","resolve","reject","load","err","content","console","error","node","loadPrefabNode","callback","addNodeAnimation","onlyOne","isDefaultClip","isValid","anim","addComponent","clip","getState","isPlaying","defaultClip","play","once","EventType","FINISHED","createState"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2021-08-16 09:34:56\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2023-01-19 14:52:12\r\n */\r\nimport { Animation, AnimationClip, EventTouch, instantiate, Node, Prefab, Size, UITransform, v3, Vec3 } from \"cc\";\r\nimport { oops } from \"../Oops\";\r\n\r\n/** 显示对象工具 */\r\nexport class ViewUtil {\r\n    /**\r\n     * 把Node当前的节点树结构根据Node命名转成一个js对象,重名的组件会覆盖，\r\n     * Node的name不应该包含空格键，否则将跳过\r\n     * @param parent 被遍历的Node组件\r\n     * @param obj    绑定的js对象 (可选)\r\n     */\r\n    static nodeTreeInfoLite(parent: Node, obj?: Map<string, Node>): Map<string, Node> | null {\r\n        let map: Map<string, Node> = obj || new Map();\r\n        let items = parent.children;\r\n        for (let i = 0; i < items.length; i++) {\r\n            let _node = items[i];\r\n            if (_node.name.indexOf(\" \") < 0) {\r\n                map.set(_node.name, _node);\r\n            }\r\n            ViewUtil.nodeTreeInfoLite(_node, map);\r\n        }\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * 正则搜索节点名字,符合条件的节点将会返回\r\n     * @param reg     正则表达式\r\n     * @param parent  要搜索的父节点\r\n     * @param nodes   返回的数组（可选）\r\n     */\r\n    static findNodes(reg: RegExp, parent: Node, nodes?: Array<Node>): Array<Node> {\r\n        let ns: Array<Node> = nodes || [];\r\n        let items = parent.children;\r\n        for (let i = 0; i < items.length; i++) {\r\n            let _name: string = items[i].name;\r\n            if (reg.test(_name)) {\r\n                ns.push(items[i]);\r\n            }\r\n            ViewUtil.findNodes(reg, items[i], ns);\r\n        }\r\n        return ns;\r\n    };\r\n\r\n    /**\r\n     * 节点之间坐标互转\r\n     * @param a         A节点\r\n     * @param b         B节点\r\n     * @param aPos      A节点空间中的相对位置\r\n     */\r\n    static calculateASpaceToBSpacePos(a: Node, b: Node, aPos: Vec3): Vec3 {\r\n        var world: Vec3 = a.getComponent(UITransform)!.convertToWorldSpaceAR(aPos);\r\n        var space: Vec3 = b.getComponent(UITransform)!.convertToNodeSpaceAR(world);\r\n        return space;\r\n    }\r\n\r\n    /**\r\n     * 屏幕转空间坐标\r\n     * @param event 触摸事件\r\n     * @param space 转到此节点的坐标空间\r\n     */\r\n    static calculateScreenPosToSpacePos(event: EventTouch, space: Node): Vec3 {\r\n        let uil = event.getUILocation();\r\n        let worldPos: Vec3 = v3(uil.x, uil.y);\r\n        let mapPos: Vec3 = space.getComponent(UITransform)!.convertToNodeSpaceAR(worldPos);\r\n        return mapPos;\r\n    }\r\n\r\n    /**\r\n     * 显示对象等比缩放\r\n     * @param targetWidth       目标宽\r\n     * @param targetHeight      目标高\r\n     * @param defaultWidth      默认宽\r\n     * @param defaultHeight     默认高\r\n     */\r\n    static uniformScale(targetWidth: number, targetHeight: number, defaultWidth: number, defaultHeight: number) {\r\n        var widthRatio = defaultWidth / targetWidth;\r\n        var heightRatio = defaultHeight / targetHeight;\r\n        var ratio;\r\n        widthRatio < heightRatio ? ratio = widthRatio : ratio = heightRatio;\r\n        var size = new Size(Math.floor(targetWidth * ratio), Math.floor(targetHeight * ratio));\r\n        return size;\r\n    }\r\n\r\n    /**\r\n     * 从资源缓存中找到预制资源名并创建一个显示对象\r\n     * @param path 资源路径\r\n     */\r\n    static createPrefabNode(path: string): Node {\r\n        var p: Prefab = oops.res.get(path, Prefab)!;\r\n        var n = instantiate(p);\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * 加载预制并创建预制节点\r\n     * @param path 资源路径\r\n     */\r\n    static createPrefabNodeAsync(path: string): Promise<Node> {\r\n        return new Promise(async (resolve, reject) => {\r\n            oops.res.load(path, Prefab, (err: Error | null, content: Prefab) => {\r\n                if (err) {\r\n                    console.error(`名为【${path}】的资源加载失败`);\r\n                    return;\r\n                }\r\n\r\n                var node = this.createPrefabNode(path);\r\n                resolve(node);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 加载预制节点\r\n     * @param path          资源路径\r\n     * @param callback      资源加载完成回调\r\n     */\r\n    static loadPrefabNode(path: string, callback: Function) {\r\n        oops.res.load(path, Prefab, (err: Error | null, content: Prefab) => {\r\n            if (err) {\r\n                console.error(`名为【${path}】的资源加载失败`);\r\n                return;\r\n            }\r\n\r\n            var node = this.createPrefabNode(path);\r\n            callback(node);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 添加节点动画\r\n     * @param path              资源路径\r\n     * @param node              目标节点\r\n     * @param onlyOne           是否唯一\r\n     * @param isDefaultClip     是否播放默认动画剪辑\r\n     */\r\n    static addNodeAnimation(path: string, node: Node, onlyOne: boolean = true, isDefaultClip: boolean = false) {\r\n        if (!node || !node.isValid) {\r\n            return;\r\n        }\r\n\r\n        var anim = node.getComponent(Animation);\r\n        if (anim == null) {\r\n            anim = node.addComponent(Animation);\r\n        }\r\n\r\n        var clip = oops.res.get(path, AnimationClip) as AnimationClip;\r\n        if (!clip) {\r\n            return;\r\n        }\r\n\r\n        if (onlyOne && anim.getState(clip.name) && anim.getState(clip.name).isPlaying) {\r\n            return;\r\n        }\r\n\r\n        if (isDefaultClip) {\r\n            anim.defaultClip = clip;\r\n            anim.play();\r\n            return;\r\n        }\r\n\r\n        // 播放完成后恢复播放默认动画\r\n        anim.once(Animation.EventType.FINISHED, () => {\r\n            if (anim!.defaultClip) {\r\n                anim!.play();\r\n            }\r\n        }, this);\r\n\r\n        if (anim.getState(clip.name)) {\r\n            anim.play(clip.name);\r\n            return\r\n        }\r\n        anim.createState(clip, clip!.name);\r\n        anim.play(clip!.name);\r\n    }\r\n}"]}