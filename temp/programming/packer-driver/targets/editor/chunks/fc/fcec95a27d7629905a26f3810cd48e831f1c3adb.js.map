{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/network/HttpRequest.ts"],"names":["HttpReturn","HttpRequest","error","warn","urls","reqparams","HttpEvent","isSucc","res","err","server","timeout","header","Map","addHeader","name","value","set","get","onComplete","params","sendRequest","getAsync","Promise","resolve","reject","ret","getByArraybuffer","getAsyncByArraybuffer","post","postAsync","abort","xhr","getParamString","result","data","Object","key","substring","length","isPost","responseType","isOpenTimeout","url","newUrl","paramsStr","toLocaleLowerCase","indexOf","XMLHttpRequest","open","setRequestHeader","ontimeout","deleteCache","TIMEOUT","onloadend","status","NO_NETWORK","onerror","readyState","UNKNOWN_ERROR","onreadystatechange","response","JSON","parse","send"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2022-09-01 18:00:28\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2022-09-09 18:10:50\r\n */\r\nimport { error, warn } from \"cc\";\r\n\r\n/** 当前请求地址集合 */\r\nvar urls: any = {};\r\n/** 请求参数 */\r\nvar reqparams: any = {};\r\n\r\ntype HttpCallback = (ret: HttpReturn) => void;\r\n\r\n/** 请求事件 */\r\nexport enum HttpEvent {\r\n    /** 断网 */\r\n    NO_NETWORK = \"http_request_no_network\",\r\n    /** 未知错误 */\r\n    UNKNOWN_ERROR = \"http_request_unknown_error\",\r\n    /** 请求超时 */\r\n    TIMEOUT = \"http_request_timout\"\r\n}\r\n\r\n/**\r\n * HTTP请求返回值\r\n */\r\nexport class HttpReturn {\r\n    /** 是否请求成功 */\r\n    isSucc: boolean = false;\r\n    /** 请求返回数据 */\r\n    res?: any;\r\n    /** 请求错误数据 */\r\n    err?: any;\r\n}\r\n\r\n/** HTTP请求 */\r\nexport class HttpRequest {\r\n    /** 服务器地址 */\r\n    server: string = \"http://127.0.0.1/\";\r\n    /** 请求超时时间 */\r\n    timeout: number = 10000;\r\n    /** 自定义请求头信息 */\r\n    private header: Map<string, string> = new Map<string, string>();\r\n\r\n    /**\r\n     * 添加自定义请求头信息\r\n     * @param name  信息名\r\n     * @param value 信息值\r\n     */\r\n    addHeader(name: string, value: string) {\r\n        this.header.set(name, value);\r\n    }\r\n\r\n    /**\r\n     * HTTP GET请求\r\n     * @param name                  协议名\r\n     * @param onComplete            请求完整回调方法\r\n     * @param params                查询参数\r\n     * @example\r\n    var param = '{\"uid\":12345}'\r\n    var complete = (ret: HttpReturn) => {\r\n        console.log(ret.res);\r\n    }\r\n    oops.http.getWithParams(name, complete, param);\r\n     */\r\n    get(name: string, onComplete: HttpCallback, params: any = null) {\r\n        this.sendRequest(name, params, false, onComplete)\r\n    }\r\n\r\n    /**\r\n     * HTTP GET请求\r\n     * @param name                  协议名\r\n     * @param params                查询参数\r\n     * @example \r\n    var txt = await oops.http.getAsync(name);\r\n    if (txt.isSucc) {\r\n        console.log(txt.res);\r\n    }\r\n     */\r\n    getAsync(name: string, params: any = null): Promise<HttpReturn> {\r\n        return new Promise((resolve, reject) => {\r\n            this.sendRequest(name, params, false, (ret: HttpReturn) => {\r\n                resolve(ret);\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * HTTP GET请求非文本格式数据\r\n     * @param name                  协议名\r\n     * @param onComplete            请求完整回调方法\r\n     * @param params                查询参数\r\n     */\r\n    getByArraybuffer(name: string, onComplete: HttpCallback, params: any = null) {\r\n        this.sendRequest(name, params, false, onComplete, 'arraybuffer', false);\r\n    }\r\n\r\n    /**\r\n     * HTTP GET请求非文本格式数据\r\n     * @param name                  协议名\r\n     * @param params                查询参数\r\n     * @returns Promise<any>\r\n     */\r\n    getAsyncByArraybuffer(name: string, params: any = null): Promise<HttpReturn> {\r\n        return new Promise((resolve, reject) => {\r\n            this.sendRequest(name, params, false, (ret: HttpReturn) => {\r\n                resolve(ret);\r\n            }, 'arraybuffer', false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * HTTP POST请求\r\n     * @param name                  协议名\r\n     * @param params                查询参数\r\n     * @param onComplete      请求完整回调方法\r\n     * @example\r\n    var param = '{\"LoginCode\":\"donggang_dev\",\"Password\":\"e10adc3949ba59abbe56e057f20f883e\"}'\r\n    var complete = (ret: HttpReturn) => {\r\n        console.log(ret.res);\r\n    }\r\n    oops.http.post(name, complete, param);\r\n     */\r\n    post(name: string, onComplete: HttpCallback, params: any = null) {\r\n        this.sendRequest(name, params, true, onComplete);\r\n    }\r\n\r\n    /**\r\n     * HTTP POST请求\r\n     * @param name                  协议名\r\n     * @param params                查询参数\r\n     */\r\n    postAsync(name: string, params: any = null): Promise<HttpReturn> {\r\n        return new Promise((resolve, reject) => {\r\n            this.sendRequest(name, params, true, (ret: HttpReturn) => {\r\n                resolve(ret);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 取消请求中的请求\r\n     * @param name     协议名\r\n     */\r\n    abort(name: string) {\r\n        var xhr = urls[this.server + name];\r\n        if (xhr) {\r\n            xhr.abort();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获得字符串形式的参数\r\n     * @param params 参数对象\r\n     * @returns 参数字符串\r\n     */\r\n    private getParamString(params: any) {\r\n        var result = \"\";\r\n        for (var name in params) {\r\n            let data = params[name];\r\n            if (data instanceof Object) {\r\n                for (var key in data)\r\n                    result += `${key}=${data[key]}&`;\r\n            }\r\n            else {\r\n                result += `${name}=${data}&`;\r\n            }\r\n        }\r\n        return result.substring(0, result.length - 1);\r\n    }\r\n\r\n    /** \r\n     * Http请求 \r\n     * @param name(string)              请求地址\r\n     * @param params(JSON)              请求参数\r\n     * @param isPost(boolen)            是否为POST方式\r\n     * @param callback(function)        请求成功回调\r\n     * @param responseType(string)      响应类型\r\n     * @param isOpenTimeout(boolean)    是否触发请求超时错误\r\n     */\r\n    private sendRequest(name: string,\r\n        params: any,\r\n        isPost: boolean,\r\n        onComplete: HttpCallback,\r\n        responseType?: string,\r\n        isOpenTimeout: boolean = true) {\r\n        if (name == null || name == '') {\r\n            error(\"请求地址不能为空\");\r\n            return;\r\n        }\r\n\r\n        var url: string, newUrl: string, paramsStr: string = \"\";\r\n        if (name.toLocaleLowerCase().indexOf(\"http\") == 0) {\r\n            url = name;\r\n        }\r\n        else {\r\n            url = this.server + name;\r\n        }\r\n\r\n        if (params) {\r\n            paramsStr = this.getParamString(params);\r\n            if (url.indexOf(\"?\") > -1)\r\n                newUrl = url + \"&\" + paramsStr;\r\n            else\r\n                newUrl = url + \"?\" + paramsStr;\r\n        }\r\n        else {\r\n            newUrl = url;\r\n        }\r\n\r\n        if (urls[newUrl] != null && reqparams[newUrl] == paramsStr) {\r\n            warn(`地址【${url}】已正在请求中，不能重复请求`);\r\n            return;\r\n        }\r\n\r\n        var xhr = new XMLHttpRequest();\r\n\r\n        // 防重复请求功能\r\n        urls[newUrl] = xhr;\r\n        reqparams[newUrl] = paramsStr;\r\n\r\n        if (isPost) {\r\n            xhr.open(\"POST\", url);\r\n        }\r\n        else {\r\n            xhr.open(\"GET\", newUrl);\r\n        }\r\n\r\n        // 添加自定义请求头信息\r\n        for (const [key, value] of this.header) {\r\n            xhr.setRequestHeader(key, value);\r\n        }\r\n        // xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=utf-8\");\r\n        // xhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\r\n\r\n        var data: any = {};\r\n        data.url = url;\r\n        data.params = params;\r\n\r\n        // 请求超时\r\n        if (isOpenTimeout) {\r\n            xhr.timeout = this.timeout;\r\n            xhr.ontimeout = () => {\r\n                this.deleteCache(newUrl);\r\n\r\n                ret.isSucc = false;\r\n                ret.err = HttpEvent.TIMEOUT;                // 超时\r\n                onComplete(data);\r\n            }\r\n        }\r\n\r\n        // 响应结果\r\n        var ret: HttpReturn = new HttpReturn();\r\n\r\n        xhr.onloadend = () => {\r\n            if (xhr.status == 500) {\r\n                this.deleteCache(newUrl);\r\n\r\n                ret.isSucc = false;\r\n                ret.err = HttpEvent.NO_NETWORK;             // 断网\r\n                onComplete(ret);\r\n            }\r\n        }\r\n\r\n        xhr.onerror = () => {\r\n            this.deleteCache(newUrl);\r\n\r\n            ret.isSucc = false;\r\n            if (xhr.readyState == 0 || xhr.readyState == 1 || xhr.status == 0) {\r\n                ret.err = HttpEvent.NO_NETWORK;             // 断网\r\n            }\r\n            else {\r\n                ret.err = HttpEvent.UNKNOWN_ERROR;          // 未知错误\r\n            }\r\n\r\n            onComplete(ret);\r\n        };\r\n\r\n        xhr.onreadystatechange = () => {\r\n            if (xhr.readyState != 4) return;\r\n\r\n            this.deleteCache(newUrl);\r\n\r\n            if (xhr.status == 200 && onComplete) {\r\n                ret.isSucc = true;\r\n                if (responseType == 'arraybuffer') {\r\n                    xhr.responseType = responseType;        // 加载非文本格式\r\n                    ret.res = xhr.response;\r\n                }\r\n                else {\r\n                    ret.res = JSON.parse(xhr.response);\r\n                }\r\n                onComplete(ret);\r\n            }\r\n        };\r\n\r\n        // 发送请求\r\n        if (params == null || params == \"\") {\r\n            xhr.send();\r\n        }\r\n        else {\r\n            xhr.send(paramsStr);\r\n        }\r\n    }\r\n\r\n    private deleteCache(url: string) {\r\n        delete urls[url];\r\n        delete reqparams[url];\r\n    }\r\n}"]}