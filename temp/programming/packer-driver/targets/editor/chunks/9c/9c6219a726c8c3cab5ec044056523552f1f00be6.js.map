{"version":3,"sources":["file:///Volumes/SSD/ccProject/node_modules/crypto-es/lib/mode-ctr-gladman.js"],"names":["CTRGladman","BlockCipherMode","incWord","word","_word","b1","b2","b3","incCounter","counter","_counter","Encryptor","processBlock","words","offset","_words","cipher","_cipher","blockSize","iv","_iv","slice","undefined","keystream","encryptBlock","i","Decryptor"],"mappings":"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","sourcesContent":["import {\r\n  BlockCipherMode,\r\n} from './cipher-core.js';\r\n\r\nconst incWord = (word) => {\r\n  let _word = word;\r\n\r\n  if (((word >> 24) & 0xff) === 0xff) { // overflow\r\n    let b1 = (word >> 16) & 0xff;\r\n    let b2 = (word >> 8) & 0xff;\r\n    let b3 = word & 0xff;\r\n\r\n    if (b1 === 0xff) { // overflow b1\r\n      b1 = 0;\r\n      if (b2 === 0xff) {\r\n        b2 = 0;\r\n        if (b3 === 0xff) {\r\n          b3 = 0;\r\n        } else {\r\n          b3 += 1;\r\n        }\r\n      } else {\r\n        b2 += 1;\r\n      }\r\n    } else {\r\n      b1 += 1;\r\n    }\r\n\r\n    _word = 0;\r\n    _word += (b1 << 16);\r\n    _word += (b2 << 8);\r\n    _word += b3;\r\n  } else {\r\n    _word += (0x01 << 24);\r\n  }\r\n  return _word;\r\n};\r\n\r\nconst incCounter = (counter) => {\r\n  const _counter = counter;\r\n  _counter[0] = incWord(_counter[0]);\r\n\r\n  if (_counter[0] === 0) {\r\n    // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\r\n    _counter[1] = incWord(_counter[1]);\r\n  }\r\n  return _counter;\r\n};\r\n\r\n/** @preserve\r\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c\r\n * derived from CryptoJS.mode.CTR\r\n * Jan Hruby jhruby.web@gmail.com\r\n */\r\nexport class CTRGladman extends BlockCipherMode {\r\n}\r\nCTRGladman.Encryptor = class extends CTRGladman {\r\n  processBlock(words, offset) {\r\n    const _words = words;\r\n\r\n    // Shortcuts\r\n    const cipher = this._cipher;\r\n    const { blockSize } = cipher;\r\n    const iv = this._iv;\r\n    let counter = this._counter;\r\n\r\n    // Generate keystream\r\n    if (iv) {\r\n      this._counter = iv.slice(0);\r\n      counter = this._counter;\r\n\r\n      // Remove IV for subsequent blocks\r\n      this._iv = undefined;\r\n    }\r\n\r\n    incCounter(counter);\r\n\r\n    const keystream = counter.slice(0);\r\n    cipher.encryptBlock(keystream, 0);\r\n\r\n    // Encrypt\r\n    for (let i = 0; i < blockSize; i += 1) {\r\n      _words[offset + i] ^= keystream[i];\r\n    }\r\n  }\r\n};\r\nCTRGladman.Decryptor = CTRGladman.Encryptor;\r\n"]}