{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/animator/core/AnimatorTransition.ts"],"names":["AnimatorTransition","AnimatorCondition","ParamType","constructor","data","ac","_toStateName","_hasExitTime","_conditions","_ac","toState","hasExitTime","i","conditions","length","condition","push","isValid","check","curState","name","animCompleteState","animComplete","doTrans","type","getParamType","getParamName","TRIGGER","params","resetTrigger","AUTO_TRIGGER","resetAutoTrigger","changeState"],"mappings":";;;4DAMqBA,kB;;;;;;;;;;;;;;;;;;;;;;AANdC,MAAAA,iB;AAAqBC,MAAAA,S,iBAAAA,S;;;;;;;AAG5B;AACA;AACA;yBACqBF,kB,GAAN,MAAMA,kBAAN,CAAyB;AAMpCG,QAAAA,WAAW,CAACC,IAAD,EAAYC,EAAZ,EAAoC;AAAA,eALvCC,YAKuC,GALhB,EAKgB;AAAA,eAJvCC,YAIuC,GAJf,KAIe;AAAA,eAHvCC,WAGuC,GAHJ,EAGI;AAAA,eAFvCC,GAEuC,GAFb,IAEa;AAC3C,eAAKH,YAAL,GAAoBF,IAAI,CAACM,OAAzB;AACA,eAAKH,YAAL,GAAoBH,IAAI,CAACO,WAAzB;AACA,eAAKF,GAAL,GAAWJ,EAAX;;AACA,eAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACS,UAAL,CAAgBC,MAApC,EAA4CF,CAAC,EAA7C,EAAiD;AAC7C,gBAAIG,SAA4B,GAAG;AAAA;AAAA,wDAAsBX,IAAI,CAACS,UAAL,CAAgBD,CAAhB,CAAtB,EAA0CP,EAA1C,CAAnC;;AACA,iBAAKG,WAAL,CAAiBQ,IAAjB,CAAsBD,SAAtB;AACH;AACJ;AAED;AACJ;AACA;;;AACWE,QAAAA,OAAO,GAAY;AACtB,iBAAO,KAAKV,YAAL,IAAqB,KAAKC,WAAL,CAAiBM,MAAjB,GAA0B,CAAtD;AACH;AAED;AACJ;AACA;;;AACWI,QAAAA,KAAK,GAAY;AACpB,cAAI,KAAKZ,YAAL,KAAsB,KAAKG,GAAL,CAASU,QAAT,CAAkBC,IAA5C,EAAkD;AAC9C,mBAAO,KAAP;AACH;;AAED,cAAI,KAAKb,YAAL,KAAsB,KAAKE,GAAL,CAASU,QAAT,KAAsB,KAAKV,GAAL,CAASY,iBAA/B,IAAoD,CAAC,KAAKZ,GAAL,CAASa,YAApF,CAAJ,EAAuG;AACnG,mBAAO,KAAP;AACH;;AAED,eAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,WAAL,CAAiBM,MAArC,EAA6CF,CAAC,EAA9C,EAAkD;AAC9C,gBAAI,CAAC,KAAKJ,WAAL,CAAiBI,CAAjB,EAAoBM,KAApB,EAAL,EAAkC;AAC9B,qBAAO,KAAP;AACH;AACJ;;AACD,iBAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACWK,QAAAA,OAAO,GAAG;AACb;AACA,cAAI,KAAKhB,YAAT,EAAuB;AACnB,iBAAKE,GAAL,CAASa,YAAT,GAAwB,KAAxB;AACH,WAJY,CAKb;;;AACA,eAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,WAAL,CAAiBM,MAArC,EAA6CF,CAAC,EAA9C,EAAkD;AAC9C,gBAAIY,IAAI,GAAG,KAAKhB,WAAL,CAAiBI,CAAjB,EAAoBa,YAApB,EAAX;;AACA,gBAAIL,IAAI,GAAG,KAAKZ,WAAL,CAAiBI,CAAjB,EAAoBc,YAApB,EAAX;;AACA,gBAAIF,IAAI,KAAK;AAAA;AAAA,wCAAUG,OAAvB,EAAgC;AAC5B,mBAAKlB,GAAL,CAASmB,MAAT,CAAgBC,YAAhB,CAA6BT,IAA7B;AACH,aAFD,MAEO,IAAII,IAAI,KAAK;AAAA;AAAA,wCAAUM,YAAvB,EAAqC;AACxC,mBAAKrB,GAAL,CAASmB,MAAT,CAAgBG,gBAAhB,CAAiCX,IAAjC;AACH;AACJ;;AAED,eAAKX,GAAL,CAASuB,WAAT,CAAqB,KAAK1B,YAA1B;AACH;;AA/DmC,O","sourcesContent":["import AnimatorCondition, { ParamType } from \"./AnimatorCondition\";\r\nimport AnimatorController from \"./AnimatorController\";\r\n\r\n/**\r\n * 状态过渡类\r\n */\r\nexport default class AnimatorTransition {\r\n    private _toStateName: string = '';\r\n    private _hasExitTime: boolean = false;\r\n    private _conditions: AnimatorCondition[] = [];\r\n    private _ac: AnimatorController = null!;\r\n\r\n    constructor(data: any, ac: AnimatorController) {\r\n        this._toStateName = data.toState;\r\n        this._hasExitTime = data.hasExitTime;\r\n        this._ac = ac;\r\n        for (let i = 0; i < data.conditions.length; i++) {\r\n            let condition: AnimatorCondition = new AnimatorCondition(data.conditions[i], ac);\r\n            this._conditions.push(condition);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 返回该transition是否有效，当未勾选hasExitTime以及没有添加任何condition时此transition无效并忽略\r\n     */\r\n    public isValid(): boolean {\r\n        return this._hasExitTime || this._conditions.length > 0;\r\n    }\r\n\r\n    /**\r\n     * 判断是否满足所有转换条件\r\n     */\r\n    public check(): boolean {\r\n        if (this._toStateName === this._ac.curState.name) {\r\n            return false;\r\n        }\r\n\r\n        if (this._hasExitTime && (this._ac.curState !== this._ac.animCompleteState || !this._ac.animComplete)) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < this._conditions.length; i++) {\r\n            if (!this._conditions[i].check()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 转换状态\r\n     */\r\n    public doTrans() {\r\n        // 满足条件时重置动画播完标记\r\n        if (this._hasExitTime) {\r\n            this._ac.animComplete = false;\r\n        }\r\n        // 满足状态转换条件时重置trigger和autoTrigger\r\n        for (let i = 0; i < this._conditions.length; i++) {\r\n            let type = this._conditions[i].getParamType();\r\n            let name = this._conditions[i].getParamName();\r\n            if (type === ParamType.TRIGGER) {\r\n                this._ac.params.resetTrigger(name);\r\n            } else if (type === ParamType.AUTO_TRIGGER) {\r\n                this._ac.params.resetAutoTrigger(name);\r\n            }\r\n        }\r\n\r\n        this._ac.changeState(this._toStateName);\r\n    }\r\n}\r\n"]}