{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/ccProject/assets/bundle/battle/prefabs/Sprite3d.ts"],"names":["_decorator","Color","MeshRenderer","cObject","Trigger","ccclass","property","Sprite3d","isHit","color","sprite","colorData","Float32Array","start","node","getComponent","model","setColor","WHITE","equals","data","r","g","b","a","setInstancedAttribute","update","dt","GREEN","onTrigger","trigger","exit"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,Y,OAAAA,Y;;AAEnBC,MAAAA,O,iBAAAA,O;AAASC,MAAAA,O,iBAAAA,O;;;;;;;;;OAEZ;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;0BAGjBO,Q,WADZF,OAAO,CAAC,UAAD,C,gBAAR,MACaE,QADb;AAAA;AAAA,8BACsC;AAAA;AAAA;AAAA,eAGlCC,KAHkC,GAGjB,KAHiB;AAAA,eAIlCC,KAJkC,GAInB,IAAIR,KAAJ,EAJmB;AAAA,eAKlCS,MALkC,GAKX,IALW;AAAA,eAMlCC,SANkC,GAMtB,IAAIC,YAAJ,CAAiB,CAAjB,CANsB;AAAA;;AAQlCC,QAAAA,KAAK,GAAS;AACV,eAAKH,MAAL,GAAc,KAAKI,IAAL,CAAUC,YAAV,CAAuBb,YAAvB,CAAd;AACA,eAAKQ,MAAL,CAAYM,KAAZ,CAAkB,cAAlB,IAAoC,IAApC;AACA,eAAKC,QAAL,CAAchB,KAAK,CAACiB,KAApB;AACH;;AAGDD,QAAAA,QAAQ,CAACR,KAAD,EAAe;AAEnB,cAAG,KAAKC,MAAR,EAAe;AACX,gBAAG,CAAC,KAAKD,KAAL,CAAWU,MAAX,CAAkBV,KAAlB,CAAJ,EAA6B;AACzB,kBAAIW,IAAI,GAAG,KAAKT,SAAhB;AACAS,cAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUX,KAAK,CAACY,CAAN,GAAU,KAApB;AACAD,cAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUX,KAAK,CAACa,CAAN,GAAU,KAApB;AACAF,cAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUX,KAAK,CAACc,CAAN,GAAU,KAApB;AACAH,cAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUX,KAAK,CAACe,CAAN,GAAU,KAApB;AACA,mBAAKd,MAAL,CAAYe,qBAAZ,CAAkC,SAAlC,EAA6C,KAAKd,SAAlD;AACH;AACJ;AACJ;;AAESe,QAAAA,MAAM,CAACC,EAAD,EAAmB;AAC/B,eAAKV,QAAL,CAAc,KAAKT,KAAL,GAAaP,KAAK,CAAC2B,KAAnB,GAA2B3B,KAAK,CAACiB,KAA/C;AACA,eAAKV,KAAL,GAAa,KAAb;AACH,SAhCiC,CAkClC;AACA;AACA;AACA;AACA;AACA;;;AAEAqB,QAAAA,SAAS,CAACN,CAAD,EAAWO,OAAX,EAAmC;AAGxC,cAAItB,KAAK,GAAGsB,OAAO,IAAI;AAAA;AAAA,kCAAQC,IAA/B;;AACA,cAAIvB,KAAK,IAAI,CAAC,KAAKA,KAAnB,EAA0B;AACtB,iBAAKA,KAAL,GAAaA,KAAb;AACH;AAEJ;;AAjDiC,O","sourcesContent":["import { _decorator, Color, MeshRenderer } from 'cc';\nimport { cBody } from '../collision/Body';\nimport { cObject, Trigger } from '../collision/Object';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('Sprite3d')\nexport class Sprite3d extends cObject {\n\n\n    isHit: boolean = false;\n    color: Color = new Color();\n    sprite: MeshRenderer = null;\n    colorData = new Float32Array(4);\n\n    start(): void {\n        this.sprite = this.node.getComponent(MeshRenderer);\n        this.sprite.model[\"_worldBounds\"] = null;\n        this.setColor(Color.WHITE);\n    }\n\n\n    setColor(color: Color) {\n\n        if(this.sprite){\n            if(!this.color.equals(color)){\n                let data = this.colorData;\n                data[0] = color.r / 255.0;\n                data[1] = color.g / 255.0;\n                data[2] = color.b / 255.0;\n                data[3] = color.a / 255.0;\n                this.sprite.setInstancedAttribute(\"i_color\", this.colorData);\n            }\n        }\n    }\n\n    protected update(dt: number): void {\n        this.setColor(this.isHit ? Color.GREEN : Color.WHITE);\n        this.isHit = false;\n    }\n\n    // remove(): void {\n    //     super.remove();\n    //     //如需要改善性能，自行回收到内存池\n    //     this.node.removeFromParent();\n    //     this.node.destroy();\n    // }\n\n    onTrigger(b: cBody, trigger: Trigger): void {\n\n\n        let isHit = trigger != Trigger.exit;\n        if (isHit && !this.isHit) {\n            this.isHit = isHit;\n        }\n        \n    }\n\n}\n\n"]}