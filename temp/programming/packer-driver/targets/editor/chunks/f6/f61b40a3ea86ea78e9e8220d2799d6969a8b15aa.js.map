{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/ccProject/assets/script/battle/collision/Agent.ts"],"names":["ObserverObj","KeyValuePair","RVOConfig","Agent","Vec3","Line","RVOMath","Vector2","constructor","val","value","key","Key","Value","agentCount","neighborDist","radius","maxSpeed","velocity","maxNeighbors","timeHorizon","timeHorizonObst","timeStep","inst","_inst","check","a","b","invTimeHorizon","relativePosition","subtract","getCenter","relativeVelocity","newVelocity","combinedRadius","combinedRadiusSq","sqr","distSq","absSq","u","direction","w","multiply2","wLengthSq","dotProduct1","multiply","wLength","sqrt","unitW","division","y","x","leg","det","dotProduct2","invTimeStep","abs","lineA","weight","point","addition","orcaLines","push","process","bodys","i","j","length","body","isAgent","isRemove","object","numObstLines","tempVelocity_","lineFail","linearProgram2","maxVelocity","prefVelocity","linearProgram3","v","z","linearProgram1","lines","lineNo","optVelocity","directionOpt","result","dotProduct","discriminant","sqrtDiscriminant","tLeft","tRight","denominator","numerator","fabs","RVO_EPSILON","t","Math","min","max","normalize","tempResult","agentWeight","beginLine","distance","projLines","ii","line","determinant","d"],"mappings":"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","sourcesContent":["import { Vec3 } from \"cc\";\nimport { cBody } from \"./Body\";\nimport { Line, RVOMath, Vector2 } from \"./Maths\";\n\nexport class ObserverObj<T>{\n    public value: T;\n\n    constructor(val?: T)\n    {\n        if (val)\n            this.value = val;\n    }\n}\n\nexport class KeyValuePair<K, V>{\n    public Key: K;\n    public Value: V;\n\n    constructor(key: K, value: V)\n    {\n        this.Key = key;\n        this.Value = value;\n    }\n}\n\nexport class RVOConfig\n{\n    /**代理对象总数 */\n    public static agentCount = 10;\n    /**代理对象之间的距离 */\n    public static neighborDist = 0.75;//25;\n    /**代理对象的半径 */\n    public static radius = 0.5;//10;\n    /**代理对象的最大移动速度 */\n    public static maxSpeed = 1;\n    /**代理对象的初始速度 */\n    public static velocity:Vec3 = new Vec3();\n    /**最大邻居数 */\n    public static maxNeighbors = 10;\n    \n    /**安全单位时间，值越大，就会越早做出避让行为 */\n    public static timeHorizon = 5; //25;\n\n    /**与timeHorizon类似，只针对障碍物 */\n    public static timeHorizonObst = 0;\n\n    /**步骤帧 */\n    public static timeStep = 0.05\n}\n\n\n\nexport class Agent {\n\n    private static _inst: Agent = null;\n    static get inst() {\n        if (this._inst == null) {\n            this._inst = new Agent();\n        }\n        return this._inst;\n    }\n\n    check(a: cBody, b: cBody) {\n\n        let invTimeHorizon = 1.0/RVOConfig.timeHorizon;\n        let relativePosition = Vector2.subtract(b.getCenter(), a.getCenter());\n        let relativeVelocity = Vector2.subtract(a.newVelocity, b.newVelocity);\n        let combinedRadius = a.neighborDist + b.neighborDist;\n        let combinedRadiusSq = RVOMath.sqr(combinedRadius);\n        let distSq = RVOMath.absSq(relativePosition);\n\n        let u = new Vector2();\n        let direction = new Vector2();\n\n        if (distSq > combinedRadiusSq)\n        {\n            let w = Vector2.subtract(relativeVelocity, Vector2.multiply2(invTimeHorizon, relativePosition));\n            let wLengthSq = RVOMath.absSq(w);\n            let dotProduct1 = Vector2.multiply(w, relativePosition);\n\n            if (dotProduct1 < 0 && RVOMath.sqr(dotProduct1) > combinedRadiusSq * wLengthSq)\n            {\n                let wLength = RVOMath.sqrt(wLengthSq);\n                let unitW = Vector2.division(w, wLength);\n                direction = new Vector2(unitW.y, -unitW.x);\n                u = Vector2.multiply2(combinedRadius * invTimeHorizon - wLength, unitW);\n            } else\n            {\n                let leg = RVOMath.sqrt(distSq - combinedRadiusSq);\n                if (RVOMath.det(relativePosition, w) > 0)\n                {\n                    direction = Vector2.division(new Vector2(relativePosition.x * leg - relativePosition.y * combinedRadius, relativePosition.x * combinedRadius + relativePosition.y * leg), distSq);\n                } else\n                {\n                    direction = Vector2.division(new Vector2(relativePosition.x * leg + relativePosition.y * combinedRadius, -relativePosition.x * combinedRadius + relativePosition.y * leg), -distSq);\n                }\n\n                let dotProduct2 = Vector2.multiply(relativeVelocity, direction);\n                u = Vector2.subtract(Vector2.multiply2(dotProduct2, direction), relativeVelocity);\n            }\n        } else\n        {\n            let invTimeStep = 1.0/RVOConfig.timeStep;\n            let w = Vector2.subtract(relativeVelocity, Vector2.multiply2(invTimeStep, relativePosition));\n            let wLength = RVOMath.abs(w);\n            let unitW = Vector2.division(w, wLength);\n\n            direction = new Vector2(unitW.y, -unitW.x);\n            u = Vector2.multiply2(combinedRadius * invTimeStep - wLength, unitW);\n        }\n\n        let lineA = new Line();\n        let weight = a.weight / (a.weight + b.weight);//0.5\n        lineA.direction = new Vector2(direction.x,direction.y);\n        lineA.point = Vector2.addition(a.newVelocity, Vector2.multiply2(weight, u)); \n        a.orcaLines.push(lineA);        \n    }\n\n\n    process(bodys:Array<cBody>) {\n\n        for (let i = 0, j = bodys.length; i < j; i++) {\n            let body = bodys[i];\n            if(body.isAgent && body.orcaLines.length > 0){\n                if(!body.isRemove && body.object){\n                    let numObstLines = 0; //默认0wh\n                    let tempVelocity_ = new ObserverObj<Vector2>(new Vector2(body.newVelocity.x, body.newVelocity.y));\n                    let lineFail = this.linearProgram2(body.orcaLines, body.maxVelocity, body.prefVelocity, false, tempVelocity_);\n                    if (lineFail < body.orcaLines.length)\n                    {\n                        this.linearProgram3(body.orcaLines , body.weight , numObstLines, lineFail, body.maxVelocity, tempVelocity_);\n                    }\n                \n                    if(body.object){\n                        //更新物体速度\n                        let value = tempVelocity_.value;\n                        let v = body.object.velocity;\n                        v.x = value.x;\n                        v.y = value.y;\n                        v.z = 0;\n                    }\n                }\n                body.orcaLines.length = 0;\n            }\n        }\n    }\n\n\n    private linearProgram1(lines: Array<Line>, lineNo: number, radius: number, optVelocity: Vector2, directionOpt: boolean, result: ObserverObj<Vector2>): boolean\n    {\n        let dotProduct = Vector2.multiply(lines[lineNo].point, lines[lineNo].direction);\n        let discriminant = RVOMath.sqr(dotProduct) + RVOMath.sqr(radius) - RVOMath.absSq(lines[lineNo].point);\n\n        if (discriminant < 0)\n        {\n            return false;\n        }\n\n        let sqrtDiscriminant = RVOMath.sqrt(discriminant);\n        let tLeft = -dotProduct - sqrtDiscriminant;\n        let tRight = -dotProduct + sqrtDiscriminant;\n\n        for (let i = 0; i < lineNo; ++i)\n        {\n            let denominator = RVOMath.det(lines[lineNo].direction, lines[i].direction);\n            let numerator = RVOMath.det(lines[i].direction, Vector2.subtract(lines[lineNo].point, lines[i].point));\n\n            if (RVOMath.fabs(denominator) <= RVOMath.RVO_EPSILON)\n            {\n                if (numerator < 0)\n                {\n                    return false;\n                }\n                continue;\n            }\n\n            let t = numerator / denominator;\n\n            if (denominator > 0)\n            {\n                tRight = Math.min(tRight, t);\n            } else\n            {\n                tLeft = Math.max(tLeft, t);\n            }\n\n            if (tLeft > tRight)\n            {\n                return false;\n            }\n        }\n\n        if (directionOpt)\n        {\n            if (Vector2.multiply(optVelocity, lines[lineNo].direction) > 0)\n            {\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tRight, lines[lineNo].direction));\n            } else\n            {\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tLeft, lines[lineNo].direction));\n            }\n        } else\n        {\n            let t = Vector2.multiply(lines[lineNo].direction, Vector2.subtract(optVelocity, lines[lineNo].point));\n            if (t < tLeft)\n            {\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tLeft, lines[lineNo].direction));\n            } else if (t > tRight)\n            {\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tRight, lines[lineNo].direction));\n            } else\n            {\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(t, lines[lineNo].direction));\n            }\n        }\n\n        return true;\n    }\n\n    private linearProgram2(lines: Array<Line>, radius: number, optVelocity: Vector2, directionOpt: boolean, result: ObserverObj<Vector2>): number\n    {\n        if (directionOpt)\n        {\n            result.value = Vector2.multiply2(radius, optVelocity);\n        } else if (RVOMath.absSq(optVelocity) > RVOMath.sqr(radius))\n        {\n            result.value = Vector2.multiply2(radius, RVOMath.normalize(optVelocity));\n        } else\n        {\n            result.value = optVelocity;\n        }\n\n        for (let i = 0; i < lines.length; ++i)\n        {\n            if (RVOMath.det(lines[i].direction, Vector2.subtract(lines[i].point, result.value)) > 0)\n            {\n                let tempResult = new Vector2(result.value.x, result.value.y);\n                if (!this.linearProgram1(lines, i, radius, optVelocity, directionOpt, result))\n                {\n                    result.value = tempResult;\n                    return i;\n                }\n            }\n        }\n\n        return lines.length;\n    }\n\n    private linearProgram3(lines: Array<Line>,agentWeight:number, numObstLines: number, beginLine: number, radius: number, result: ObserverObj<Vector2>)\n    {\n        let distance = 0;\n        for (let i = beginLine; i < lines.length; ++i)\n        {\n            if (RVOMath.det(lines[i].direction, Vector2.subtract(lines[i].point, result.value)) > distance)\n            {\n                let projLines: Array<Line> = [];\n                for (let ii = 0; ii < numObstLines; ++ii)\n                {\n                    projLines[projLines.length] = lines[ii];\n                }\n\n                for (let j = numObstLines; j < i; ++j)\n                {\n                    let line = new Line();\n                    let determinant = RVOMath.det(lines[i].direction, lines[j].direction);\n                    if (RVOMath.fabs(determinant) <= RVOMath.RVO_EPSILON)\n                    {\n                        if (Vector2.multiply(lines[i].direction, lines[j].direction) > 0.0)\n                        {\n                            continue;\n                        } else\n                        {\n                            line.point = Vector2.multiply2(agentWeight/*0.5 =*/, Vector2.addition(lines[i].point, lines[j].point));\n                        }\n\n                    } else\n                    {\n                        line.point = Vector2.addition(lines[i].point, Vector2.multiply2(RVOMath.det(lines[j].direction, Vector2.subtract(lines[i].point, lines[j].point)) / determinant, lines[i].direction));\n                    }\n\n                    // line.direction = RVOMath.normalize(Vector2.subtract(lines[j].direction, lines[i].direction));\n                    // projLines[projLines.length] = line;\n                    \n                    let d = Vector2.subtract(lines[j].direction, lines[i].direction);\n                    if(RVOMath.absSq(d) > 0){\n                        line.direction = RVOMath.normalize(d);\n                        projLines[projLines.length] = line;\n                    }\n                }\n\n                let tempResult = new Vector2(result.value.x, result.value.y);\n                if (this.linearProgram2(projLines, radius, new Vector2(-lines[i].direction.y, lines[i].direction.x), true, result) < projLines.length)\n                {\n                    result.value = tempResult;\n                }\n                distance = RVOMath.det(lines[i].direction, Vector2.subtract(lines[i].point, result.value));\n            }\n        }\n    }\n}\n\n\n\n\n"]}