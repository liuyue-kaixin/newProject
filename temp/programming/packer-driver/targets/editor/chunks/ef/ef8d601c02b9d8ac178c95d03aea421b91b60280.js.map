{"version":3,"sources":["file:///Volumes/%E5%9B%BA%E6%80%81/project/extensions/oops-plugin-framework/assets/libs/camera/OrbitCamera.ts"],"names":["Component","input","Input","lerp","Node","Quat","Vec2","Vec3","_decorator","EDITOR","ccclass","property","tempVec3","tempVec3_2","tempQuat","DeltaFactor","OrbitCamera","tooltip","visible","enableScaleRadius","autoRotate","type","_center","_targetCenter","_touched","_targetRotation","_rotation","_radius","radius","_targetRadius","v","target","_target","set","_startRotation","worldPosition","targetRotation","start","enableTouch","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","MOUSE_WHEEL","onMouseWheel","resetTargetRotation","fromEuler","x","y","z","limitRotation","followTargetRotationY","toEuler","worldRotation","add","rotation","xRotationRange","event","delta","touch","getDelta","rotateX","rotateY","scrollY","getScrollY","radiusScaleSpeed","Math","sign","min","maxRadius","max","minRadius","update","dt","autoRotateSpeed","slerp","rotateSpeed","followSpeed","transformQuat","FORWARD","multiplyScalar","node","position","lookAt","follow"],"mappings":"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","sourcesContent":["import { Component, EventMouse, EventTouch, input, Input, lerp, Node, Quat, Vec2, Vec3, _decorator } from 'cc';\r\nimport { EDITOR } from 'cc/env';\r\nconst { ccclass, property } = _decorator;\r\n\r\nlet tempVec3 = new Vec3;\r\nlet tempVec3_2 = new Vec3;\r\nlet tempQuat = new Quat;\r\nconst DeltaFactor = 1 / 200;\r\n\r\n/** \r\n * 轨道摄影机\r\n * 1、触摸自由旋转\r\n * 2、镜头远近鼠标滚轮调节\r\n * 3、固定为第三人称摄像机\r\n */\r\n@ccclass('OrbitCamera')\r\nexport class OrbitCamera extends Component {\r\n    @property({\r\n        tooltip: \"是否启动触摸控制\"\r\n    })\r\n    enableTouch = true;\r\n\r\n    @property({\r\n        tooltip: \"是否开启启用缩放半径（鼠标滚轮控制摄像机与目标距离）\"\r\n    })\r\n    enableScaleRadius = false;\r\n    @property({\r\n        tooltip: \"摄像机与目标的半径缩放速度\",\r\n        visible: function () {\r\n            //@ts-ignore\r\n            return this.enableScaleRadius === true;\r\n        }\r\n    })\r\n    radiusScaleSpeed = 1;\r\n    @property({\r\n        tooltip: \"摄像机与目标的半径最小值\",\r\n        visible: function () {\r\n            //@ts-ignore\r\n            return this.enableScaleRadius === true;\r\n        }\r\n    })\r\n    minRadius = 5;\r\n    @property({\r\n        tooltip: \"摄像机与目标的半径最大值\",\r\n        visible: function () {\r\n            //@ts-ignore\r\n            return this.enableScaleRadius === true;\r\n        }\r\n    })\r\n    maxRadius = 10;\r\n\r\n    @property({\r\n        tooltip: \"自动旋转是否开启\"\r\n    })\r\n    autoRotate = false;\r\n    @property({\r\n        tooltip: \"自动旋转速度\",\r\n        visible: function () {\r\n            //@ts-ignore\r\n            return this.autoRotate === true;\r\n        }\r\n    })\r\n    autoRotateSpeed = 90;\r\n\r\n    @property({\r\n        tooltip: \"旋转速度\"\r\n    })\r\n\r\n    rotateSpeed = 1;\r\n    @property({\r\n        tooltip: \"跟随速度\"\r\n    })\r\n\r\n    followSpeed = 1;\r\n    @property({\r\n        tooltip: \"X轴旋转范围（人物上下看的角度控制）\"\r\n    })\r\n    xRotationRange = new Vec2(5, 70);\r\n\r\n    @property\r\n    private _targetRadius = 10;\r\n    @property({\r\n        tooltip: \"摄像机与目标的距离（以玩家为中心环绕球半径）\"\r\n    })\r\n    get radius(): number {\r\n        return this._targetRadius;\r\n    }\r\n    set radius(v: number) {\r\n        this._targetRadius = v;\r\n    }\r\n\r\n    @property\r\n    _target: Node = null!;\r\n    @property({\r\n        type: Node,\r\n        tooltip: \"跟随目标\"\r\n    })\r\n    get target(): Node {\r\n        return this._target;\r\n    }\r\n    set target(v: Node) {\r\n        this._target = v;\r\n        this._targetRotation.set(this._startRotation);\r\n        this._targetCenter.set(v.worldPosition);\r\n    }\r\n\r\n    @property\r\n    private _startRotation = new Vec3;\r\n    @property({\r\n        type: Vec3,\r\n        tooltip: \"目标旋转偏移量（初始旋转向量）\"\r\n    })\r\n    get targetRotation(): Vec3 {\r\n        if (!EDITOR) {\r\n            this._startRotation.set(this._targetRotation);\r\n        }\r\n        return this._startRotation;\r\n    }\r\n    set targetRotation(v: Vec3) {\r\n        this._targetRotation.set(v);\r\n        this._startRotation.set(v);\r\n    }\r\n\r\n    @property({\r\n        tooltip: \"是否跟随目标 Y 轴旋转\"\r\n    })\r\n    followTargetRotationY = false;\r\n\r\n    private _center = new Vec3;              // 摄像机视口方向量\r\n    private _targetCenter = new Vec3;        // 摄像机中心点位置（目标位置）\r\n    private _touched = false;                // 是否触摸屏幕\r\n    private _targetRotation = new Vec3;      // 目标旋转向量\r\n    private _rotation = new Quat;            // 摄像机旋转四元素\r\n    private _radius = 10;                    // 当前玩家与目标半径距离\r\n\r\n    start() {\r\n        if (this.enableTouch) {\r\n            input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\r\n            input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n            input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        }\r\n\r\n        if (this.enableScaleRadius) {\r\n            input.on(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);\r\n        }\r\n\r\n        if (this.target) this.resetTargetRotation();\r\n\r\n        // 根据欧拉角信息计算摄像机四元数，旋转顺序为 YZX\r\n        Quat.fromEuler(this._rotation, this._targetRotation.x, this._targetRotation.y, this._targetRotation.z);\r\n\r\n        if (this.target) {\r\n            this._targetCenter.set(this.target.worldPosition);\r\n            this._center.set(this._targetCenter);\r\n        }\r\n\r\n        this._radius = this.radius;\r\n\r\n        this.limitRotation()\r\n    }\r\n\r\n    /** 重置摄像机到初始位置 */\r\n    resetTargetRotation() {\r\n        let targetRotation: Vec3 = this._targetRotation.set(this._startRotation);\r\n        if (this.followTargetRotationY) {\r\n            targetRotation = tempVec3_2.set(targetRotation);\r\n            Quat.toEuler(tempVec3, this.target.worldRotation);\r\n            targetRotation.add(tempVec3);\r\n        }\r\n    }\r\n\r\n    /** 限制 X 轴旋转（上下看） */\r\n    private limitRotation() {\r\n        let rotation = this._targetRotation;\r\n\r\n        if (rotation.x < this.xRotationRange.x) {\r\n            rotation.x = this.xRotationRange.x\r\n        }\r\n        else if (rotation.x > this.xRotationRange.y) {\r\n            rotation.x = this.xRotationRange.y\r\n        }\r\n\r\n        rotation.z = 0;\r\n    }\r\n\r\n    //#region Touch\r\n    private onTouchStart() {\r\n        this._touched = true;\r\n    }\r\n\r\n    private onTouchMove(event: EventTouch) {\r\n        if (!this._touched) return;\r\n\r\n        let delta = event.touch!.getDelta()\r\n\r\n        Quat.fromEuler(tempQuat, this._targetRotation.x, this._targetRotation.y, this._targetRotation.z);\r\n        Quat.rotateX(tempQuat, tempQuat, -delta.y * DeltaFactor);\r\n        Quat.rotateY(tempQuat, tempQuat, -delta.x * DeltaFactor);\r\n        Quat.toEuler(this._targetRotation, tempQuat);\r\n\r\n        this.limitRotation();\r\n    }\r\n\r\n    private onTouchEnd() {\r\n        this._touched = false;\r\n    }\r\n    //#endregion\r\n\r\n    private onMouseWheel(event: EventMouse) {\r\n        let scrollY = event.getScrollY();\r\n        this._targetRadius += this.radiusScaleSpeed * -Math.sign(scrollY);          // 滚轮向前为负，滚轮向后为正\r\n        this._targetRadius = Math.min(this.maxRadius, Math.max(this.minRadius, this._targetRadius));\r\n    }\r\n\r\n    update(dt: number) {\r\n        let targetRotation = this._targetRotation;\r\n        // 是否摄像机围绕 Y 轴自动旋转\r\n        if (this.autoRotate && !this._touched) {\r\n            targetRotation.y += this.autoRotateSpeed * dt;\r\n        }\r\n\r\n        if (this.target) {\r\n            // 重置摄像机中心点\r\n            this._targetCenter.set(this.target.worldPosition);\r\n\r\n            // 是否跟随 Y 轴目标旋转\r\n            if (this.followTargetRotationY) {\r\n                targetRotation = tempVec3_2.set(targetRotation);\r\n                Quat.toEuler(tempVec3, this.target.worldRotation);\r\n                targetRotation.y += tempVec3.y;                                                     // 运行时，只变化 Y 旋转\r\n            }\r\n        }\r\n\r\n        Quat.fromEuler(tempQuat, targetRotation.x, targetRotation.y, targetRotation.z);             // 获取目标对象的旋转四元素（人物面向与摄像机一至）\r\n\r\n        Quat.slerp(this._rotation, this._rotation, tempQuat, dt * 7 * this.rotateSpeed);            // 旋转线性插值（平滑摄像机视口旋转）\r\n        Vec3.lerp(this._center, this._center, this._targetCenter, dt * 5 * this.followSpeed);       // 摄像机跟随位移线性插值（平滑摄像机节点位置移动）\r\n\r\n        this._radius = lerp(this._radius, this._targetRadius, dt * 5);                              // 摄像机与目标距离半径线性插值（镜头平滑前后移动)\r\n\r\n        Vec3.transformQuat(tempVec3, Vec3.FORWARD, this._rotation);                                 // 计算摄像机旋转后的方向量\r\n        Vec3.multiplyScalar(tempVec3, tempVec3, this._radius);                                      // 计算摄像机与目标半径向量\r\n        tempVec3.add(this._center);                                                                 // 计算摄像机与目标偏移后的位置\r\n\r\n        this.node.position = tempVec3;                                                              // 设置摄像机位置\r\n        this.node.lookAt(this._center);                                                             // 设置摄像机视口方向\r\n    }\r\n\r\n    /** 摄像机立即跟随到制定目标的位置 */\r\n    follow() {\r\n        let targetRotation = this._targetRotation;\r\n\r\n        if (this.target) {\r\n            // 重置摄像机中心点\r\n            this._targetCenter.set(this.target.worldPosition);\r\n\r\n            // 是否跟随 Y 轴目标旋转\r\n            if (this.followTargetRotationY) {\r\n                targetRotation = tempVec3_2.set(targetRotation);\r\n                Quat.toEuler(tempVec3, this.target.worldRotation);\r\n                targetRotation.y += tempVec3.y;                                                     // 运行时，只变化 Y 旋转\r\n            }\r\n        }\r\n\r\n        Quat.fromEuler(tempQuat, targetRotation.x, targetRotation.y, targetRotation.z);             // 获取目标对象的旋转四元素（人物面向与摄像机一至）\r\n\r\n        this._rotation = tempQuat;\r\n        this._center = this._targetCenter;\r\n        this._radius = this._targetRadius;\r\n\r\n        Vec3.transformQuat(tempVec3, Vec3.FORWARD, this._rotation);                                 // 计算摄像机旋转后的方向量\r\n        Vec3.multiplyScalar(tempVec3, tempVec3, this._radius);                                      // 计算摄像机与目标半径向量\r\n        tempVec3.add(this._center);                                                                 // 计算摄像机与目标偏移后的位置\r\n\r\n        this.node.position = tempVec3;                                                              // 设置摄像机位置\r\n        this.node.lookAt(this._center);                                                             // 设置摄像机视口方向\r\n    }\r\n}"]}